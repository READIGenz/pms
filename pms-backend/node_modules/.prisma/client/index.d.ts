
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model State
 * 
 */
export type State = $Result.DefaultSelection<Prisma.$StatePayload>
/**
 * Model District
 * 
 */
export type District = $Result.DefaultSelection<Prisma.$DistrictPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model RefProjectTag
 * 
 */
export type RefProjectTag = $Result.DefaultSelection<Prisma.$RefProjectTagPayload>
/**
 * Model ProjectTag
 * 
 */
export type ProjectTag = $Result.DefaultSelection<Prisma.$ProjectTagPayload>
/**
 * Model UserProject
 * 
 */
export type UserProject = $Result.DefaultSelection<Prisma.$UserProjectPayload>
/**
 * Model UserCompany
 * 
 */
export type UserCompany = $Result.DefaultSelection<Prisma.$UserCompanyPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StateType: {
  State: 'State',
  UT: 'UT'
};

export type StateType = (typeof StateType)[keyof typeof StateType]


export const PreferredLanguage: {
  en: 'en',
  hi: 'hi',
  bn: 'bn',
  ta: 'ta',
  te: 'te',
  mr: 'mr',
  pa: 'pa',
  or: 'or',
  gu: 'gu',
  kn: 'kn',
  ml: 'ml'
};

export type PreferredLanguage = (typeof PreferredLanguage)[keyof typeof PreferredLanguage]


export const OperatingZone: {
  NCR: 'NCR',
  North: 'North',
  South: 'South',
  East: 'East',
  West: 'West',
  Central: 'Central'
};

export type OperatingZone = (typeof OperatingZone)[keyof typeof OperatingZone]


export const UserStatus: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const UserRole: {
  Admin: 'Admin',
  Client: 'Client',
  Ava_PMT: 'Ava_PMT',
  Contractor: 'Contractor',
  Consultant: 'Consultant',
  PMC: 'PMC',
  Supplier: 'Supplier'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CompanyStatus: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type CompanyStatus = (typeof CompanyStatus)[keyof typeof CompanyStatus]


export const CompanyRole: {
  Ava_PMT: 'Ava_PMT',
  Contractor: 'Contractor',
  Consultant: 'Consultant',
  PMC: 'PMC',
  Supplier: 'Supplier'
};

export type CompanyRole = (typeof CompanyRole)[keyof typeof CompanyRole]


export const ProjectStatus: {
  Draft: 'Draft',
  Active: 'Active',
  OnHold: 'OnHold',
  Completed: 'Completed',
  Archived: 'Archived'
};

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus]


export const ProjectStage: {
  Planning: 'Planning',
  Design: 'Design',
  Procurement: 'Procurement',
  Execution: 'Execution',
  Handover: 'Handover',
  Closed: 'Closed'
};

export type ProjectStage = (typeof ProjectStage)[keyof typeof ProjectStage]


export const ProjectType: {
  Residential: 'Residential',
  Commercial: 'Commercial',
  Industrial: 'Industrial',
  Institutional: 'Institutional',
  MixedUse: 'MixedUse',
  Infrastructure: 'Infrastructure',
  Other: 'Other'
};

export type ProjectType = (typeof ProjectType)[keyof typeof ProjectType]


export const StructureType: {
  LowRise: 'LowRise',
  HighRise: 'HighRise',
  Villa: 'Villa',
  RowHouse: 'RowHouse',
  InteriorFitout: 'InteriorFitout',
  ShellCore: 'ShellCore',
  Other: 'Other'
};

export type StructureType = (typeof StructureType)[keyof typeof StructureType]


export const ConstructionType: {
  New: 'New',
  Renovation: 'Renovation',
  Retrofit: 'Retrofit',
  Repair: 'Repair',
  Fitout: 'Fitout',
  Other: 'Other'
};

export type ConstructionType = (typeof ConstructionType)[keyof typeof ConstructionType]


export const ContractType: {
  LumpSum: 'LumpSum',
  ItemRate: 'ItemRate',
  Turnkey: 'Turnkey',
  EPC: 'EPC',
  PMC: 'PMC',
  LabourOnly: 'LabourOnly',
  Other: 'Other'
};

export type ContractType = (typeof ContractType)[keyof typeof ContractType]


export const ProjectHealth: {
  Green: 'Green',
  Amber: 'Amber',
  Red: 'Red',
  Unknown: 'Unknown'
};

export type ProjectHealth = (typeof ProjectHealth)[keyof typeof ProjectHealth]


export const CurrencyCode: {
  INR: 'INR',
  USD: 'USD',
  EUR: 'EUR',
  GBP: 'GBP',
  AED: 'AED',
  SAR: 'SAR',
  SGD: 'SGD',
  AUD: 'AUD',
  Other: 'Other'
};

export type CurrencyCode = (typeof CurrencyCode)[keyof typeof CurrencyCode]


export const AreaUnit: {
  SQFT: 'SQFT',
  SQM: 'SQM',
  SQYD: 'SQYD',
  Acre: 'Acre',
  Hectare: 'Hectare'
};

export type AreaUnit = (typeof AreaUnit)[keyof typeof AreaUnit]

}

export type StateType = $Enums.StateType

export const StateType: typeof $Enums.StateType

export type PreferredLanguage = $Enums.PreferredLanguage

export const PreferredLanguage: typeof $Enums.PreferredLanguage

export type OperatingZone = $Enums.OperatingZone

export const OperatingZone: typeof $Enums.OperatingZone

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CompanyStatus = $Enums.CompanyStatus

export const CompanyStatus: typeof $Enums.CompanyStatus

export type CompanyRole = $Enums.CompanyRole

export const CompanyRole: typeof $Enums.CompanyRole

export type ProjectStatus = $Enums.ProjectStatus

export const ProjectStatus: typeof $Enums.ProjectStatus

export type ProjectStage = $Enums.ProjectStage

export const ProjectStage: typeof $Enums.ProjectStage

export type ProjectType = $Enums.ProjectType

export const ProjectType: typeof $Enums.ProjectType

export type StructureType = $Enums.StructureType

export const StructureType: typeof $Enums.StructureType

export type ConstructionType = $Enums.ConstructionType

export const ConstructionType: typeof $Enums.ConstructionType

export type ContractType = $Enums.ContractType

export const ContractType: typeof $Enums.ContractType

export type ProjectHealth = $Enums.ProjectHealth

export const ProjectHealth: typeof $Enums.ProjectHealth

export type CurrencyCode = $Enums.CurrencyCode

export const CurrencyCode: typeof $Enums.CurrencyCode

export type AreaUnit = $Enums.AreaUnit

export const AreaUnit: typeof $Enums.AreaUnit

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more States
 * const states = await prisma.state.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more States
   * const states = await prisma.state.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.state`: Exposes CRUD operations for the **State** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more States
    * const states = await prisma.state.findMany()
    * ```
    */
  get state(): Prisma.StateDelegate<ExtArgs>;

  /**
   * `prisma.district`: Exposes CRUD operations for the **District** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Districts
    * const districts = await prisma.district.findMany()
    * ```
    */
  get district(): Prisma.DistrictDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.refProjectTag`: Exposes CRUD operations for the **RefProjectTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefProjectTags
    * const refProjectTags = await prisma.refProjectTag.findMany()
    * ```
    */
  get refProjectTag(): Prisma.RefProjectTagDelegate<ExtArgs>;

  /**
   * `prisma.projectTag`: Exposes CRUD operations for the **ProjectTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectTags
    * const projectTags = await prisma.projectTag.findMany()
    * ```
    */
  get projectTag(): Prisma.ProjectTagDelegate<ExtArgs>;

  /**
   * `prisma.userProject`: Exposes CRUD operations for the **UserProject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProjects
    * const userProjects = await prisma.userProject.findMany()
    * ```
    */
  get userProject(): Prisma.UserProjectDelegate<ExtArgs>;

  /**
   * `prisma.userCompany`: Exposes CRUD operations for the **UserCompany** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCompanies
    * const userCompanies = await prisma.userCompany.findMany()
    * ```
    */
  get userCompany(): Prisma.UserCompanyDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    State: 'State',
    District: 'District',
    User: 'User',
    Company: 'Company',
    Project: 'Project',
    RefProjectTag: 'RefProjectTag',
    ProjectTag: 'ProjectTag',
    UserProject: 'UserProject',
    UserCompany: 'UserCompany'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "state" | "district" | "user" | "company" | "project" | "refProjectTag" | "projectTag" | "userProject" | "userCompany"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      State: {
        payload: Prisma.$StatePayload<ExtArgs>
        fields: Prisma.StateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          findFirst: {
            args: Prisma.StateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          findMany: {
            args: Prisma.StateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>[]
          }
          create: {
            args: Prisma.StateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          createMany: {
            args: Prisma.StateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>[]
          }
          delete: {
            args: Prisma.StateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          update: {
            args: Prisma.StateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          deleteMany: {
            args: Prisma.StateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          aggregate: {
            args: Prisma.StateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateState>
          }
          groupBy: {
            args: Prisma.StateGroupByArgs<ExtArgs>
            result: $Utils.Optional<StateGroupByOutputType>[]
          }
          count: {
            args: Prisma.StateCountArgs<ExtArgs>
            result: $Utils.Optional<StateCountAggregateOutputType> | number
          }
        }
      }
      District: {
        payload: Prisma.$DistrictPayload<ExtArgs>
        fields: Prisma.DistrictFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistrictFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistrictFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          findFirst: {
            args: Prisma.DistrictFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistrictFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          findMany: {
            args: Prisma.DistrictFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>[]
          }
          create: {
            args: Prisma.DistrictCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          createMany: {
            args: Prisma.DistrictCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DistrictCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>[]
          }
          delete: {
            args: Prisma.DistrictDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          update: {
            args: Prisma.DistrictUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          deleteMany: {
            args: Prisma.DistrictDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DistrictUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DistrictUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          aggregate: {
            args: Prisma.DistrictAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistrict>
          }
          groupBy: {
            args: Prisma.DistrictGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistrictGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistrictCountArgs<ExtArgs>
            result: $Utils.Optional<DistrictCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      RefProjectTag: {
        payload: Prisma.$RefProjectTagPayload<ExtArgs>
        fields: Prisma.RefProjectTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefProjectTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefProjectTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          findFirst: {
            args: Prisma.RefProjectTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefProjectTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          findMany: {
            args: Prisma.RefProjectTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>[]
          }
          create: {
            args: Prisma.RefProjectTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          createMany: {
            args: Prisma.RefProjectTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefProjectTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>[]
          }
          delete: {
            args: Prisma.RefProjectTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          update: {
            args: Prisma.RefProjectTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          deleteMany: {
            args: Prisma.RefProjectTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefProjectTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefProjectTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          aggregate: {
            args: Prisma.RefProjectTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefProjectTag>
          }
          groupBy: {
            args: Prisma.RefProjectTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefProjectTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefProjectTagCountArgs<ExtArgs>
            result: $Utils.Optional<RefProjectTagCountAggregateOutputType> | number
          }
        }
      }
      ProjectTag: {
        payload: Prisma.$ProjectTagPayload<ExtArgs>
        fields: Prisma.ProjectTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          findFirst: {
            args: Prisma.ProjectTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          findMany: {
            args: Prisma.ProjectTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>[]
          }
          create: {
            args: Prisma.ProjectTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          createMany: {
            args: Prisma.ProjectTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>[]
          }
          delete: {
            args: Prisma.ProjectTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          update: {
            args: Prisma.ProjectTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          deleteMany: {
            args: Prisma.ProjectTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          aggregate: {
            args: Prisma.ProjectTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectTag>
          }
          groupBy: {
            args: Prisma.ProjectTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectTagCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectTagCountAggregateOutputType> | number
          }
        }
      }
      UserProject: {
        payload: Prisma.$UserProjectPayload<ExtArgs>
        fields: Prisma.UserProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          findFirst: {
            args: Prisma.UserProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          findMany: {
            args: Prisma.UserProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>[]
          }
          create: {
            args: Prisma.UserProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          createMany: {
            args: Prisma.UserProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>[]
          }
          delete: {
            args: Prisma.UserProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          update: {
            args: Prisma.UserProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          deleteMany: {
            args: Prisma.UserProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          aggregate: {
            args: Prisma.UserProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProject>
          }
          groupBy: {
            args: Prisma.UserProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProjectCountArgs<ExtArgs>
            result: $Utils.Optional<UserProjectCountAggregateOutputType> | number
          }
        }
      }
      UserCompany: {
        payload: Prisma.$UserCompanyPayload<ExtArgs>
        fields: Prisma.UserCompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          findFirst: {
            args: Prisma.UserCompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          findMany: {
            args: Prisma.UserCompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>[]
          }
          create: {
            args: Prisma.UserCompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          createMany: {
            args: Prisma.UserCompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>[]
          }
          delete: {
            args: Prisma.UserCompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          update: {
            args: Prisma.UserCompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          deleteMany: {
            args: Prisma.UserCompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserCompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          aggregate: {
            args: Prisma.UserCompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCompany>
          }
          groupBy: {
            args: Prisma.UserCompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCompanyCountArgs<ExtArgs>
            result: $Utils.Optional<UserCompanyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StateCountOutputType
   */

  export type StateCountOutputType = {
    districts: number
    users: number
    companies: number
    projects: number
  }

  export type StateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    districts?: boolean | StateCountOutputTypeCountDistrictsArgs
    users?: boolean | StateCountOutputTypeCountUsersArgs
    companies?: boolean | StateCountOutputTypeCountCompaniesArgs
    projects?: boolean | StateCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateCountOutputType
     */
    select?: StateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountDistrictsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistrictWhereInput
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * Count Type DistrictCountOutputType
   */

  export type DistrictCountOutputType = {
    users: number
    companies: number
    projects: number
  }

  export type DistrictCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DistrictCountOutputTypeCountUsersArgs
    companies?: boolean | DistrictCountOutputTypeCountCompaniesArgs
    projects?: boolean | DistrictCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistrictCountOutputType
     */
    select?: DistrictCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    projectsAsClient: number
    companiesOwned: number
    userProjects: number
    userCompanies: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectsAsClient?: boolean | UserCountOutputTypeCountProjectsAsClientArgs
    companiesOwned?: boolean | UserCountOutputTypeCountCompaniesOwnedArgs
    userProjects?: boolean | UserCountOutputTypeCountUserProjectsArgs
    userCompanies?: boolean | UserCountOutputTypeCountUserCompaniesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsAsClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompaniesOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    projects: number
    userCompanies: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | CompanyCountOutputTypeCountProjectsArgs
    userCompanies?: boolean | CompanyCountOutputTypeCountUserCompaniesArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUserCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    projectTags: number
    userProjects: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectTags?: boolean | ProjectCountOutputTypeCountProjectTagsArgs
    userProjects?: boolean | ProjectCountOutputTypeCountUserProjectsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountProjectTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectTagWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountUserProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectWhereInput
  }


  /**
   * Count Type RefProjectTagCountOutputType
   */

  export type RefProjectTagCountOutputType = {
    tags: number
  }

  export type RefProjectTagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | RefProjectTagCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * RefProjectTagCountOutputType without action
   */
  export type RefProjectTagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTagCountOutputType
     */
    select?: RefProjectTagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RefProjectTagCountOutputType without action
   */
  export type RefProjectTagCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectTagWhereInput
  }


  /**
   * Models
   */

  /**
   * Model State
   */

  export type AggregateState = {
    _count: StateCountAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  export type StateMinAggregateOutputType = {
    stateId: string | null
    code: string | null
    name: string | null
    type: $Enums.StateType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StateMaxAggregateOutputType = {
    stateId: string | null
    code: string | null
    name: string | null
    type: $Enums.StateType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StateCountAggregateOutputType = {
    stateId: number
    code: number
    name: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StateMinAggregateInputType = {
    stateId?: true
    code?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StateMaxAggregateInputType = {
    stateId?: true
    code?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StateCountAggregateInputType = {
    stateId?: true
    code?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which State to aggregate.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned States
    **/
    _count?: true | StateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StateMaxAggregateInputType
  }

  export type GetStateAggregateType<T extends StateAggregateArgs> = {
        [P in keyof T & keyof AggregateState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateState[P]>
      : GetScalarType<T[P], AggregateState[P]>
  }




  export type StateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StateWhereInput
    orderBy?: StateOrderByWithAggregationInput | StateOrderByWithAggregationInput[]
    by: StateScalarFieldEnum[] | StateScalarFieldEnum
    having?: StateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StateCountAggregateInputType | true
    _min?: StateMinAggregateInputType
    _max?: StateMaxAggregateInputType
  }

  export type StateGroupByOutputType = {
    stateId: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt: Date
    updatedAt: Date
    _count: StateCountAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  type GetStateGroupByPayload<T extends StateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StateGroupByOutputType[P]>
            : GetScalarType<T[P], StateGroupByOutputType[P]>
        }
      >
    >


  export type StateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stateId?: boolean
    code?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    districts?: boolean | State$districtsArgs<ExtArgs>
    users?: boolean | State$usersArgs<ExtArgs>
    companies?: boolean | State$companiesArgs<ExtArgs>
    projects?: boolean | State$projectsArgs<ExtArgs>
    _count?: boolean | StateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["state"]>

  export type StateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stateId?: boolean
    code?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["state"]>

  export type StateSelectScalar = {
    stateId?: boolean
    code?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    districts?: boolean | State$districtsArgs<ExtArgs>
    users?: boolean | State$usersArgs<ExtArgs>
    companies?: boolean | State$companiesArgs<ExtArgs>
    projects?: boolean | State$projectsArgs<ExtArgs>
    _count?: boolean | StateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "State"
    objects: {
      districts: Prisma.$DistrictPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      companies: Prisma.$CompanyPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      stateId: string
      code: string
      name: string
      type: $Enums.StateType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["state"]>
    composites: {}
  }

  type StateGetPayload<S extends boolean | null | undefined | StateDefaultArgs> = $Result.GetResult<Prisma.$StatePayload, S>

  type StateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StateCountAggregateInputType | true
    }

  export interface StateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['State'], meta: { name: 'State' } }
    /**
     * Find zero or one State that matches the filter.
     * @param {StateFindUniqueArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StateFindUniqueArgs>(args: SelectSubset<T, StateFindUniqueArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one State that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StateFindUniqueOrThrowArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StateFindUniqueOrThrowArgs>(args: SelectSubset<T, StateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first State that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StateFindFirstArgs>(args?: SelectSubset<T, StateFindFirstArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first State that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstOrThrowArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StateFindFirstOrThrowArgs>(args?: SelectSubset<T, StateFindFirstOrThrowArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more States that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all States
     * const states = await prisma.state.findMany()
     * 
     * // Get first 10 States
     * const states = await prisma.state.findMany({ take: 10 })
     * 
     * // Only select the `stateId`
     * const stateWithStateIdOnly = await prisma.state.findMany({ select: { stateId: true } })
     * 
     */
    findMany<T extends StateFindManyArgs>(args?: SelectSubset<T, StateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a State.
     * @param {StateCreateArgs} args - Arguments to create a State.
     * @example
     * // Create one State
     * const State = await prisma.state.create({
     *   data: {
     *     // ... data to create a State
     *   }
     * })
     * 
     */
    create<T extends StateCreateArgs>(args: SelectSubset<T, StateCreateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many States.
     * @param {StateCreateManyArgs} args - Arguments to create many States.
     * @example
     * // Create many States
     * const state = await prisma.state.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StateCreateManyArgs>(args?: SelectSubset<T, StateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many States and returns the data saved in the database.
     * @param {StateCreateManyAndReturnArgs} args - Arguments to create many States.
     * @example
     * // Create many States
     * const state = await prisma.state.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many States and only return the `stateId`
     * const stateWithStateIdOnly = await prisma.state.createManyAndReturn({ 
     *   select: { stateId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StateCreateManyAndReturnArgs>(args?: SelectSubset<T, StateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a State.
     * @param {StateDeleteArgs} args - Arguments to delete one State.
     * @example
     * // Delete one State
     * const State = await prisma.state.delete({
     *   where: {
     *     // ... filter to delete one State
     *   }
     * })
     * 
     */
    delete<T extends StateDeleteArgs>(args: SelectSubset<T, StateDeleteArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one State.
     * @param {StateUpdateArgs} args - Arguments to update one State.
     * @example
     * // Update one State
     * const state = await prisma.state.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StateUpdateArgs>(args: SelectSubset<T, StateUpdateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more States.
     * @param {StateDeleteManyArgs} args - Arguments to filter States to delete.
     * @example
     * // Delete a few States
     * const { count } = await prisma.state.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StateDeleteManyArgs>(args?: SelectSubset<T, StateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many States
     * const state = await prisma.state.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StateUpdateManyArgs>(args: SelectSubset<T, StateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one State.
     * @param {StateUpsertArgs} args - Arguments to update or create a State.
     * @example
     * // Update or create a State
     * const state = await prisma.state.upsert({
     *   create: {
     *     // ... data to create a State
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the State we want to update
     *   }
     * })
     */
    upsert<T extends StateUpsertArgs>(args: SelectSubset<T, StateUpsertArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateCountArgs} args - Arguments to filter States to count.
     * @example
     * // Count the number of States
     * const count = await prisma.state.count({
     *   where: {
     *     // ... the filter for the States we want to count
     *   }
     * })
    **/
    count<T extends StateCountArgs>(
      args?: Subset<T, StateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StateAggregateArgs>(args: Subset<T, StateAggregateArgs>): Prisma.PrismaPromise<GetStateAggregateType<T>>

    /**
     * Group by State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StateGroupByArgs['orderBy'] }
        : { orderBy?: StateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the State model
   */
  readonly fields: StateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for State.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    districts<T extends State$districtsArgs<ExtArgs> = {}>(args?: Subset<T, State$districtsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends State$usersArgs<ExtArgs> = {}>(args?: Subset<T, State$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    companies<T extends State$companiesArgs<ExtArgs> = {}>(args?: Subset<T, State$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany"> | Null>
    projects<T extends State$projectsArgs<ExtArgs> = {}>(args?: Subset<T, State$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the State model
   */ 
  interface StateFieldRefs {
    readonly stateId: FieldRef<"State", 'String'>
    readonly code: FieldRef<"State", 'String'>
    readonly name: FieldRef<"State", 'String'>
    readonly type: FieldRef<"State", 'StateType'>
    readonly createdAt: FieldRef<"State", 'DateTime'>
    readonly updatedAt: FieldRef<"State", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * State findUnique
   */
  export type StateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State findUniqueOrThrow
   */
  export type StateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State findFirst
   */
  export type StateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     */
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State findFirstOrThrow
   */
  export type StateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     */
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State findMany
   */
  export type StateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which States to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State create
   */
  export type StateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The data needed to create a State.
     */
    data: XOR<StateCreateInput, StateUncheckedCreateInput>
  }

  /**
   * State createMany
   */
  export type StateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many States.
     */
    data: StateCreateManyInput | StateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * State createManyAndReturn
   */
  export type StateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many States.
     */
    data: StateCreateManyInput | StateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * State update
   */
  export type StateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The data needed to update a State.
     */
    data: XOR<StateUpdateInput, StateUncheckedUpdateInput>
    /**
     * Choose, which State to update.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State updateMany
   */
  export type StateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update States.
     */
    data: XOR<StateUpdateManyMutationInput, StateUncheckedUpdateManyInput>
    /**
     * Filter which States to update
     */
    where?: StateWhereInput
  }

  /**
   * State upsert
   */
  export type StateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The filter to search for the State to update in case it exists.
     */
    where: StateWhereUniqueInput
    /**
     * In case the State found by the `where` argument doesn't exist, create a new State with this data.
     */
    create: XOR<StateCreateInput, StateUncheckedCreateInput>
    /**
     * In case the State was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StateUpdateInput, StateUncheckedUpdateInput>
  }

  /**
   * State delete
   */
  export type StateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter which State to delete.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State deleteMany
   */
  export type StateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which States to delete
     */
    where?: StateWhereInput
  }

  /**
   * State.districts
   */
  export type State$districtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    where?: DistrictWhereInput
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    cursor?: DistrictWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }

  /**
   * State.users
   */
  export type State$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * State.companies
   */
  export type State$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * State.projects
   */
  export type State$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * State without action
   */
  export type StateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
  }


  /**
   * Model District
   */

  export type AggregateDistrict = {
    _count: DistrictCountAggregateOutputType | null
    _min: DistrictMinAggregateOutputType | null
    _max: DistrictMaxAggregateOutputType | null
  }

  export type DistrictMinAggregateOutputType = {
    districtId: string | null
    name: string | null
    stateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DistrictMaxAggregateOutputType = {
    districtId: string | null
    name: string | null
    stateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DistrictCountAggregateOutputType = {
    districtId: number
    name: number
    stateId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DistrictMinAggregateInputType = {
    districtId?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DistrictMaxAggregateInputType = {
    districtId?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DistrictCountAggregateInputType = {
    districtId?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DistrictAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which District to aggregate.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Districts
    **/
    _count?: true | DistrictCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistrictMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistrictMaxAggregateInputType
  }

  export type GetDistrictAggregateType<T extends DistrictAggregateArgs> = {
        [P in keyof T & keyof AggregateDistrict]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistrict[P]>
      : GetScalarType<T[P], AggregateDistrict[P]>
  }




  export type DistrictGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistrictWhereInput
    orderBy?: DistrictOrderByWithAggregationInput | DistrictOrderByWithAggregationInput[]
    by: DistrictScalarFieldEnum[] | DistrictScalarFieldEnum
    having?: DistrictScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistrictCountAggregateInputType | true
    _min?: DistrictMinAggregateInputType
    _max?: DistrictMaxAggregateInputType
  }

  export type DistrictGroupByOutputType = {
    districtId: string
    name: string
    stateId: string
    createdAt: Date
    updatedAt: Date
    _count: DistrictCountAggregateOutputType | null
    _min: DistrictMinAggregateOutputType | null
    _max: DistrictMaxAggregateOutputType | null
  }

  type GetDistrictGroupByPayload<T extends DistrictGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistrictGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistrictGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistrictGroupByOutputType[P]>
            : GetScalarType<T[P], DistrictGroupByOutputType[P]>
        }
      >
    >


  export type DistrictSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    districtId?: boolean
    name?: boolean
    stateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | StateDefaultArgs<ExtArgs>
    users?: boolean | District$usersArgs<ExtArgs>
    companies?: boolean | District$companiesArgs<ExtArgs>
    projects?: boolean | District$projectsArgs<ExtArgs>
    _count?: boolean | DistrictCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["district"]>

  export type DistrictSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    districtId?: boolean
    name?: boolean
    stateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | StateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["district"]>

  export type DistrictSelectScalar = {
    districtId?: boolean
    name?: boolean
    stateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DistrictInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | StateDefaultArgs<ExtArgs>
    users?: boolean | District$usersArgs<ExtArgs>
    companies?: boolean | District$companiesArgs<ExtArgs>
    projects?: boolean | District$projectsArgs<ExtArgs>
    _count?: boolean | DistrictCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DistrictIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | StateDefaultArgs<ExtArgs>
  }

  export type $DistrictPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "District"
    objects: {
      state: Prisma.$StatePayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
      companies: Prisma.$CompanyPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      districtId: string
      name: string
      stateId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["district"]>
    composites: {}
  }

  type DistrictGetPayload<S extends boolean | null | undefined | DistrictDefaultArgs> = $Result.GetResult<Prisma.$DistrictPayload, S>

  type DistrictCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DistrictFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DistrictCountAggregateInputType | true
    }

  export interface DistrictDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['District'], meta: { name: 'District' } }
    /**
     * Find zero or one District that matches the filter.
     * @param {DistrictFindUniqueArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DistrictFindUniqueArgs>(args: SelectSubset<T, DistrictFindUniqueArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one District that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DistrictFindUniqueOrThrowArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DistrictFindUniqueOrThrowArgs>(args: SelectSubset<T, DistrictFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first District that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindFirstArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DistrictFindFirstArgs>(args?: SelectSubset<T, DistrictFindFirstArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first District that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindFirstOrThrowArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DistrictFindFirstOrThrowArgs>(args?: SelectSubset<T, DistrictFindFirstOrThrowArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Districts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Districts
     * const districts = await prisma.district.findMany()
     * 
     * // Get first 10 Districts
     * const districts = await prisma.district.findMany({ take: 10 })
     * 
     * // Only select the `districtId`
     * const districtWithDistrictIdOnly = await prisma.district.findMany({ select: { districtId: true } })
     * 
     */
    findMany<T extends DistrictFindManyArgs>(args?: SelectSubset<T, DistrictFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a District.
     * @param {DistrictCreateArgs} args - Arguments to create a District.
     * @example
     * // Create one District
     * const District = await prisma.district.create({
     *   data: {
     *     // ... data to create a District
     *   }
     * })
     * 
     */
    create<T extends DistrictCreateArgs>(args: SelectSubset<T, DistrictCreateArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Districts.
     * @param {DistrictCreateManyArgs} args - Arguments to create many Districts.
     * @example
     * // Create many Districts
     * const district = await prisma.district.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DistrictCreateManyArgs>(args?: SelectSubset<T, DistrictCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Districts and returns the data saved in the database.
     * @param {DistrictCreateManyAndReturnArgs} args - Arguments to create many Districts.
     * @example
     * // Create many Districts
     * const district = await prisma.district.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Districts and only return the `districtId`
     * const districtWithDistrictIdOnly = await prisma.district.createManyAndReturn({ 
     *   select: { districtId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DistrictCreateManyAndReturnArgs>(args?: SelectSubset<T, DistrictCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a District.
     * @param {DistrictDeleteArgs} args - Arguments to delete one District.
     * @example
     * // Delete one District
     * const District = await prisma.district.delete({
     *   where: {
     *     // ... filter to delete one District
     *   }
     * })
     * 
     */
    delete<T extends DistrictDeleteArgs>(args: SelectSubset<T, DistrictDeleteArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one District.
     * @param {DistrictUpdateArgs} args - Arguments to update one District.
     * @example
     * // Update one District
     * const district = await prisma.district.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DistrictUpdateArgs>(args: SelectSubset<T, DistrictUpdateArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Districts.
     * @param {DistrictDeleteManyArgs} args - Arguments to filter Districts to delete.
     * @example
     * // Delete a few Districts
     * const { count } = await prisma.district.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DistrictDeleteManyArgs>(args?: SelectSubset<T, DistrictDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Districts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Districts
     * const district = await prisma.district.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DistrictUpdateManyArgs>(args: SelectSubset<T, DistrictUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one District.
     * @param {DistrictUpsertArgs} args - Arguments to update or create a District.
     * @example
     * // Update or create a District
     * const district = await prisma.district.upsert({
     *   create: {
     *     // ... data to create a District
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the District we want to update
     *   }
     * })
     */
    upsert<T extends DistrictUpsertArgs>(args: SelectSubset<T, DistrictUpsertArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Districts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictCountArgs} args - Arguments to filter Districts to count.
     * @example
     * // Count the number of Districts
     * const count = await prisma.district.count({
     *   where: {
     *     // ... the filter for the Districts we want to count
     *   }
     * })
    **/
    count<T extends DistrictCountArgs>(
      args?: Subset<T, DistrictCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistrictCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a District.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistrictAggregateArgs>(args: Subset<T, DistrictAggregateArgs>): Prisma.PrismaPromise<GetDistrictAggregateType<T>>

    /**
     * Group by District.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistrictGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistrictGroupByArgs['orderBy'] }
        : { orderBy?: DistrictGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistrictGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistrictGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the District model
   */
  readonly fields: DistrictFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for District.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistrictClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    state<T extends StateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StateDefaultArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    users<T extends District$usersArgs<ExtArgs> = {}>(args?: Subset<T, District$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    companies<T extends District$companiesArgs<ExtArgs> = {}>(args?: Subset<T, District$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany"> | Null>
    projects<T extends District$projectsArgs<ExtArgs> = {}>(args?: Subset<T, District$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the District model
   */ 
  interface DistrictFieldRefs {
    readonly districtId: FieldRef<"District", 'String'>
    readonly name: FieldRef<"District", 'String'>
    readonly stateId: FieldRef<"District", 'String'>
    readonly createdAt: FieldRef<"District", 'DateTime'>
    readonly updatedAt: FieldRef<"District", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * District findUnique
   */
  export type DistrictFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where: DistrictWhereUniqueInput
  }

  /**
   * District findUniqueOrThrow
   */
  export type DistrictFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where: DistrictWhereUniqueInput
  }

  /**
   * District findFirst
   */
  export type DistrictFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Districts.
     */
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }

  /**
   * District findFirstOrThrow
   */
  export type DistrictFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Districts.
     */
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }

  /**
   * District findMany
   */
  export type DistrictFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which Districts to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }

  /**
   * District create
   */
  export type DistrictCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The data needed to create a District.
     */
    data: XOR<DistrictCreateInput, DistrictUncheckedCreateInput>
  }

  /**
   * District createMany
   */
  export type DistrictCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Districts.
     */
    data: DistrictCreateManyInput | DistrictCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * District createManyAndReturn
   */
  export type DistrictCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Districts.
     */
    data: DistrictCreateManyInput | DistrictCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * District update
   */
  export type DistrictUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The data needed to update a District.
     */
    data: XOR<DistrictUpdateInput, DistrictUncheckedUpdateInput>
    /**
     * Choose, which District to update.
     */
    where: DistrictWhereUniqueInput
  }

  /**
   * District updateMany
   */
  export type DistrictUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Districts.
     */
    data: XOR<DistrictUpdateManyMutationInput, DistrictUncheckedUpdateManyInput>
    /**
     * Filter which Districts to update
     */
    where?: DistrictWhereInput
  }

  /**
   * District upsert
   */
  export type DistrictUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The filter to search for the District to update in case it exists.
     */
    where: DistrictWhereUniqueInput
    /**
     * In case the District found by the `where` argument doesn't exist, create a new District with this data.
     */
    create: XOR<DistrictCreateInput, DistrictUncheckedCreateInput>
    /**
     * In case the District was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistrictUpdateInput, DistrictUncheckedUpdateInput>
  }

  /**
   * District delete
   */
  export type DistrictDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter which District to delete.
     */
    where: DistrictWhereUniqueInput
  }

  /**
   * District deleteMany
   */
  export type DistrictDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Districts to delete
     */
    where?: DistrictWhereInput
  }

  /**
   * District.users
   */
  export type District$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * District.companies
   */
  export type District$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * District.projects
   */
  export type District$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * District without action
   */
  export type DistrictDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    userId: string | null
    code: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    countryCode: string | null
    phone: string | null
    email: string | null
    preferredLanguage: $Enums.PreferredLanguage | null
    profilePhoto: string | null
    stateId: string | null
    districtId: string | null
    cityTown: string | null
    pin: string | null
    operatingZone: $Enums.OperatingZone | null
    address: string | null
    isClient: boolean | null
    isServiceProvider: boolean | null
    userStatus: $Enums.UserStatus | null
    passwordHash: string | null
    isSuperAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userRole: $Enums.UserRole | null
  }

  export type UserMaxAggregateOutputType = {
    userId: string | null
    code: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    countryCode: string | null
    phone: string | null
    email: string | null
    preferredLanguage: $Enums.PreferredLanguage | null
    profilePhoto: string | null
    stateId: string | null
    districtId: string | null
    cityTown: string | null
    pin: string | null
    operatingZone: $Enums.OperatingZone | null
    address: string | null
    isClient: boolean | null
    isServiceProvider: boolean | null
    userStatus: $Enums.UserStatus | null
    passwordHash: string | null
    isSuperAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userRole: $Enums.UserRole | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    code: number
    firstName: number
    middleName: number
    lastName: number
    countryCode: number
    phone: number
    email: number
    preferredLanguage: number
    profilePhoto: number
    stateId: number
    districtId: number
    cityTown: number
    pin: number
    operatingZone: number
    address: number
    isClient: number
    isServiceProvider: number
    userStatus: number
    passwordHash: number
    isSuperAdmin: number
    createdAt: number
    updatedAt: number
    userRole: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    userId?: true
    code?: true
    firstName?: true
    middleName?: true
    lastName?: true
    countryCode?: true
    phone?: true
    email?: true
    preferredLanguage?: true
    profilePhoto?: true
    stateId?: true
    districtId?: true
    cityTown?: true
    pin?: true
    operatingZone?: true
    address?: true
    isClient?: true
    isServiceProvider?: true
    userStatus?: true
    passwordHash?: true
    isSuperAdmin?: true
    createdAt?: true
    updatedAt?: true
    userRole?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    code?: true
    firstName?: true
    middleName?: true
    lastName?: true
    countryCode?: true
    phone?: true
    email?: true
    preferredLanguage?: true
    profilePhoto?: true
    stateId?: true
    districtId?: true
    cityTown?: true
    pin?: true
    operatingZone?: true
    address?: true
    isClient?: true
    isServiceProvider?: true
    userStatus?: true
    passwordHash?: true
    isSuperAdmin?: true
    createdAt?: true
    updatedAt?: true
    userRole?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    code?: true
    firstName?: true
    middleName?: true
    lastName?: true
    countryCode?: true
    phone?: true
    email?: true
    preferredLanguage?: true
    profilePhoto?: true
    stateId?: true
    districtId?: true
    cityTown?: true
    pin?: true
    operatingZone?: true
    address?: true
    isClient?: true
    isServiceProvider?: true
    userStatus?: true
    passwordHash?: true
    isSuperAdmin?: true
    createdAt?: true
    updatedAt?: true
    userRole?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: string
    code: string | null
    firstName: string
    middleName: string | null
    lastName: string | null
    countryCode: string
    phone: string
    email: string | null
    preferredLanguage: $Enums.PreferredLanguage | null
    profilePhoto: string | null
    stateId: string | null
    districtId: string | null
    cityTown: string | null
    pin: string | null
    operatingZone: $Enums.OperatingZone | null
    address: string | null
    isClient: boolean | null
    isServiceProvider: boolean | null
    userStatus: $Enums.UserStatus
    passwordHash: string | null
    isSuperAdmin: boolean | null
    createdAt: Date
    updatedAt: Date
    userRole: $Enums.UserRole | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    code?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phone?: boolean
    email?: boolean
    preferredLanguage?: boolean
    profilePhoto?: boolean
    stateId?: boolean
    districtId?: boolean
    cityTown?: boolean
    pin?: boolean
    operatingZone?: boolean
    address?: boolean
    isClient?: boolean
    isServiceProvider?: boolean
    userStatus?: boolean
    passwordHash?: boolean
    isSuperAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRole?: boolean
    state?: boolean | User$stateArgs<ExtArgs>
    district?: boolean | User$districtArgs<ExtArgs>
    projectsAsClient?: boolean | User$projectsAsClientArgs<ExtArgs>
    companiesOwned?: boolean | User$companiesOwnedArgs<ExtArgs>
    userProjects?: boolean | User$userProjectsArgs<ExtArgs>
    userCompanies?: boolean | User$userCompaniesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    code?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phone?: boolean
    email?: boolean
    preferredLanguage?: boolean
    profilePhoto?: boolean
    stateId?: boolean
    districtId?: boolean
    cityTown?: boolean
    pin?: boolean
    operatingZone?: boolean
    address?: boolean
    isClient?: boolean
    isServiceProvider?: boolean
    userStatus?: boolean
    passwordHash?: boolean
    isSuperAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRole?: boolean
    state?: boolean | User$stateArgs<ExtArgs>
    district?: boolean | User$districtArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    code?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phone?: boolean
    email?: boolean
    preferredLanguage?: boolean
    profilePhoto?: boolean
    stateId?: boolean
    districtId?: boolean
    cityTown?: boolean
    pin?: boolean
    operatingZone?: boolean
    address?: boolean
    isClient?: boolean
    isServiceProvider?: boolean
    userStatus?: boolean
    passwordHash?: boolean
    isSuperAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRole?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | User$stateArgs<ExtArgs>
    district?: boolean | User$districtArgs<ExtArgs>
    projectsAsClient?: boolean | User$projectsAsClientArgs<ExtArgs>
    companiesOwned?: boolean | User$companiesOwnedArgs<ExtArgs>
    userProjects?: boolean | User$userProjectsArgs<ExtArgs>
    userCompanies?: boolean | User$userCompaniesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | User$stateArgs<ExtArgs>
    district?: boolean | User$districtArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      state: Prisma.$StatePayload<ExtArgs> | null
      district: Prisma.$DistrictPayload<ExtArgs> | null
      projectsAsClient: Prisma.$ProjectPayload<ExtArgs>[]
      companiesOwned: Prisma.$CompanyPayload<ExtArgs>[]
      userProjects: Prisma.$UserProjectPayload<ExtArgs>[]
      userCompanies: Prisma.$UserCompanyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      code: string | null
      firstName: string
      middleName: string | null
      lastName: string | null
      countryCode: string
      phone: string
      email: string | null
      preferredLanguage: $Enums.PreferredLanguage | null
      profilePhoto: string | null
      stateId: string | null
      districtId: string | null
      cityTown: string | null
      pin: string | null
      operatingZone: $Enums.OperatingZone | null
      address: string | null
      isClient: boolean | null
      isServiceProvider: boolean | null
      userStatus: $Enums.UserStatus
      passwordHash: string | null
      isSuperAdmin: boolean | null
      createdAt: Date
      updatedAt: Date
      userRole: $Enums.UserRole | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    state<T extends User$stateArgs<ExtArgs> = {}>(args?: Subset<T, User$stateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    district<T extends User$districtArgs<ExtArgs> = {}>(args?: Subset<T, User$districtArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projectsAsClient<T extends User$projectsAsClientArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsAsClientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    companiesOwned<T extends User$companiesOwnedArgs<ExtArgs> = {}>(args?: Subset<T, User$companiesOwnedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany"> | Null>
    userProjects<T extends User$userProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$userProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findMany"> | Null>
    userCompanies<T extends User$userCompaniesArgs<ExtArgs> = {}>(args?: Subset<T, User$userCompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'String'>
    readonly code: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly middleName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly countryCode: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly preferredLanguage: FieldRef<"User", 'PreferredLanguage'>
    readonly profilePhoto: FieldRef<"User", 'String'>
    readonly stateId: FieldRef<"User", 'String'>
    readonly districtId: FieldRef<"User", 'String'>
    readonly cityTown: FieldRef<"User", 'String'>
    readonly pin: FieldRef<"User", 'String'>
    readonly operatingZone: FieldRef<"User", 'OperatingZone'>
    readonly address: FieldRef<"User", 'String'>
    readonly isClient: FieldRef<"User", 'Boolean'>
    readonly isServiceProvider: FieldRef<"User", 'Boolean'>
    readonly userStatus: FieldRef<"User", 'UserStatus'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly isSuperAdmin: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly userRole: FieldRef<"User", 'UserRole'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.state
   */
  export type User$stateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    where?: StateWhereInput
  }

  /**
   * User.district
   */
  export type User$districtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    where?: DistrictWhereInput
  }

  /**
   * User.projectsAsClient
   */
  export type User$projectsAsClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.companiesOwned
   */
  export type User$companiesOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * User.userProjects
   */
  export type User$userProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    where?: UserProjectWhereInput
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    cursor?: UserProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * User.userCompanies
   */
  export type User$userCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    where?: UserCompanyWhereInput
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    cursor?: UserCompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    companyId: string | null
    name: string | null
    status: $Enums.CompanyStatus | null
    website: string | null
    companyRole: $Enums.CompanyRole | null
    gstin: string | null
    pan: string | null
    cin: string | null
    primaryContact: string | null
    contactMobile: string | null
    contactEmail: string | null
    stateId: string | null
    districtId: string | null
    address: string | null
    pin: string | null
    notes: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    companyId: string | null
    name: string | null
    status: $Enums.CompanyStatus | null
    website: string | null
    companyRole: $Enums.CompanyRole | null
    gstin: string | null
    pan: string | null
    cin: string | null
    primaryContact: string | null
    contactMobile: string | null
    contactEmail: string | null
    stateId: string | null
    districtId: string | null
    address: string | null
    pin: string | null
    notes: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    companyId: number
    name: number
    status: number
    website: number
    companyRole: number
    gstin: number
    pan: number
    cin: number
    primaryContact: number
    contactMobile: number
    contactEmail: number
    stateId: number
    districtId: number
    address: number
    pin: number
    notes: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    companyId?: true
    name?: true
    status?: true
    website?: true
    companyRole?: true
    gstin?: true
    pan?: true
    cin?: true
    primaryContact?: true
    contactMobile?: true
    contactEmail?: true
    stateId?: true
    districtId?: true
    address?: true
    pin?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    companyId?: true
    name?: true
    status?: true
    website?: true
    companyRole?: true
    gstin?: true
    pan?: true
    cin?: true
    primaryContact?: true
    contactMobile?: true
    contactEmail?: true
    stateId?: true
    districtId?: true
    address?: true
    pin?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    companyId?: true
    name?: true
    status?: true
    website?: true
    companyRole?: true
    gstin?: true
    pan?: true
    cin?: true
    primaryContact?: true
    contactMobile?: true
    contactEmail?: true
    stateId?: true
    districtId?: true
    address?: true
    pin?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    companyId: string
    name: string
    status: $Enums.CompanyStatus
    website: string | null
    companyRole: $Enums.CompanyRole | null
    gstin: string | null
    pan: string | null
    cin: string | null
    primaryContact: string | null
    contactMobile: string | null
    contactEmail: string | null
    stateId: string | null
    districtId: string | null
    address: string | null
    pin: string | null
    notes: string | null
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    companyId?: boolean
    name?: boolean
    status?: boolean
    website?: boolean
    companyRole?: boolean
    gstin?: boolean
    pan?: boolean
    cin?: boolean
    primaryContact?: boolean
    contactMobile?: boolean
    contactEmail?: boolean
    stateId?: boolean
    districtId?: boolean
    address?: boolean
    pin?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | Company$stateArgs<ExtArgs>
    district?: boolean | Company$districtArgs<ExtArgs>
    owner?: boolean | Company$ownerArgs<ExtArgs>
    projects?: boolean | Company$projectsArgs<ExtArgs>
    userCompanies?: boolean | Company$userCompaniesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    companyId?: boolean
    name?: boolean
    status?: boolean
    website?: boolean
    companyRole?: boolean
    gstin?: boolean
    pan?: boolean
    cin?: boolean
    primaryContact?: boolean
    contactMobile?: boolean
    contactEmail?: boolean
    stateId?: boolean
    districtId?: boolean
    address?: boolean
    pin?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | Company$stateArgs<ExtArgs>
    district?: boolean | Company$districtArgs<ExtArgs>
    owner?: boolean | Company$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    companyId?: boolean
    name?: boolean
    status?: boolean
    website?: boolean
    companyRole?: boolean
    gstin?: boolean
    pan?: boolean
    cin?: boolean
    primaryContact?: boolean
    contactMobile?: boolean
    contactEmail?: boolean
    stateId?: boolean
    districtId?: boolean
    address?: boolean
    pin?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | Company$stateArgs<ExtArgs>
    district?: boolean | Company$districtArgs<ExtArgs>
    owner?: boolean | Company$ownerArgs<ExtArgs>
    projects?: boolean | Company$projectsArgs<ExtArgs>
    userCompanies?: boolean | Company$userCompaniesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | Company$stateArgs<ExtArgs>
    district?: boolean | Company$districtArgs<ExtArgs>
    owner?: boolean | Company$ownerArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      state: Prisma.$StatePayload<ExtArgs> | null
      district: Prisma.$DistrictPayload<ExtArgs> | null
      owner: Prisma.$UserPayload<ExtArgs> | null
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      userCompanies: Prisma.$UserCompanyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      companyId: string
      name: string
      status: $Enums.CompanyStatus
      website: string | null
      companyRole: $Enums.CompanyRole | null
      gstin: string | null
      pan: string | null
      cin: string | null
      primaryContact: string | null
      contactMobile: string | null
      contactEmail: string | null
      stateId: string | null
      districtId: string | null
      address: string | null
      pin: string | null
      notes: string | null
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `companyId`
     * const companyWithCompanyIdOnly = await prisma.company.findMany({ select: { companyId: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `companyId`
     * const companyWithCompanyIdOnly = await prisma.company.createManyAndReturn({ 
     *   select: { companyId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    state<T extends Company$stateArgs<ExtArgs> = {}>(args?: Subset<T, Company$stateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    district<T extends Company$districtArgs<ExtArgs> = {}>(args?: Subset<T, Company$districtArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    owner<T extends Company$ownerArgs<ExtArgs> = {}>(args?: Subset<T, Company$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projects<T extends Company$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Company$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    userCompanies<T extends Company$userCompaniesArgs<ExtArgs> = {}>(args?: Subset<T, Company$userCompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly companyId: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly status: FieldRef<"Company", 'CompanyStatus'>
    readonly website: FieldRef<"Company", 'String'>
    readonly companyRole: FieldRef<"Company", 'CompanyRole'>
    readonly gstin: FieldRef<"Company", 'String'>
    readonly pan: FieldRef<"Company", 'String'>
    readonly cin: FieldRef<"Company", 'String'>
    readonly primaryContact: FieldRef<"Company", 'String'>
    readonly contactMobile: FieldRef<"Company", 'String'>
    readonly contactEmail: FieldRef<"Company", 'String'>
    readonly stateId: FieldRef<"Company", 'String'>
    readonly districtId: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly pin: FieldRef<"Company", 'String'>
    readonly notes: FieldRef<"Company", 'String'>
    readonly userId: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company.state
   */
  export type Company$stateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    where?: StateWhereInput
  }

  /**
   * Company.district
   */
  export type Company$districtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    where?: DistrictWhereInput
  }

  /**
   * Company.owner
   */
  export type Company$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Company.projects
   */
  export type Company$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Company.userCompanies
   */
  export type Company$userCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    where?: UserCompanyWhereInput
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    cursor?: UserCompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
    contractValue: Decimal | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
  }

  export type ProjectSumAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
    contractValue: Decimal | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
  }

  export type ProjectMinAggregateOutputType = {
    projectId: string | null
    title: string | null
    code: string | null
    status: $Enums.ProjectStatus | null
    stage: $Enums.ProjectStage | null
    projectType: $Enums.ProjectType | null
    structureType: $Enums.StructureType | null
    constructionType: $Enums.ConstructionType | null
    contractType: $Enums.ContractType | null
    health: $Enums.ProjectHealth | null
    clientUserId: string | null
    clientCompanyId: string | null
    address: string | null
    cityTown: string | null
    stateId: string | null
    districtId: string | null
    pin: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    startDate: Date | null
    plannedCompletionDate: Date | null
    currency: $Enums.CurrencyCode | null
    contractValue: Decimal | null
    areaUnit: $Enums.AreaUnit | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    projectId: string | null
    title: string | null
    code: string | null
    status: $Enums.ProjectStatus | null
    stage: $Enums.ProjectStage | null
    projectType: $Enums.ProjectType | null
    structureType: $Enums.StructureType | null
    constructionType: $Enums.ConstructionType | null
    contractType: $Enums.ContractType | null
    health: $Enums.ProjectHealth | null
    clientUserId: string | null
    clientCompanyId: string | null
    address: string | null
    cityTown: string | null
    stateId: string | null
    districtId: string | null
    pin: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    startDate: Date | null
    plannedCompletionDate: Date | null
    currency: $Enums.CurrencyCode | null
    contractValue: Decimal | null
    areaUnit: $Enums.AreaUnit | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    projectId: number
    title: number
    code: number
    status: number
    stage: number
    projectType: number
    structureType: number
    constructionType: number
    contractType: number
    health: number
    clientUserId: number
    clientCompanyId: number
    address: number
    cityTown: number
    stateId: number
    districtId: number
    pin: number
    latitude: number
    longitude: number
    startDate: number
    plannedCompletionDate: number
    currency: number
    contractValue: number
    areaUnit: number
    plotArea: number
    builtUpArea: number
    floors: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    latitude?: true
    longitude?: true
    contractValue?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
  }

  export type ProjectSumAggregateInputType = {
    latitude?: true
    longitude?: true
    contractValue?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
  }

  export type ProjectMinAggregateInputType = {
    projectId?: true
    title?: true
    code?: true
    status?: true
    stage?: true
    projectType?: true
    structureType?: true
    constructionType?: true
    contractType?: true
    health?: true
    clientUserId?: true
    clientCompanyId?: true
    address?: true
    cityTown?: true
    stateId?: true
    districtId?: true
    pin?: true
    latitude?: true
    longitude?: true
    startDate?: true
    plannedCompletionDate?: true
    currency?: true
    contractValue?: true
    areaUnit?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    projectId?: true
    title?: true
    code?: true
    status?: true
    stage?: true
    projectType?: true
    structureType?: true
    constructionType?: true
    contractType?: true
    health?: true
    clientUserId?: true
    clientCompanyId?: true
    address?: true
    cityTown?: true
    stateId?: true
    districtId?: true
    pin?: true
    latitude?: true
    longitude?: true
    startDate?: true
    plannedCompletionDate?: true
    currency?: true
    contractValue?: true
    areaUnit?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    projectId?: true
    title?: true
    code?: true
    status?: true
    stage?: true
    projectType?: true
    structureType?: true
    constructionType?: true
    contractType?: true
    health?: true
    clientUserId?: true
    clientCompanyId?: true
    address?: true
    cityTown?: true
    stateId?: true
    districtId?: true
    pin?: true
    latitude?: true
    longitude?: true
    startDate?: true
    plannedCompletionDate?: true
    currency?: true
    contractValue?: true
    areaUnit?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    projectId: string
    title: string
    code: string | null
    status: $Enums.ProjectStatus
    stage: $Enums.ProjectStage | null
    projectType: $Enums.ProjectType | null
    structureType: $Enums.StructureType | null
    constructionType: $Enums.ConstructionType | null
    contractType: $Enums.ContractType | null
    health: $Enums.ProjectHealth
    clientUserId: string | null
    clientCompanyId: string | null
    address: string | null
    cityTown: string | null
    stateId: string | null
    districtId: string | null
    pin: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    startDate: Date | null
    plannedCompletionDate: Date | null
    currency: $Enums.CurrencyCode | null
    contractValue: Decimal | null
    areaUnit: $Enums.AreaUnit | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    title?: boolean
    code?: boolean
    status?: boolean
    stage?: boolean
    projectType?: boolean
    structureType?: boolean
    constructionType?: boolean
    contractType?: boolean
    health?: boolean
    clientUserId?: boolean
    clientCompanyId?: boolean
    address?: boolean
    cityTown?: boolean
    stateId?: boolean
    districtId?: boolean
    pin?: boolean
    latitude?: boolean
    longitude?: boolean
    startDate?: boolean
    plannedCompletionDate?: boolean
    currency?: boolean
    contractValue?: boolean
    areaUnit?: boolean
    plotArea?: boolean
    builtUpArea?: boolean
    floors?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientUser?: boolean | Project$clientUserArgs<ExtArgs>
    clientCompany?: boolean | Project$clientCompanyArgs<ExtArgs>
    state?: boolean | Project$stateArgs<ExtArgs>
    district?: boolean | Project$districtArgs<ExtArgs>
    projectTags?: boolean | Project$projectTagsArgs<ExtArgs>
    userProjects?: boolean | Project$userProjectsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    title?: boolean
    code?: boolean
    status?: boolean
    stage?: boolean
    projectType?: boolean
    structureType?: boolean
    constructionType?: boolean
    contractType?: boolean
    health?: boolean
    clientUserId?: boolean
    clientCompanyId?: boolean
    address?: boolean
    cityTown?: boolean
    stateId?: boolean
    districtId?: boolean
    pin?: boolean
    latitude?: boolean
    longitude?: boolean
    startDate?: boolean
    plannedCompletionDate?: boolean
    currency?: boolean
    contractValue?: boolean
    areaUnit?: boolean
    plotArea?: boolean
    builtUpArea?: boolean
    floors?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientUser?: boolean | Project$clientUserArgs<ExtArgs>
    clientCompany?: boolean | Project$clientCompanyArgs<ExtArgs>
    state?: boolean | Project$stateArgs<ExtArgs>
    district?: boolean | Project$districtArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    projectId?: boolean
    title?: boolean
    code?: boolean
    status?: boolean
    stage?: boolean
    projectType?: boolean
    structureType?: boolean
    constructionType?: boolean
    contractType?: boolean
    health?: boolean
    clientUserId?: boolean
    clientCompanyId?: boolean
    address?: boolean
    cityTown?: boolean
    stateId?: boolean
    districtId?: boolean
    pin?: boolean
    latitude?: boolean
    longitude?: boolean
    startDate?: boolean
    plannedCompletionDate?: boolean
    currency?: boolean
    contractValue?: boolean
    areaUnit?: boolean
    plotArea?: boolean
    builtUpArea?: boolean
    floors?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientUser?: boolean | Project$clientUserArgs<ExtArgs>
    clientCompany?: boolean | Project$clientCompanyArgs<ExtArgs>
    state?: boolean | Project$stateArgs<ExtArgs>
    district?: boolean | Project$districtArgs<ExtArgs>
    projectTags?: boolean | Project$projectTagsArgs<ExtArgs>
    userProjects?: boolean | Project$userProjectsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientUser?: boolean | Project$clientUserArgs<ExtArgs>
    clientCompany?: boolean | Project$clientCompanyArgs<ExtArgs>
    state?: boolean | Project$stateArgs<ExtArgs>
    district?: boolean | Project$districtArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      clientUser: Prisma.$UserPayload<ExtArgs> | null
      clientCompany: Prisma.$CompanyPayload<ExtArgs> | null
      state: Prisma.$StatePayload<ExtArgs> | null
      district: Prisma.$DistrictPayload<ExtArgs> | null
      projectTags: Prisma.$ProjectTagPayload<ExtArgs>[]
      userProjects: Prisma.$UserProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      projectId: string
      title: string
      code: string | null
      status: $Enums.ProjectStatus
      stage: $Enums.ProjectStage | null
      projectType: $Enums.ProjectType | null
      structureType: $Enums.StructureType | null
      constructionType: $Enums.ConstructionType | null
      contractType: $Enums.ContractType | null
      health: $Enums.ProjectHealth
      clientUserId: string | null
      clientCompanyId: string | null
      address: string | null
      cityTown: string | null
      stateId: string | null
      districtId: string | null
      pin: string | null
      latitude: Prisma.Decimal | null
      longitude: Prisma.Decimal | null
      startDate: Date | null
      plannedCompletionDate: Date | null
      currency: $Enums.CurrencyCode | null
      contractValue: Prisma.Decimal | null
      areaUnit: $Enums.AreaUnit | null
      plotArea: Prisma.Decimal | null
      builtUpArea: Prisma.Decimal | null
      floors: number | null
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const projectWithProjectIdOnly = await prisma.project.findMany({ select: { projectId: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `projectId`
     * const projectWithProjectIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { projectId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clientUser<T extends Project$clientUserArgs<ExtArgs> = {}>(args?: Subset<T, Project$clientUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    clientCompany<T extends Project$clientCompanyArgs<ExtArgs> = {}>(args?: Subset<T, Project$clientCompanyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    state<T extends Project$stateArgs<ExtArgs> = {}>(args?: Subset<T, Project$stateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    district<T extends Project$districtArgs<ExtArgs> = {}>(args?: Subset<T, Project$districtArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projectTags<T extends Project$projectTagsArgs<ExtArgs> = {}>(args?: Subset<T, Project$projectTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findMany"> | Null>
    userProjects<T extends Project$userProjectsArgs<ExtArgs> = {}>(args?: Subset<T, Project$userProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly projectId: FieldRef<"Project", 'String'>
    readonly title: FieldRef<"Project", 'String'>
    readonly code: FieldRef<"Project", 'String'>
    readonly status: FieldRef<"Project", 'ProjectStatus'>
    readonly stage: FieldRef<"Project", 'ProjectStage'>
    readonly projectType: FieldRef<"Project", 'ProjectType'>
    readonly structureType: FieldRef<"Project", 'StructureType'>
    readonly constructionType: FieldRef<"Project", 'ConstructionType'>
    readonly contractType: FieldRef<"Project", 'ContractType'>
    readonly health: FieldRef<"Project", 'ProjectHealth'>
    readonly clientUserId: FieldRef<"Project", 'String'>
    readonly clientCompanyId: FieldRef<"Project", 'String'>
    readonly address: FieldRef<"Project", 'String'>
    readonly cityTown: FieldRef<"Project", 'String'>
    readonly stateId: FieldRef<"Project", 'String'>
    readonly districtId: FieldRef<"Project", 'String'>
    readonly pin: FieldRef<"Project", 'String'>
    readonly latitude: FieldRef<"Project", 'Decimal'>
    readonly longitude: FieldRef<"Project", 'Decimal'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly plannedCompletionDate: FieldRef<"Project", 'DateTime'>
    readonly currency: FieldRef<"Project", 'CurrencyCode'>
    readonly contractValue: FieldRef<"Project", 'Decimal'>
    readonly areaUnit: FieldRef<"Project", 'AreaUnit'>
    readonly plotArea: FieldRef<"Project", 'Decimal'>
    readonly builtUpArea: FieldRef<"Project", 'Decimal'>
    readonly floors: FieldRef<"Project", 'Int'>
    readonly description: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.clientUser
   */
  export type Project$clientUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Project.clientCompany
   */
  export type Project$clientCompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * Project.state
   */
  export type Project$stateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    where?: StateWhereInput
  }

  /**
   * Project.district
   */
  export type Project$districtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    where?: DistrictWhereInput
  }

  /**
   * Project.projectTags
   */
  export type Project$projectTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    where?: ProjectTagWhereInput
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    cursor?: ProjectTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * Project.userProjects
   */
  export type Project$userProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    where?: UserProjectWhereInput
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    cursor?: UserProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model RefProjectTag
   */

  export type AggregateRefProjectTag = {
    _count: RefProjectTagCountAggregateOutputType | null
    _min: RefProjectTagMinAggregateOutputType | null
    _max: RefProjectTagMaxAggregateOutputType | null
  }

  export type RefProjectTagMinAggregateOutputType = {
    tagCode: string | null
    label: string | null
  }

  export type RefProjectTagMaxAggregateOutputType = {
    tagCode: string | null
    label: string | null
  }

  export type RefProjectTagCountAggregateOutputType = {
    tagCode: number
    label: number
    _all: number
  }


  export type RefProjectTagMinAggregateInputType = {
    tagCode?: true
    label?: true
  }

  export type RefProjectTagMaxAggregateInputType = {
    tagCode?: true
    label?: true
  }

  export type RefProjectTagCountAggregateInputType = {
    tagCode?: true
    label?: true
    _all?: true
  }

  export type RefProjectTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefProjectTag to aggregate.
     */
    where?: RefProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefProjectTags to fetch.
     */
    orderBy?: RefProjectTagOrderByWithRelationInput | RefProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefProjectTags
    **/
    _count?: true | RefProjectTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefProjectTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefProjectTagMaxAggregateInputType
  }

  export type GetRefProjectTagAggregateType<T extends RefProjectTagAggregateArgs> = {
        [P in keyof T & keyof AggregateRefProjectTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefProjectTag[P]>
      : GetScalarType<T[P], AggregateRefProjectTag[P]>
  }




  export type RefProjectTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefProjectTagWhereInput
    orderBy?: RefProjectTagOrderByWithAggregationInput | RefProjectTagOrderByWithAggregationInput[]
    by: RefProjectTagScalarFieldEnum[] | RefProjectTagScalarFieldEnum
    having?: RefProjectTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefProjectTagCountAggregateInputType | true
    _min?: RefProjectTagMinAggregateInputType
    _max?: RefProjectTagMaxAggregateInputType
  }

  export type RefProjectTagGroupByOutputType = {
    tagCode: string
    label: string
    _count: RefProjectTagCountAggregateOutputType | null
    _min: RefProjectTagMinAggregateOutputType | null
    _max: RefProjectTagMaxAggregateOutputType | null
  }

  type GetRefProjectTagGroupByPayload<T extends RefProjectTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefProjectTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefProjectTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefProjectTagGroupByOutputType[P]>
            : GetScalarType<T[P], RefProjectTagGroupByOutputType[P]>
        }
      >
    >


  export type RefProjectTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagCode?: boolean
    label?: boolean
    tags?: boolean | RefProjectTag$tagsArgs<ExtArgs>
    _count?: boolean | RefProjectTagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refProjectTag"]>

  export type RefProjectTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagCode?: boolean
    label?: boolean
  }, ExtArgs["result"]["refProjectTag"]>

  export type RefProjectTagSelectScalar = {
    tagCode?: boolean
    label?: boolean
  }

  export type RefProjectTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | RefProjectTag$tagsArgs<ExtArgs>
    _count?: boolean | RefProjectTagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RefProjectTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RefProjectTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefProjectTag"
    objects: {
      tags: Prisma.$ProjectTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      tagCode: string
      label: string
    }, ExtArgs["result"]["refProjectTag"]>
    composites: {}
  }

  type RefProjectTagGetPayload<S extends boolean | null | undefined | RefProjectTagDefaultArgs> = $Result.GetResult<Prisma.$RefProjectTagPayload, S>

  type RefProjectTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefProjectTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefProjectTagCountAggregateInputType | true
    }

  export interface RefProjectTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefProjectTag'], meta: { name: 'RefProjectTag' } }
    /**
     * Find zero or one RefProjectTag that matches the filter.
     * @param {RefProjectTagFindUniqueArgs} args - Arguments to find a RefProjectTag
     * @example
     * // Get one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefProjectTagFindUniqueArgs>(args: SelectSubset<T, RefProjectTagFindUniqueArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefProjectTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefProjectTagFindUniqueOrThrowArgs} args - Arguments to find a RefProjectTag
     * @example
     * // Get one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefProjectTagFindUniqueOrThrowArgs>(args: SelectSubset<T, RefProjectTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefProjectTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagFindFirstArgs} args - Arguments to find a RefProjectTag
     * @example
     * // Get one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefProjectTagFindFirstArgs>(args?: SelectSubset<T, RefProjectTagFindFirstArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefProjectTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagFindFirstOrThrowArgs} args - Arguments to find a RefProjectTag
     * @example
     * // Get one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefProjectTagFindFirstOrThrowArgs>(args?: SelectSubset<T, RefProjectTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefProjectTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefProjectTags
     * const refProjectTags = await prisma.refProjectTag.findMany()
     * 
     * // Get first 10 RefProjectTags
     * const refProjectTags = await prisma.refProjectTag.findMany({ take: 10 })
     * 
     * // Only select the `tagCode`
     * const refProjectTagWithTagCodeOnly = await prisma.refProjectTag.findMany({ select: { tagCode: true } })
     * 
     */
    findMany<T extends RefProjectTagFindManyArgs>(args?: SelectSubset<T, RefProjectTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefProjectTag.
     * @param {RefProjectTagCreateArgs} args - Arguments to create a RefProjectTag.
     * @example
     * // Create one RefProjectTag
     * const RefProjectTag = await prisma.refProjectTag.create({
     *   data: {
     *     // ... data to create a RefProjectTag
     *   }
     * })
     * 
     */
    create<T extends RefProjectTagCreateArgs>(args: SelectSubset<T, RefProjectTagCreateArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefProjectTags.
     * @param {RefProjectTagCreateManyArgs} args - Arguments to create many RefProjectTags.
     * @example
     * // Create many RefProjectTags
     * const refProjectTag = await prisma.refProjectTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefProjectTagCreateManyArgs>(args?: SelectSubset<T, RefProjectTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefProjectTags and returns the data saved in the database.
     * @param {RefProjectTagCreateManyAndReturnArgs} args - Arguments to create many RefProjectTags.
     * @example
     * // Create many RefProjectTags
     * const refProjectTag = await prisma.refProjectTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefProjectTags and only return the `tagCode`
     * const refProjectTagWithTagCodeOnly = await prisma.refProjectTag.createManyAndReturn({ 
     *   select: { tagCode: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefProjectTagCreateManyAndReturnArgs>(args?: SelectSubset<T, RefProjectTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefProjectTag.
     * @param {RefProjectTagDeleteArgs} args - Arguments to delete one RefProjectTag.
     * @example
     * // Delete one RefProjectTag
     * const RefProjectTag = await prisma.refProjectTag.delete({
     *   where: {
     *     // ... filter to delete one RefProjectTag
     *   }
     * })
     * 
     */
    delete<T extends RefProjectTagDeleteArgs>(args: SelectSubset<T, RefProjectTagDeleteArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefProjectTag.
     * @param {RefProjectTagUpdateArgs} args - Arguments to update one RefProjectTag.
     * @example
     * // Update one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefProjectTagUpdateArgs>(args: SelectSubset<T, RefProjectTagUpdateArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefProjectTags.
     * @param {RefProjectTagDeleteManyArgs} args - Arguments to filter RefProjectTags to delete.
     * @example
     * // Delete a few RefProjectTags
     * const { count } = await prisma.refProjectTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefProjectTagDeleteManyArgs>(args?: SelectSubset<T, RefProjectTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefProjectTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefProjectTags
     * const refProjectTag = await prisma.refProjectTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefProjectTagUpdateManyArgs>(args: SelectSubset<T, RefProjectTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefProjectTag.
     * @param {RefProjectTagUpsertArgs} args - Arguments to update or create a RefProjectTag.
     * @example
     * // Update or create a RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.upsert({
     *   create: {
     *     // ... data to create a RefProjectTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefProjectTag we want to update
     *   }
     * })
     */
    upsert<T extends RefProjectTagUpsertArgs>(args: SelectSubset<T, RefProjectTagUpsertArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefProjectTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagCountArgs} args - Arguments to filter RefProjectTags to count.
     * @example
     * // Count the number of RefProjectTags
     * const count = await prisma.refProjectTag.count({
     *   where: {
     *     // ... the filter for the RefProjectTags we want to count
     *   }
     * })
    **/
    count<T extends RefProjectTagCountArgs>(
      args?: Subset<T, RefProjectTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefProjectTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefProjectTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefProjectTagAggregateArgs>(args: Subset<T, RefProjectTagAggregateArgs>): Prisma.PrismaPromise<GetRefProjectTagAggregateType<T>>

    /**
     * Group by RefProjectTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefProjectTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefProjectTagGroupByArgs['orderBy'] }
        : { orderBy?: RefProjectTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefProjectTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefProjectTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefProjectTag model
   */
  readonly fields: RefProjectTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefProjectTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefProjectTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tags<T extends RefProjectTag$tagsArgs<ExtArgs> = {}>(args?: Subset<T, RefProjectTag$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefProjectTag model
   */ 
  interface RefProjectTagFieldRefs {
    readonly tagCode: FieldRef<"RefProjectTag", 'String'>
    readonly label: FieldRef<"RefProjectTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RefProjectTag findUnique
   */
  export type RefProjectTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTag to fetch.
     */
    where: RefProjectTagWhereUniqueInput
  }

  /**
   * RefProjectTag findUniqueOrThrow
   */
  export type RefProjectTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTag to fetch.
     */
    where: RefProjectTagWhereUniqueInput
  }

  /**
   * RefProjectTag findFirst
   */
  export type RefProjectTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTag to fetch.
     */
    where?: RefProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefProjectTags to fetch.
     */
    orderBy?: RefProjectTagOrderByWithRelationInput | RefProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefProjectTags.
     */
    cursor?: RefProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefProjectTags.
     */
    distinct?: RefProjectTagScalarFieldEnum | RefProjectTagScalarFieldEnum[]
  }

  /**
   * RefProjectTag findFirstOrThrow
   */
  export type RefProjectTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTag to fetch.
     */
    where?: RefProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefProjectTags to fetch.
     */
    orderBy?: RefProjectTagOrderByWithRelationInput | RefProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefProjectTags.
     */
    cursor?: RefProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefProjectTags.
     */
    distinct?: RefProjectTagScalarFieldEnum | RefProjectTagScalarFieldEnum[]
  }

  /**
   * RefProjectTag findMany
   */
  export type RefProjectTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTags to fetch.
     */
    where?: RefProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefProjectTags to fetch.
     */
    orderBy?: RefProjectTagOrderByWithRelationInput | RefProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefProjectTags.
     */
    cursor?: RefProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefProjectTags.
     */
    skip?: number
    distinct?: RefProjectTagScalarFieldEnum | RefProjectTagScalarFieldEnum[]
  }

  /**
   * RefProjectTag create
   */
  export type RefProjectTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * The data needed to create a RefProjectTag.
     */
    data: XOR<RefProjectTagCreateInput, RefProjectTagUncheckedCreateInput>
  }

  /**
   * RefProjectTag createMany
   */
  export type RefProjectTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefProjectTags.
     */
    data: RefProjectTagCreateManyInput | RefProjectTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefProjectTag createManyAndReturn
   */
  export type RefProjectTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefProjectTags.
     */
    data: RefProjectTagCreateManyInput | RefProjectTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefProjectTag update
   */
  export type RefProjectTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * The data needed to update a RefProjectTag.
     */
    data: XOR<RefProjectTagUpdateInput, RefProjectTagUncheckedUpdateInput>
    /**
     * Choose, which RefProjectTag to update.
     */
    where: RefProjectTagWhereUniqueInput
  }

  /**
   * RefProjectTag updateMany
   */
  export type RefProjectTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefProjectTags.
     */
    data: XOR<RefProjectTagUpdateManyMutationInput, RefProjectTagUncheckedUpdateManyInput>
    /**
     * Filter which RefProjectTags to update
     */
    where?: RefProjectTagWhereInput
  }

  /**
   * RefProjectTag upsert
   */
  export type RefProjectTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * The filter to search for the RefProjectTag to update in case it exists.
     */
    where: RefProjectTagWhereUniqueInput
    /**
     * In case the RefProjectTag found by the `where` argument doesn't exist, create a new RefProjectTag with this data.
     */
    create: XOR<RefProjectTagCreateInput, RefProjectTagUncheckedCreateInput>
    /**
     * In case the RefProjectTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefProjectTagUpdateInput, RefProjectTagUncheckedUpdateInput>
  }

  /**
   * RefProjectTag delete
   */
  export type RefProjectTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter which RefProjectTag to delete.
     */
    where: RefProjectTagWhereUniqueInput
  }

  /**
   * RefProjectTag deleteMany
   */
  export type RefProjectTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefProjectTags to delete
     */
    where?: RefProjectTagWhereInput
  }

  /**
   * RefProjectTag.tags
   */
  export type RefProjectTag$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    where?: ProjectTagWhereInput
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    cursor?: ProjectTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * RefProjectTag without action
   */
  export type RefProjectTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
  }


  /**
   * Model ProjectTag
   */

  export type AggregateProjectTag = {
    _count: ProjectTagCountAggregateOutputType | null
    _min: ProjectTagMinAggregateOutputType | null
    _max: ProjectTagMaxAggregateOutputType | null
  }

  export type ProjectTagMinAggregateOutputType = {
    projectId: string | null
    tagCode: string | null
  }

  export type ProjectTagMaxAggregateOutputType = {
    projectId: string | null
    tagCode: string | null
  }

  export type ProjectTagCountAggregateOutputType = {
    projectId: number
    tagCode: number
    _all: number
  }


  export type ProjectTagMinAggregateInputType = {
    projectId?: true
    tagCode?: true
  }

  export type ProjectTagMaxAggregateInputType = {
    projectId?: true
    tagCode?: true
  }

  export type ProjectTagCountAggregateInputType = {
    projectId?: true
    tagCode?: true
    _all?: true
  }

  export type ProjectTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectTag to aggregate.
     */
    where?: ProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTags to fetch.
     */
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectTags
    **/
    _count?: true | ProjectTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectTagMaxAggregateInputType
  }

  export type GetProjectTagAggregateType<T extends ProjectTagAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectTag[P]>
      : GetScalarType<T[P], AggregateProjectTag[P]>
  }




  export type ProjectTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectTagWhereInput
    orderBy?: ProjectTagOrderByWithAggregationInput | ProjectTagOrderByWithAggregationInput[]
    by: ProjectTagScalarFieldEnum[] | ProjectTagScalarFieldEnum
    having?: ProjectTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectTagCountAggregateInputType | true
    _min?: ProjectTagMinAggregateInputType
    _max?: ProjectTagMaxAggregateInputType
  }

  export type ProjectTagGroupByOutputType = {
    projectId: string
    tagCode: string
    _count: ProjectTagCountAggregateOutputType | null
    _min: ProjectTagMinAggregateOutputType | null
    _max: ProjectTagMaxAggregateOutputType | null
  }

  type GetProjectTagGroupByPayload<T extends ProjectTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectTagGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectTagGroupByOutputType[P]>
        }
      >
    >


  export type ProjectTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    tagCode?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tag?: boolean | RefProjectTagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectTag"]>

  export type ProjectTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    tagCode?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tag?: boolean | RefProjectTagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectTag"]>

  export type ProjectTagSelectScalar = {
    projectId?: boolean
    tagCode?: boolean
  }

  export type ProjectTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tag?: boolean | RefProjectTagDefaultArgs<ExtArgs>
  }
  export type ProjectTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tag?: boolean | RefProjectTagDefaultArgs<ExtArgs>
  }

  export type $ProjectTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectTag"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      tag: Prisma.$RefProjectTagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      projectId: string
      tagCode: string
    }, ExtArgs["result"]["projectTag"]>
    composites: {}
  }

  type ProjectTagGetPayload<S extends boolean | null | undefined | ProjectTagDefaultArgs> = $Result.GetResult<Prisma.$ProjectTagPayload, S>

  type ProjectTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectTagCountAggregateInputType | true
    }

  export interface ProjectTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectTag'], meta: { name: 'ProjectTag' } }
    /**
     * Find zero or one ProjectTag that matches the filter.
     * @param {ProjectTagFindUniqueArgs} args - Arguments to find a ProjectTag
     * @example
     * // Get one ProjectTag
     * const projectTag = await prisma.projectTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectTagFindUniqueArgs>(args: SelectSubset<T, ProjectTagFindUniqueArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectTagFindUniqueOrThrowArgs} args - Arguments to find a ProjectTag
     * @example
     * // Get one ProjectTag
     * const projectTag = await prisma.projectTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectTagFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagFindFirstArgs} args - Arguments to find a ProjectTag
     * @example
     * // Get one ProjectTag
     * const projectTag = await prisma.projectTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectTagFindFirstArgs>(args?: SelectSubset<T, ProjectTagFindFirstArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagFindFirstOrThrowArgs} args - Arguments to find a ProjectTag
     * @example
     * // Get one ProjectTag
     * const projectTag = await prisma.projectTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectTagFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectTags
     * const projectTags = await prisma.projectTag.findMany()
     * 
     * // Get first 10 ProjectTags
     * const projectTags = await prisma.projectTag.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const projectTagWithProjectIdOnly = await prisma.projectTag.findMany({ select: { projectId: true } })
     * 
     */
    findMany<T extends ProjectTagFindManyArgs>(args?: SelectSubset<T, ProjectTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectTag.
     * @param {ProjectTagCreateArgs} args - Arguments to create a ProjectTag.
     * @example
     * // Create one ProjectTag
     * const ProjectTag = await prisma.projectTag.create({
     *   data: {
     *     // ... data to create a ProjectTag
     *   }
     * })
     * 
     */
    create<T extends ProjectTagCreateArgs>(args: SelectSubset<T, ProjectTagCreateArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectTags.
     * @param {ProjectTagCreateManyArgs} args - Arguments to create many ProjectTags.
     * @example
     * // Create many ProjectTags
     * const projectTag = await prisma.projectTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectTagCreateManyArgs>(args?: SelectSubset<T, ProjectTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectTags and returns the data saved in the database.
     * @param {ProjectTagCreateManyAndReturnArgs} args - Arguments to create many ProjectTags.
     * @example
     * // Create many ProjectTags
     * const projectTag = await prisma.projectTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectTags and only return the `projectId`
     * const projectTagWithProjectIdOnly = await prisma.projectTag.createManyAndReturn({ 
     *   select: { projectId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectTagCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectTag.
     * @param {ProjectTagDeleteArgs} args - Arguments to delete one ProjectTag.
     * @example
     * // Delete one ProjectTag
     * const ProjectTag = await prisma.projectTag.delete({
     *   where: {
     *     // ... filter to delete one ProjectTag
     *   }
     * })
     * 
     */
    delete<T extends ProjectTagDeleteArgs>(args: SelectSubset<T, ProjectTagDeleteArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectTag.
     * @param {ProjectTagUpdateArgs} args - Arguments to update one ProjectTag.
     * @example
     * // Update one ProjectTag
     * const projectTag = await prisma.projectTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectTagUpdateArgs>(args: SelectSubset<T, ProjectTagUpdateArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectTags.
     * @param {ProjectTagDeleteManyArgs} args - Arguments to filter ProjectTags to delete.
     * @example
     * // Delete a few ProjectTags
     * const { count } = await prisma.projectTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectTagDeleteManyArgs>(args?: SelectSubset<T, ProjectTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectTags
     * const projectTag = await prisma.projectTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectTagUpdateManyArgs>(args: SelectSubset<T, ProjectTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectTag.
     * @param {ProjectTagUpsertArgs} args - Arguments to update or create a ProjectTag.
     * @example
     * // Update or create a ProjectTag
     * const projectTag = await prisma.projectTag.upsert({
     *   create: {
     *     // ... data to create a ProjectTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectTag we want to update
     *   }
     * })
     */
    upsert<T extends ProjectTagUpsertArgs>(args: SelectSubset<T, ProjectTagUpsertArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagCountArgs} args - Arguments to filter ProjectTags to count.
     * @example
     * // Count the number of ProjectTags
     * const count = await prisma.projectTag.count({
     *   where: {
     *     // ... the filter for the ProjectTags we want to count
     *   }
     * })
    **/
    count<T extends ProjectTagCountArgs>(
      args?: Subset<T, ProjectTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectTagAggregateArgs>(args: Subset<T, ProjectTagAggregateArgs>): Prisma.PrismaPromise<GetProjectTagAggregateType<T>>

    /**
     * Group by ProjectTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectTagGroupByArgs['orderBy'] }
        : { orderBy?: ProjectTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectTag model
   */
  readonly fields: ProjectTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends RefProjectTagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RefProjectTagDefaultArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectTag model
   */ 
  interface ProjectTagFieldRefs {
    readonly projectId: FieldRef<"ProjectTag", 'String'>
    readonly tagCode: FieldRef<"ProjectTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectTag findUnique
   */
  export type ProjectTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTag to fetch.
     */
    where: ProjectTagWhereUniqueInput
  }

  /**
   * ProjectTag findUniqueOrThrow
   */
  export type ProjectTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTag to fetch.
     */
    where: ProjectTagWhereUniqueInput
  }

  /**
   * ProjectTag findFirst
   */
  export type ProjectTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTag to fetch.
     */
    where?: ProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTags to fetch.
     */
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectTags.
     */
    cursor?: ProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectTags.
     */
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * ProjectTag findFirstOrThrow
   */
  export type ProjectTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTag to fetch.
     */
    where?: ProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTags to fetch.
     */
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectTags.
     */
    cursor?: ProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectTags.
     */
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * ProjectTag findMany
   */
  export type ProjectTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTags to fetch.
     */
    where?: ProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTags to fetch.
     */
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectTags.
     */
    cursor?: ProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTags.
     */
    skip?: number
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * ProjectTag create
   */
  export type ProjectTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectTag.
     */
    data: XOR<ProjectTagCreateInput, ProjectTagUncheckedCreateInput>
  }

  /**
   * ProjectTag createMany
   */
  export type ProjectTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectTags.
     */
    data: ProjectTagCreateManyInput | ProjectTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectTag createManyAndReturn
   */
  export type ProjectTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectTags.
     */
    data: ProjectTagCreateManyInput | ProjectTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectTag update
   */
  export type ProjectTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectTag.
     */
    data: XOR<ProjectTagUpdateInput, ProjectTagUncheckedUpdateInput>
    /**
     * Choose, which ProjectTag to update.
     */
    where: ProjectTagWhereUniqueInput
  }

  /**
   * ProjectTag updateMany
   */
  export type ProjectTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectTags.
     */
    data: XOR<ProjectTagUpdateManyMutationInput, ProjectTagUncheckedUpdateManyInput>
    /**
     * Filter which ProjectTags to update
     */
    where?: ProjectTagWhereInput
  }

  /**
   * ProjectTag upsert
   */
  export type ProjectTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectTag to update in case it exists.
     */
    where: ProjectTagWhereUniqueInput
    /**
     * In case the ProjectTag found by the `where` argument doesn't exist, create a new ProjectTag with this data.
     */
    create: XOR<ProjectTagCreateInput, ProjectTagUncheckedCreateInput>
    /**
     * In case the ProjectTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectTagUpdateInput, ProjectTagUncheckedUpdateInput>
  }

  /**
   * ProjectTag delete
   */
  export type ProjectTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter which ProjectTag to delete.
     */
    where: ProjectTagWhereUniqueInput
  }

  /**
   * ProjectTag deleteMany
   */
  export type ProjectTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectTags to delete
     */
    where?: ProjectTagWhereInput
  }

  /**
   * ProjectTag without action
   */
  export type ProjectTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
  }


  /**
   * Model UserProject
   */

  export type AggregateUserProject = {
    _count: UserProjectCountAggregateOutputType | null
    _min: UserProjectMinAggregateOutputType | null
    _max: UserProjectMaxAggregateOutputType | null
  }

  export type UserProjectMinAggregateOutputType = {
    userId: string | null
    projectId: string | null
    createdAt: Date | null
  }

  export type UserProjectMaxAggregateOutputType = {
    userId: string | null
    projectId: string | null
    createdAt: Date | null
  }

  export type UserProjectCountAggregateOutputType = {
    userId: number
    projectId: number
    createdAt: number
    _all: number
  }


  export type UserProjectMinAggregateInputType = {
    userId?: true
    projectId?: true
    createdAt?: true
  }

  export type UserProjectMaxAggregateInputType = {
    userId?: true
    projectId?: true
    createdAt?: true
  }

  export type UserProjectCountAggregateInputType = {
    userId?: true
    projectId?: true
    createdAt?: true
    _all?: true
  }

  export type UserProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProject to aggregate.
     */
    where?: UserProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProjects
    **/
    _count?: true | UserProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProjectMaxAggregateInputType
  }

  export type GetUserProjectAggregateType<T extends UserProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProject[P]>
      : GetScalarType<T[P], AggregateUserProject[P]>
  }




  export type UserProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectWhereInput
    orderBy?: UserProjectOrderByWithAggregationInput | UserProjectOrderByWithAggregationInput[]
    by: UserProjectScalarFieldEnum[] | UserProjectScalarFieldEnum
    having?: UserProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProjectCountAggregateInputType | true
    _min?: UserProjectMinAggregateInputType
    _max?: UserProjectMaxAggregateInputType
  }

  export type UserProjectGroupByOutputType = {
    userId: string
    projectId: string
    createdAt: Date
    _count: UserProjectCountAggregateOutputType | null
    _min: UserProjectMinAggregateOutputType | null
    _max: UserProjectMaxAggregateOutputType | null
  }

  type GetUserProjectGroupByPayload<T extends UserProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProjectGroupByOutputType[P]>
            : GetScalarType<T[P], UserProjectGroupByOutputType[P]>
        }
      >
    >


  export type UserProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    projectId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProject"]>

  export type UserProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    projectId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProject"]>

  export type UserProjectSelectScalar = {
    userId?: boolean
    projectId?: boolean
    createdAt?: boolean
  }

  export type UserProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type UserProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $UserProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProject"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      projectId: string
      createdAt: Date
    }, ExtArgs["result"]["userProject"]>
    composites: {}
  }

  type UserProjectGetPayload<S extends boolean | null | undefined | UserProjectDefaultArgs> = $Result.GetResult<Prisma.$UserProjectPayload, S>

  type UserProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserProjectCountAggregateInputType | true
    }

  export interface UserProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProject'], meta: { name: 'UserProject' } }
    /**
     * Find zero or one UserProject that matches the filter.
     * @param {UserProjectFindUniqueArgs} args - Arguments to find a UserProject
     * @example
     * // Get one UserProject
     * const userProject = await prisma.userProject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProjectFindUniqueArgs>(args: SelectSubset<T, UserProjectFindUniqueArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserProject that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserProjectFindUniqueOrThrowArgs} args - Arguments to find a UserProject
     * @example
     * // Get one UserProject
     * const userProject = await prisma.userProject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserProject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectFindFirstArgs} args - Arguments to find a UserProject
     * @example
     * // Get one UserProject
     * const userProject = await prisma.userProject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProjectFindFirstArgs>(args?: SelectSubset<T, UserProjectFindFirstArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserProject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectFindFirstOrThrowArgs} args - Arguments to find a UserProject
     * @example
     * // Get one UserProject
     * const userProject = await prisma.userProject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserProjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProjects
     * const userProjects = await prisma.userProject.findMany()
     * 
     * // Get first 10 UserProjects
     * const userProjects = await prisma.userProject.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userProjectWithUserIdOnly = await prisma.userProject.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserProjectFindManyArgs>(args?: SelectSubset<T, UserProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserProject.
     * @param {UserProjectCreateArgs} args - Arguments to create a UserProject.
     * @example
     * // Create one UserProject
     * const UserProject = await prisma.userProject.create({
     *   data: {
     *     // ... data to create a UserProject
     *   }
     * })
     * 
     */
    create<T extends UserProjectCreateArgs>(args: SelectSubset<T, UserProjectCreateArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserProjects.
     * @param {UserProjectCreateManyArgs} args - Arguments to create many UserProjects.
     * @example
     * // Create many UserProjects
     * const userProject = await prisma.userProject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProjectCreateManyArgs>(args?: SelectSubset<T, UserProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProjects and returns the data saved in the database.
     * @param {UserProjectCreateManyAndReturnArgs} args - Arguments to create many UserProjects.
     * @example
     * // Create many UserProjects
     * const userProject = await prisma.userProject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProjects and only return the `userId`
     * const userProjectWithUserIdOnly = await prisma.userProject.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserProject.
     * @param {UserProjectDeleteArgs} args - Arguments to delete one UserProject.
     * @example
     * // Delete one UserProject
     * const UserProject = await prisma.userProject.delete({
     *   where: {
     *     // ... filter to delete one UserProject
     *   }
     * })
     * 
     */
    delete<T extends UserProjectDeleteArgs>(args: SelectSubset<T, UserProjectDeleteArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserProject.
     * @param {UserProjectUpdateArgs} args - Arguments to update one UserProject.
     * @example
     * // Update one UserProject
     * const userProject = await prisma.userProject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProjectUpdateArgs>(args: SelectSubset<T, UserProjectUpdateArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserProjects.
     * @param {UserProjectDeleteManyArgs} args - Arguments to filter UserProjects to delete.
     * @example
     * // Delete a few UserProjects
     * const { count } = await prisma.userProject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProjectDeleteManyArgs>(args?: SelectSubset<T, UserProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProjects
     * const userProject = await prisma.userProject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProjectUpdateManyArgs>(args: SelectSubset<T, UserProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProject.
     * @param {UserProjectUpsertArgs} args - Arguments to update or create a UserProject.
     * @example
     * // Update or create a UserProject
     * const userProject = await prisma.userProject.upsert({
     *   create: {
     *     // ... data to create a UserProject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProject we want to update
     *   }
     * })
     */
    upsert<T extends UserProjectUpsertArgs>(args: SelectSubset<T, UserProjectUpsertArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectCountArgs} args - Arguments to filter UserProjects to count.
     * @example
     * // Count the number of UserProjects
     * const count = await prisma.userProject.count({
     *   where: {
     *     // ... the filter for the UserProjects we want to count
     *   }
     * })
    **/
    count<T extends UserProjectCountArgs>(
      args?: Subset<T, UserProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProjectAggregateArgs>(args: Subset<T, UserProjectAggregateArgs>): Prisma.PrismaPromise<GetUserProjectAggregateType<T>>

    /**
     * Group by UserProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProjectGroupByArgs['orderBy'] }
        : { orderBy?: UserProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProject model
   */
  readonly fields: UserProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProject model
   */ 
  interface UserProjectFieldRefs {
    readonly userId: FieldRef<"UserProject", 'String'>
    readonly projectId: FieldRef<"UserProject", 'String'>
    readonly createdAt: FieldRef<"UserProject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProject findUnique
   */
  export type UserProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProject to fetch.
     */
    where: UserProjectWhereUniqueInput
  }

  /**
   * UserProject findUniqueOrThrow
   */
  export type UserProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProject to fetch.
     */
    where: UserProjectWhereUniqueInput
  }

  /**
   * UserProject findFirst
   */
  export type UserProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProject to fetch.
     */
    where?: UserProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProjects.
     */
    cursor?: UserProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProjects.
     */
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * UserProject findFirstOrThrow
   */
  export type UserProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProject to fetch.
     */
    where?: UserProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProjects.
     */
    cursor?: UserProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProjects.
     */
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * UserProject findMany
   */
  export type UserProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProjects to fetch.
     */
    where?: UserProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProjects.
     */
    cursor?: UserProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * UserProject create
   */
  export type UserProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProject.
     */
    data: XOR<UserProjectCreateInput, UserProjectUncheckedCreateInput>
  }

  /**
   * UserProject createMany
   */
  export type UserProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProjects.
     */
    data: UserProjectCreateManyInput | UserProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProject createManyAndReturn
   */
  export type UserProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserProjects.
     */
    data: UserProjectCreateManyInput | UserProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProject update
   */
  export type UserProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProject.
     */
    data: XOR<UserProjectUpdateInput, UserProjectUncheckedUpdateInput>
    /**
     * Choose, which UserProject to update.
     */
    where: UserProjectWhereUniqueInput
  }

  /**
   * UserProject updateMany
   */
  export type UserProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProjects.
     */
    data: XOR<UserProjectUpdateManyMutationInput, UserProjectUncheckedUpdateManyInput>
    /**
     * Filter which UserProjects to update
     */
    where?: UserProjectWhereInput
  }

  /**
   * UserProject upsert
   */
  export type UserProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProject to update in case it exists.
     */
    where: UserProjectWhereUniqueInput
    /**
     * In case the UserProject found by the `where` argument doesn't exist, create a new UserProject with this data.
     */
    create: XOR<UserProjectCreateInput, UserProjectUncheckedCreateInput>
    /**
     * In case the UserProject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProjectUpdateInput, UserProjectUncheckedUpdateInput>
  }

  /**
   * UserProject delete
   */
  export type UserProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter which UserProject to delete.
     */
    where: UserProjectWhereUniqueInput
  }

  /**
   * UserProject deleteMany
   */
  export type UserProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProjects to delete
     */
    where?: UserProjectWhereInput
  }

  /**
   * UserProject without action
   */
  export type UserProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
  }


  /**
   * Model UserCompany
   */

  export type AggregateUserCompany = {
    _count: UserCompanyCountAggregateOutputType | null
    _min: UserCompanyMinAggregateOutputType | null
    _max: UserCompanyMaxAggregateOutputType | null
  }

  export type UserCompanyMinAggregateOutputType = {
    userId: string | null
    companyId: string | null
    createdAt: Date | null
  }

  export type UserCompanyMaxAggregateOutputType = {
    userId: string | null
    companyId: string | null
    createdAt: Date | null
  }

  export type UserCompanyCountAggregateOutputType = {
    userId: number
    companyId: number
    createdAt: number
    _all: number
  }


  export type UserCompanyMinAggregateInputType = {
    userId?: true
    companyId?: true
    createdAt?: true
  }

  export type UserCompanyMaxAggregateInputType = {
    userId?: true
    companyId?: true
    createdAt?: true
  }

  export type UserCompanyCountAggregateInputType = {
    userId?: true
    companyId?: true
    createdAt?: true
    _all?: true
  }

  export type UserCompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCompany to aggregate.
     */
    where?: UserCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanies to fetch.
     */
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCompanies
    **/
    _count?: true | UserCompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCompanyMaxAggregateInputType
  }

  export type GetUserCompanyAggregateType<T extends UserCompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCompany[P]>
      : GetScalarType<T[P], AggregateUserCompany[P]>
  }




  export type UserCompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyWhereInput
    orderBy?: UserCompanyOrderByWithAggregationInput | UserCompanyOrderByWithAggregationInput[]
    by: UserCompanyScalarFieldEnum[] | UserCompanyScalarFieldEnum
    having?: UserCompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCompanyCountAggregateInputType | true
    _min?: UserCompanyMinAggregateInputType
    _max?: UserCompanyMaxAggregateInputType
  }

  export type UserCompanyGroupByOutputType = {
    userId: string
    companyId: string
    createdAt: Date
    _count: UserCompanyCountAggregateOutputType | null
    _min: UserCompanyMinAggregateOutputType | null
    _max: UserCompanyMaxAggregateOutputType | null
  }

  type GetUserCompanyGroupByPayload<T extends UserCompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCompanyGroupByOutputType[P]>
            : GetScalarType<T[P], UserCompanyGroupByOutputType[P]>
        }
      >
    >


  export type UserCompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    companyId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCompany"]>

  export type UserCompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    companyId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCompany"]>

  export type UserCompanySelectScalar = {
    userId?: boolean
    companyId?: boolean
    createdAt?: boolean
  }

  export type UserCompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type UserCompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $UserCompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCompany"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      companyId: string
      createdAt: Date
    }, ExtArgs["result"]["userCompany"]>
    composites: {}
  }

  type UserCompanyGetPayload<S extends boolean | null | undefined | UserCompanyDefaultArgs> = $Result.GetResult<Prisma.$UserCompanyPayload, S>

  type UserCompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserCompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCompanyCountAggregateInputType | true
    }

  export interface UserCompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCompany'], meta: { name: 'UserCompany' } }
    /**
     * Find zero or one UserCompany that matches the filter.
     * @param {UserCompanyFindUniqueArgs} args - Arguments to find a UserCompany
     * @example
     * // Get one UserCompany
     * const userCompany = await prisma.userCompany.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCompanyFindUniqueArgs>(args: SelectSubset<T, UserCompanyFindUniqueArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserCompany that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserCompanyFindUniqueOrThrowArgs} args - Arguments to find a UserCompany
     * @example
     * // Get one UserCompany
     * const userCompany = await prisma.userCompany.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserCompany that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyFindFirstArgs} args - Arguments to find a UserCompany
     * @example
     * // Get one UserCompany
     * const userCompany = await prisma.userCompany.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCompanyFindFirstArgs>(args?: SelectSubset<T, UserCompanyFindFirstArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserCompany that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyFindFirstOrThrowArgs} args - Arguments to find a UserCompany
     * @example
     * // Get one UserCompany
     * const userCompany = await prisma.userCompany.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserCompanies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCompanies
     * const userCompanies = await prisma.userCompany.findMany()
     * 
     * // Get first 10 UserCompanies
     * const userCompanies = await prisma.userCompany.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userCompanyWithUserIdOnly = await prisma.userCompany.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserCompanyFindManyArgs>(args?: SelectSubset<T, UserCompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserCompany.
     * @param {UserCompanyCreateArgs} args - Arguments to create a UserCompany.
     * @example
     * // Create one UserCompany
     * const UserCompany = await prisma.userCompany.create({
     *   data: {
     *     // ... data to create a UserCompany
     *   }
     * })
     * 
     */
    create<T extends UserCompanyCreateArgs>(args: SelectSubset<T, UserCompanyCreateArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserCompanies.
     * @param {UserCompanyCreateManyArgs} args - Arguments to create many UserCompanies.
     * @example
     * // Create many UserCompanies
     * const userCompany = await prisma.userCompany.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCompanyCreateManyArgs>(args?: SelectSubset<T, UserCompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCompanies and returns the data saved in the database.
     * @param {UserCompanyCreateManyAndReturnArgs} args - Arguments to create many UserCompanies.
     * @example
     * // Create many UserCompanies
     * const userCompany = await prisma.userCompany.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCompanies and only return the `userId`
     * const userCompanyWithUserIdOnly = await prisma.userCompany.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserCompany.
     * @param {UserCompanyDeleteArgs} args - Arguments to delete one UserCompany.
     * @example
     * // Delete one UserCompany
     * const UserCompany = await prisma.userCompany.delete({
     *   where: {
     *     // ... filter to delete one UserCompany
     *   }
     * })
     * 
     */
    delete<T extends UserCompanyDeleteArgs>(args: SelectSubset<T, UserCompanyDeleteArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserCompany.
     * @param {UserCompanyUpdateArgs} args - Arguments to update one UserCompany.
     * @example
     * // Update one UserCompany
     * const userCompany = await prisma.userCompany.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCompanyUpdateArgs>(args: SelectSubset<T, UserCompanyUpdateArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserCompanies.
     * @param {UserCompanyDeleteManyArgs} args - Arguments to filter UserCompanies to delete.
     * @example
     * // Delete a few UserCompanies
     * const { count } = await prisma.userCompany.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCompanyDeleteManyArgs>(args?: SelectSubset<T, UserCompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCompanies
     * const userCompany = await prisma.userCompany.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCompanyUpdateManyArgs>(args: SelectSubset<T, UserCompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserCompany.
     * @param {UserCompanyUpsertArgs} args - Arguments to update or create a UserCompany.
     * @example
     * // Update or create a UserCompany
     * const userCompany = await prisma.userCompany.upsert({
     *   create: {
     *     // ... data to create a UserCompany
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCompany we want to update
     *   }
     * })
     */
    upsert<T extends UserCompanyUpsertArgs>(args: SelectSubset<T, UserCompanyUpsertArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyCountArgs} args - Arguments to filter UserCompanies to count.
     * @example
     * // Count the number of UserCompanies
     * const count = await prisma.userCompany.count({
     *   where: {
     *     // ... the filter for the UserCompanies we want to count
     *   }
     * })
    **/
    count<T extends UserCompanyCountArgs>(
      args?: Subset<T, UserCompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCompany.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCompanyAggregateArgs>(args: Subset<T, UserCompanyAggregateArgs>): Prisma.PrismaPromise<GetUserCompanyAggregateType<T>>

    /**
     * Group by UserCompany.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCompanyGroupByArgs['orderBy'] }
        : { orderBy?: UserCompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCompany model
   */
  readonly fields: UserCompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCompany.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCompany model
   */ 
  interface UserCompanyFieldRefs {
    readonly userId: FieldRef<"UserCompany", 'String'>
    readonly companyId: FieldRef<"UserCompany", 'String'>
    readonly createdAt: FieldRef<"UserCompany", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCompany findUnique
   */
  export type UserCompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompany to fetch.
     */
    where: UserCompanyWhereUniqueInput
  }

  /**
   * UserCompany findUniqueOrThrow
   */
  export type UserCompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompany to fetch.
     */
    where: UserCompanyWhereUniqueInput
  }

  /**
   * UserCompany findFirst
   */
  export type UserCompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompany to fetch.
     */
    where?: UserCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanies to fetch.
     */
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCompanies.
     */
    cursor?: UserCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCompanies.
     */
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * UserCompany findFirstOrThrow
   */
  export type UserCompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompany to fetch.
     */
    where?: UserCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanies to fetch.
     */
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCompanies.
     */
    cursor?: UserCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCompanies.
     */
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * UserCompany findMany
   */
  export type UserCompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompanies to fetch.
     */
    where?: UserCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanies to fetch.
     */
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCompanies.
     */
    cursor?: UserCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanies.
     */
    skip?: number
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * UserCompany create
   */
  export type UserCompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCompany.
     */
    data: XOR<UserCompanyCreateInput, UserCompanyUncheckedCreateInput>
  }

  /**
   * UserCompany createMany
   */
  export type UserCompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCompanies.
     */
    data: UserCompanyCreateManyInput | UserCompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCompany createManyAndReturn
   */
  export type UserCompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserCompanies.
     */
    data: UserCompanyCreateManyInput | UserCompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCompany update
   */
  export type UserCompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCompany.
     */
    data: XOR<UserCompanyUpdateInput, UserCompanyUncheckedUpdateInput>
    /**
     * Choose, which UserCompany to update.
     */
    where: UserCompanyWhereUniqueInput
  }

  /**
   * UserCompany updateMany
   */
  export type UserCompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCompanies.
     */
    data: XOR<UserCompanyUpdateManyMutationInput, UserCompanyUncheckedUpdateManyInput>
    /**
     * Filter which UserCompanies to update
     */
    where?: UserCompanyWhereInput
  }

  /**
   * UserCompany upsert
   */
  export type UserCompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCompany to update in case it exists.
     */
    where: UserCompanyWhereUniqueInput
    /**
     * In case the UserCompany found by the `where` argument doesn't exist, create a new UserCompany with this data.
     */
    create: XOR<UserCompanyCreateInput, UserCompanyUncheckedCreateInput>
    /**
     * In case the UserCompany was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCompanyUpdateInput, UserCompanyUncheckedUpdateInput>
  }

  /**
   * UserCompany delete
   */
  export type UserCompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter which UserCompany to delete.
     */
    where: UserCompanyWhereUniqueInput
  }

  /**
   * UserCompany deleteMany
   */
  export type UserCompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCompanies to delete
     */
    where?: UserCompanyWhereInput
  }

  /**
   * UserCompany without action
   */
  export type UserCompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StateScalarFieldEnum: {
    stateId: 'stateId',
    code: 'code',
    name: 'name',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StateScalarFieldEnum = (typeof StateScalarFieldEnum)[keyof typeof StateScalarFieldEnum]


  export const DistrictScalarFieldEnum: {
    districtId: 'districtId',
    name: 'name',
    stateId: 'stateId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DistrictScalarFieldEnum = (typeof DistrictScalarFieldEnum)[keyof typeof DistrictScalarFieldEnum]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    code: 'code',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    countryCode: 'countryCode',
    phone: 'phone',
    email: 'email',
    preferredLanguage: 'preferredLanguage',
    profilePhoto: 'profilePhoto',
    stateId: 'stateId',
    districtId: 'districtId',
    cityTown: 'cityTown',
    pin: 'pin',
    operatingZone: 'operatingZone',
    address: 'address',
    isClient: 'isClient',
    isServiceProvider: 'isServiceProvider',
    userStatus: 'userStatus',
    passwordHash: 'passwordHash',
    isSuperAdmin: 'isSuperAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userRole: 'userRole'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    companyId: 'companyId',
    name: 'name',
    status: 'status',
    website: 'website',
    companyRole: 'companyRole',
    gstin: 'gstin',
    pan: 'pan',
    cin: 'cin',
    primaryContact: 'primaryContact',
    contactMobile: 'contactMobile',
    contactEmail: 'contactEmail',
    stateId: 'stateId',
    districtId: 'districtId',
    address: 'address',
    pin: 'pin',
    notes: 'notes',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    projectId: 'projectId',
    title: 'title',
    code: 'code',
    status: 'status',
    stage: 'stage',
    projectType: 'projectType',
    structureType: 'structureType',
    constructionType: 'constructionType',
    contractType: 'contractType',
    health: 'health',
    clientUserId: 'clientUserId',
    clientCompanyId: 'clientCompanyId',
    address: 'address',
    cityTown: 'cityTown',
    stateId: 'stateId',
    districtId: 'districtId',
    pin: 'pin',
    latitude: 'latitude',
    longitude: 'longitude',
    startDate: 'startDate',
    plannedCompletionDate: 'plannedCompletionDate',
    currency: 'currency',
    contractValue: 'contractValue',
    areaUnit: 'areaUnit',
    plotArea: 'plotArea',
    builtUpArea: 'builtUpArea',
    floors: 'floors',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const RefProjectTagScalarFieldEnum: {
    tagCode: 'tagCode',
    label: 'label'
  };

  export type RefProjectTagScalarFieldEnum = (typeof RefProjectTagScalarFieldEnum)[keyof typeof RefProjectTagScalarFieldEnum]


  export const ProjectTagScalarFieldEnum: {
    projectId: 'projectId',
    tagCode: 'tagCode'
  };

  export type ProjectTagScalarFieldEnum = (typeof ProjectTagScalarFieldEnum)[keyof typeof ProjectTagScalarFieldEnum]


  export const UserProjectScalarFieldEnum: {
    userId: 'userId',
    projectId: 'projectId',
    createdAt: 'createdAt'
  };

  export type UserProjectScalarFieldEnum = (typeof UserProjectScalarFieldEnum)[keyof typeof UserProjectScalarFieldEnum]


  export const UserCompanyScalarFieldEnum: {
    userId: 'userId',
    companyId: 'companyId',
    createdAt: 'createdAt'
  };

  export type UserCompanyScalarFieldEnum = (typeof UserCompanyScalarFieldEnum)[keyof typeof UserCompanyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'StateType'
   */
  export type EnumStateTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StateType'>
    


  /**
   * Reference to a field of type 'StateType[]'
   */
  export type ListEnumStateTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StateType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PreferredLanguage'
   */
  export type EnumPreferredLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PreferredLanguage'>
    


  /**
   * Reference to a field of type 'PreferredLanguage[]'
   */
  export type ListEnumPreferredLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PreferredLanguage[]'>
    


  /**
   * Reference to a field of type 'OperatingZone'
   */
  export type EnumOperatingZoneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OperatingZone'>
    


  /**
   * Reference to a field of type 'OperatingZone[]'
   */
  export type ListEnumOperatingZoneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OperatingZone[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'CompanyStatus'
   */
  export type EnumCompanyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyStatus'>
    


  /**
   * Reference to a field of type 'CompanyStatus[]'
   */
  export type ListEnumCompanyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyStatus[]'>
    


  /**
   * Reference to a field of type 'CompanyRole'
   */
  export type EnumCompanyRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyRole'>
    


  /**
   * Reference to a field of type 'CompanyRole[]'
   */
  export type ListEnumCompanyRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyRole[]'>
    


  /**
   * Reference to a field of type 'ProjectStatus'
   */
  export type EnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus'>
    


  /**
   * Reference to a field of type 'ProjectStatus[]'
   */
  export type ListEnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus[]'>
    


  /**
   * Reference to a field of type 'ProjectStage'
   */
  export type EnumProjectStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStage'>
    


  /**
   * Reference to a field of type 'ProjectStage[]'
   */
  export type ListEnumProjectStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStage[]'>
    


  /**
   * Reference to a field of type 'ProjectType'
   */
  export type EnumProjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectType'>
    


  /**
   * Reference to a field of type 'ProjectType[]'
   */
  export type ListEnumProjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectType[]'>
    


  /**
   * Reference to a field of type 'StructureType'
   */
  export type EnumStructureTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StructureType'>
    


  /**
   * Reference to a field of type 'StructureType[]'
   */
  export type ListEnumStructureTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StructureType[]'>
    


  /**
   * Reference to a field of type 'ConstructionType'
   */
  export type EnumConstructionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConstructionType'>
    


  /**
   * Reference to a field of type 'ConstructionType[]'
   */
  export type ListEnumConstructionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConstructionType[]'>
    


  /**
   * Reference to a field of type 'ContractType'
   */
  export type EnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType'>
    


  /**
   * Reference to a field of type 'ContractType[]'
   */
  export type ListEnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType[]'>
    


  /**
   * Reference to a field of type 'ProjectHealth'
   */
  export type EnumProjectHealthFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectHealth'>
    


  /**
   * Reference to a field of type 'ProjectHealth[]'
   */
  export type ListEnumProjectHealthFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectHealth[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'CurrencyCode'
   */
  export type EnumCurrencyCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyCode'>
    


  /**
   * Reference to a field of type 'CurrencyCode[]'
   */
  export type ListEnumCurrencyCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyCode[]'>
    


  /**
   * Reference to a field of type 'AreaUnit'
   */
  export type EnumAreaUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AreaUnit'>
    


  /**
   * Reference to a field of type 'AreaUnit[]'
   */
  export type ListEnumAreaUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AreaUnit[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StateWhereInput = {
    AND?: StateWhereInput | StateWhereInput[]
    OR?: StateWhereInput[]
    NOT?: StateWhereInput | StateWhereInput[]
    stateId?: UuidFilter<"State"> | string
    code?: StringFilter<"State"> | string
    name?: StringFilter<"State"> | string
    type?: EnumStateTypeFilter<"State"> | $Enums.StateType
    createdAt?: DateTimeFilter<"State"> | Date | string
    updatedAt?: DateTimeFilter<"State"> | Date | string
    districts?: DistrictListRelationFilter
    users?: UserListRelationFilter
    companies?: CompanyListRelationFilter
    projects?: ProjectListRelationFilter
  }

  export type StateOrderByWithRelationInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    districts?: DistrictOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    companies?: CompanyOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type StateWhereUniqueInput = Prisma.AtLeast<{
    stateId?: string
    code?: string
    name?: string
    AND?: StateWhereInput | StateWhereInput[]
    OR?: StateWhereInput[]
    NOT?: StateWhereInput | StateWhereInput[]
    type?: EnumStateTypeFilter<"State"> | $Enums.StateType
    createdAt?: DateTimeFilter<"State"> | Date | string
    updatedAt?: DateTimeFilter<"State"> | Date | string
    districts?: DistrictListRelationFilter
    users?: UserListRelationFilter
    companies?: CompanyListRelationFilter
    projects?: ProjectListRelationFilter
  }, "stateId" | "code" | "name">

  export type StateOrderByWithAggregationInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StateCountOrderByAggregateInput
    _max?: StateMaxOrderByAggregateInput
    _min?: StateMinOrderByAggregateInput
  }

  export type StateScalarWhereWithAggregatesInput = {
    AND?: StateScalarWhereWithAggregatesInput | StateScalarWhereWithAggregatesInput[]
    OR?: StateScalarWhereWithAggregatesInput[]
    NOT?: StateScalarWhereWithAggregatesInput | StateScalarWhereWithAggregatesInput[]
    stateId?: UuidWithAggregatesFilter<"State"> | string
    code?: StringWithAggregatesFilter<"State"> | string
    name?: StringWithAggregatesFilter<"State"> | string
    type?: EnumStateTypeWithAggregatesFilter<"State"> | $Enums.StateType
    createdAt?: DateTimeWithAggregatesFilter<"State"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"State"> | Date | string
  }

  export type DistrictWhereInput = {
    AND?: DistrictWhereInput | DistrictWhereInput[]
    OR?: DistrictWhereInput[]
    NOT?: DistrictWhereInput | DistrictWhereInput[]
    districtId?: UuidFilter<"District"> | string
    name?: StringFilter<"District"> | string
    stateId?: UuidFilter<"District"> | string
    createdAt?: DateTimeFilter<"District"> | Date | string
    updatedAt?: DateTimeFilter<"District"> | Date | string
    state?: XOR<StateRelationFilter, StateWhereInput>
    users?: UserListRelationFilter
    companies?: CompanyListRelationFilter
    projects?: ProjectListRelationFilter
  }

  export type DistrictOrderByWithRelationInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: StateOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    companies?: CompanyOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type DistrictWhereUniqueInput = Prisma.AtLeast<{
    districtId?: string
    stateId_name?: DistrictStateIdNameCompoundUniqueInput
    AND?: DistrictWhereInput | DistrictWhereInput[]
    OR?: DistrictWhereInput[]
    NOT?: DistrictWhereInput | DistrictWhereInput[]
    name?: StringFilter<"District"> | string
    stateId?: UuidFilter<"District"> | string
    createdAt?: DateTimeFilter<"District"> | Date | string
    updatedAt?: DateTimeFilter<"District"> | Date | string
    state?: XOR<StateRelationFilter, StateWhereInput>
    users?: UserListRelationFilter
    companies?: CompanyListRelationFilter
    projects?: ProjectListRelationFilter
  }, "districtId" | "stateId_name">

  export type DistrictOrderByWithAggregationInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DistrictCountOrderByAggregateInput
    _max?: DistrictMaxOrderByAggregateInput
    _min?: DistrictMinOrderByAggregateInput
  }

  export type DistrictScalarWhereWithAggregatesInput = {
    AND?: DistrictScalarWhereWithAggregatesInput | DistrictScalarWhereWithAggregatesInput[]
    OR?: DistrictScalarWhereWithAggregatesInput[]
    NOT?: DistrictScalarWhereWithAggregatesInput | DistrictScalarWhereWithAggregatesInput[]
    districtId?: UuidWithAggregatesFilter<"District"> | string
    name?: StringWithAggregatesFilter<"District"> | string
    stateId?: UuidWithAggregatesFilter<"District"> | string
    createdAt?: DateTimeWithAggregatesFilter<"District"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"District"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: UuidFilter<"User"> | string
    code?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    middleName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    countryCode?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    preferredLanguage?: EnumPreferredLanguageNullableFilter<"User"> | $Enums.PreferredLanguage | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    stateId?: UuidNullableFilter<"User"> | string | null
    districtId?: UuidNullableFilter<"User"> | string | null
    cityTown?: StringNullableFilter<"User"> | string | null
    pin?: StringNullableFilter<"User"> | string | null
    operatingZone?: EnumOperatingZoneNullableFilter<"User"> | $Enums.OperatingZone | null
    address?: StringNullableFilter<"User"> | string | null
    isClient?: BoolNullableFilter<"User"> | boolean | null
    isServiceProvider?: BoolNullableFilter<"User"> | boolean | null
    userStatus?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    passwordHash?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userRole?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    projectsAsClient?: ProjectListRelationFilter
    companiesOwned?: CompanyListRelationFilter
    userProjects?: UserProjectListRelationFilter
    userCompanies?: UserCompanyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    code?: SortOrderInput | SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    cityTown?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    operatingZone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isClient?: SortOrderInput | SortOrder
    isServiceProvider?: SortOrderInput | SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    isSuperAdmin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrderInput | SortOrder
    state?: StateOrderByWithRelationInput
    district?: DistrictOrderByWithRelationInput
    projectsAsClient?: ProjectOrderByRelationAggregateInput
    companiesOwned?: CompanyOrderByRelationAggregateInput
    userProjects?: UserProjectOrderByRelationAggregateInput
    userCompanies?: UserCompanyOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    code?: string
    email?: string
    countryCode_phone?: UserCountryCodePhoneCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    middleName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    countryCode?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    preferredLanguage?: EnumPreferredLanguageNullableFilter<"User"> | $Enums.PreferredLanguage | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    stateId?: UuidNullableFilter<"User"> | string | null
    districtId?: UuidNullableFilter<"User"> | string | null
    cityTown?: StringNullableFilter<"User"> | string | null
    pin?: StringNullableFilter<"User"> | string | null
    operatingZone?: EnumOperatingZoneNullableFilter<"User"> | $Enums.OperatingZone | null
    address?: StringNullableFilter<"User"> | string | null
    isClient?: BoolNullableFilter<"User"> | boolean | null
    isServiceProvider?: BoolNullableFilter<"User"> | boolean | null
    userStatus?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    passwordHash?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userRole?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    projectsAsClient?: ProjectListRelationFilter
    companiesOwned?: CompanyListRelationFilter
    userProjects?: UserProjectListRelationFilter
    userCompanies?: UserCompanyListRelationFilter
  }, "userId" | "code" | "email" | "countryCode_phone">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    code?: SortOrderInput | SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    cityTown?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    operatingZone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isClient?: SortOrderInput | SortOrder
    isServiceProvider?: SortOrderInput | SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    isSuperAdmin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"User"> | string
    code?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringWithAggregatesFilter<"User"> | string
    middleName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    countryCode?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    preferredLanguage?: EnumPreferredLanguageNullableWithAggregatesFilter<"User"> | $Enums.PreferredLanguage | null
    profilePhoto?: StringNullableWithAggregatesFilter<"User"> | string | null
    stateId?: UuidNullableWithAggregatesFilter<"User"> | string | null
    districtId?: UuidNullableWithAggregatesFilter<"User"> | string | null
    cityTown?: StringNullableWithAggregatesFilter<"User"> | string | null
    pin?: StringNullableWithAggregatesFilter<"User"> | string | null
    operatingZone?: EnumOperatingZoneNullableWithAggregatesFilter<"User"> | $Enums.OperatingZone | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    isClient?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    isServiceProvider?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    userStatus?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    isSuperAdmin?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    userRole?: EnumUserRoleNullableWithAggregatesFilter<"User"> | $Enums.UserRole | null
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    companyId?: UuidFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    status?: EnumCompanyStatusFilter<"Company"> | $Enums.CompanyStatus
    website?: StringNullableFilter<"Company"> | string | null
    companyRole?: EnumCompanyRoleNullableFilter<"Company"> | $Enums.CompanyRole | null
    gstin?: StringNullableFilter<"Company"> | string | null
    pan?: StringNullableFilter<"Company"> | string | null
    cin?: StringNullableFilter<"Company"> | string | null
    primaryContact?: StringNullableFilter<"Company"> | string | null
    contactMobile?: StringNullableFilter<"Company"> | string | null
    contactEmail?: StringNullableFilter<"Company"> | string | null
    stateId?: UuidNullableFilter<"Company"> | string | null
    districtId?: UuidNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    pin?: StringNullableFilter<"Company"> | string | null
    notes?: StringNullableFilter<"Company"> | string | null
    userId?: UuidNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    owner?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    projects?: ProjectListRelationFilter
    userCompanies?: UserCompanyListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrderInput | SortOrder
    companyRole?: SortOrderInput | SortOrder
    gstin?: SortOrderInput | SortOrder
    pan?: SortOrderInput | SortOrder
    cin?: SortOrderInput | SortOrder
    primaryContact?: SortOrderInput | SortOrder
    contactMobile?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: StateOrderByWithRelationInput
    district?: DistrictOrderByWithRelationInput
    owner?: UserOrderByWithRelationInput
    projects?: ProjectOrderByRelationAggregateInput
    userCompanies?: UserCompanyOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    companyId?: string
    gstin?: string
    pan?: string
    cin?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    status?: EnumCompanyStatusFilter<"Company"> | $Enums.CompanyStatus
    website?: StringNullableFilter<"Company"> | string | null
    companyRole?: EnumCompanyRoleNullableFilter<"Company"> | $Enums.CompanyRole | null
    primaryContact?: StringNullableFilter<"Company"> | string | null
    contactMobile?: StringNullableFilter<"Company"> | string | null
    contactEmail?: StringNullableFilter<"Company"> | string | null
    stateId?: UuidNullableFilter<"Company"> | string | null
    districtId?: UuidNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    pin?: StringNullableFilter<"Company"> | string | null
    notes?: StringNullableFilter<"Company"> | string | null
    userId?: UuidNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    owner?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    projects?: ProjectListRelationFilter
    userCompanies?: UserCompanyListRelationFilter
  }, "companyId" | "gstin" | "pan" | "cin">

  export type CompanyOrderByWithAggregationInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrderInput | SortOrder
    companyRole?: SortOrderInput | SortOrder
    gstin?: SortOrderInput | SortOrder
    pan?: SortOrderInput | SortOrder
    cin?: SortOrderInput | SortOrder
    primaryContact?: SortOrderInput | SortOrder
    contactMobile?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    companyId?: UuidWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    status?: EnumCompanyStatusWithAggregatesFilter<"Company"> | $Enums.CompanyStatus
    website?: StringNullableWithAggregatesFilter<"Company"> | string | null
    companyRole?: EnumCompanyRoleNullableWithAggregatesFilter<"Company"> | $Enums.CompanyRole | null
    gstin?: StringNullableWithAggregatesFilter<"Company"> | string | null
    pan?: StringNullableWithAggregatesFilter<"Company"> | string | null
    cin?: StringNullableWithAggregatesFilter<"Company"> | string | null
    primaryContact?: StringNullableWithAggregatesFilter<"Company"> | string | null
    contactMobile?: StringNullableWithAggregatesFilter<"Company"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"Company"> | string | null
    stateId?: UuidNullableWithAggregatesFilter<"Company"> | string | null
    districtId?: UuidNullableWithAggregatesFilter<"Company"> | string | null
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
    pin?: StringNullableWithAggregatesFilter<"Company"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Company"> | string | null
    userId?: UuidNullableWithAggregatesFilter<"Company"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    projectId?: UuidFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    code?: StringNullableFilter<"Project"> | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    stage?: EnumProjectStageNullableFilter<"Project"> | $Enums.ProjectStage | null
    projectType?: EnumProjectTypeNullableFilter<"Project"> | $Enums.ProjectType | null
    structureType?: EnumStructureTypeNullableFilter<"Project"> | $Enums.StructureType | null
    constructionType?: EnumConstructionTypeNullableFilter<"Project"> | $Enums.ConstructionType | null
    contractType?: EnumContractTypeNullableFilter<"Project"> | $Enums.ContractType | null
    health?: EnumProjectHealthFilter<"Project"> | $Enums.ProjectHealth
    clientUserId?: UuidNullableFilter<"Project"> | string | null
    clientCompanyId?: UuidNullableFilter<"Project"> | string | null
    address?: StringNullableFilter<"Project"> | string | null
    cityTown?: StringNullableFilter<"Project"> | string | null
    stateId?: UuidNullableFilter<"Project"> | string | null
    districtId?: UuidNullableFilter<"Project"> | string | null
    pin?: StringNullableFilter<"Project"> | string | null
    latitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    plannedCompletionDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Project"> | $Enums.CurrencyCode | null
    contractValue?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    areaUnit?: EnumAreaUnitNullableFilter<"Project"> | $Enums.AreaUnit | null
    plotArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    floors?: IntNullableFilter<"Project"> | number | null
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    clientUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    clientCompany?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    projectTags?: ProjectTagListRelationFilter
    userProjects?: UserProjectListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrderInput | SortOrder
    status?: SortOrder
    stage?: SortOrderInput | SortOrder
    projectType?: SortOrderInput | SortOrder
    structureType?: SortOrderInput | SortOrder
    constructionType?: SortOrderInput | SortOrder
    contractType?: SortOrderInput | SortOrder
    health?: SortOrder
    clientUserId?: SortOrderInput | SortOrder
    clientCompanyId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    cityTown?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    plannedCompletionDate?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    contractValue?: SortOrderInput | SortOrder
    areaUnit?: SortOrderInput | SortOrder
    plotArea?: SortOrderInput | SortOrder
    builtUpArea?: SortOrderInput | SortOrder
    floors?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientUser?: UserOrderByWithRelationInput
    clientCompany?: CompanyOrderByWithRelationInput
    state?: StateOrderByWithRelationInput
    district?: DistrictOrderByWithRelationInput
    projectTags?: ProjectTagOrderByRelationAggregateInput
    userProjects?: UserProjectOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    projectId?: string
    code?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    title?: StringFilter<"Project"> | string
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    stage?: EnumProjectStageNullableFilter<"Project"> | $Enums.ProjectStage | null
    projectType?: EnumProjectTypeNullableFilter<"Project"> | $Enums.ProjectType | null
    structureType?: EnumStructureTypeNullableFilter<"Project"> | $Enums.StructureType | null
    constructionType?: EnumConstructionTypeNullableFilter<"Project"> | $Enums.ConstructionType | null
    contractType?: EnumContractTypeNullableFilter<"Project"> | $Enums.ContractType | null
    health?: EnumProjectHealthFilter<"Project"> | $Enums.ProjectHealth
    clientUserId?: UuidNullableFilter<"Project"> | string | null
    clientCompanyId?: UuidNullableFilter<"Project"> | string | null
    address?: StringNullableFilter<"Project"> | string | null
    cityTown?: StringNullableFilter<"Project"> | string | null
    stateId?: UuidNullableFilter<"Project"> | string | null
    districtId?: UuidNullableFilter<"Project"> | string | null
    pin?: StringNullableFilter<"Project"> | string | null
    latitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    plannedCompletionDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Project"> | $Enums.CurrencyCode | null
    contractValue?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    areaUnit?: EnumAreaUnitNullableFilter<"Project"> | $Enums.AreaUnit | null
    plotArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    floors?: IntNullableFilter<"Project"> | number | null
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    clientUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    clientCompany?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    projectTags?: ProjectTagListRelationFilter
    userProjects?: UserProjectListRelationFilter
  }, "projectId" | "code">

  export type ProjectOrderByWithAggregationInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrderInput | SortOrder
    status?: SortOrder
    stage?: SortOrderInput | SortOrder
    projectType?: SortOrderInput | SortOrder
    structureType?: SortOrderInput | SortOrder
    constructionType?: SortOrderInput | SortOrder
    contractType?: SortOrderInput | SortOrder
    health?: SortOrder
    clientUserId?: SortOrderInput | SortOrder
    clientCompanyId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    cityTown?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    plannedCompletionDate?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    contractValue?: SortOrderInput | SortOrder
    areaUnit?: SortOrderInput | SortOrder
    plotArea?: SortOrderInput | SortOrder
    builtUpArea?: SortOrderInput | SortOrder
    floors?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    projectId?: UuidWithAggregatesFilter<"Project"> | string
    title?: StringWithAggregatesFilter<"Project"> | string
    code?: StringNullableWithAggregatesFilter<"Project"> | string | null
    status?: EnumProjectStatusWithAggregatesFilter<"Project"> | $Enums.ProjectStatus
    stage?: EnumProjectStageNullableWithAggregatesFilter<"Project"> | $Enums.ProjectStage | null
    projectType?: EnumProjectTypeNullableWithAggregatesFilter<"Project"> | $Enums.ProjectType | null
    structureType?: EnumStructureTypeNullableWithAggregatesFilter<"Project"> | $Enums.StructureType | null
    constructionType?: EnumConstructionTypeNullableWithAggregatesFilter<"Project"> | $Enums.ConstructionType | null
    contractType?: EnumContractTypeNullableWithAggregatesFilter<"Project"> | $Enums.ContractType | null
    health?: EnumProjectHealthWithAggregatesFilter<"Project"> | $Enums.ProjectHealth
    clientUserId?: UuidNullableWithAggregatesFilter<"Project"> | string | null
    clientCompanyId?: UuidNullableWithAggregatesFilter<"Project"> | string | null
    address?: StringNullableWithAggregatesFilter<"Project"> | string | null
    cityTown?: StringNullableWithAggregatesFilter<"Project"> | string | null
    stateId?: UuidNullableWithAggregatesFilter<"Project"> | string | null
    districtId?: UuidNullableWithAggregatesFilter<"Project"> | string | null
    pin?: StringNullableWithAggregatesFilter<"Project"> | string | null
    latitude?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    plannedCompletionDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    currency?: EnumCurrencyCodeNullableWithAggregatesFilter<"Project"> | $Enums.CurrencyCode | null
    contractValue?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    areaUnit?: EnumAreaUnitNullableWithAggregatesFilter<"Project"> | $Enums.AreaUnit | null
    plotArea?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    floors?: IntNullableWithAggregatesFilter<"Project"> | number | null
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type RefProjectTagWhereInput = {
    AND?: RefProjectTagWhereInput | RefProjectTagWhereInput[]
    OR?: RefProjectTagWhereInput[]
    NOT?: RefProjectTagWhereInput | RefProjectTagWhereInput[]
    tagCode?: StringFilter<"RefProjectTag"> | string
    label?: StringFilter<"RefProjectTag"> | string
    tags?: ProjectTagListRelationFilter
  }

  export type RefProjectTagOrderByWithRelationInput = {
    tagCode?: SortOrder
    label?: SortOrder
    tags?: ProjectTagOrderByRelationAggregateInput
  }

  export type RefProjectTagWhereUniqueInput = Prisma.AtLeast<{
    tagCode?: string
    AND?: RefProjectTagWhereInput | RefProjectTagWhereInput[]
    OR?: RefProjectTagWhereInput[]
    NOT?: RefProjectTagWhereInput | RefProjectTagWhereInput[]
    label?: StringFilter<"RefProjectTag"> | string
    tags?: ProjectTagListRelationFilter
  }, "tagCode">

  export type RefProjectTagOrderByWithAggregationInput = {
    tagCode?: SortOrder
    label?: SortOrder
    _count?: RefProjectTagCountOrderByAggregateInput
    _max?: RefProjectTagMaxOrderByAggregateInput
    _min?: RefProjectTagMinOrderByAggregateInput
  }

  export type RefProjectTagScalarWhereWithAggregatesInput = {
    AND?: RefProjectTagScalarWhereWithAggregatesInput | RefProjectTagScalarWhereWithAggregatesInput[]
    OR?: RefProjectTagScalarWhereWithAggregatesInput[]
    NOT?: RefProjectTagScalarWhereWithAggregatesInput | RefProjectTagScalarWhereWithAggregatesInput[]
    tagCode?: StringWithAggregatesFilter<"RefProjectTag"> | string
    label?: StringWithAggregatesFilter<"RefProjectTag"> | string
  }

  export type ProjectTagWhereInput = {
    AND?: ProjectTagWhereInput | ProjectTagWhereInput[]
    OR?: ProjectTagWhereInput[]
    NOT?: ProjectTagWhereInput | ProjectTagWhereInput[]
    projectId?: UuidFilter<"ProjectTag"> | string
    tagCode?: StringFilter<"ProjectTag"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    tag?: XOR<RefProjectTagRelationFilter, RefProjectTagWhereInput>
  }

  export type ProjectTagOrderByWithRelationInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
    project?: ProjectOrderByWithRelationInput
    tag?: RefProjectTagOrderByWithRelationInput
  }

  export type ProjectTagWhereUniqueInput = Prisma.AtLeast<{
    projectId_tagCode?: ProjectTagProjectIdTagCodeCompoundUniqueInput
    AND?: ProjectTagWhereInput | ProjectTagWhereInput[]
    OR?: ProjectTagWhereInput[]
    NOT?: ProjectTagWhereInput | ProjectTagWhereInput[]
    projectId?: UuidFilter<"ProjectTag"> | string
    tagCode?: StringFilter<"ProjectTag"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    tag?: XOR<RefProjectTagRelationFilter, RefProjectTagWhereInput>
  }, "projectId_tagCode">

  export type ProjectTagOrderByWithAggregationInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
    _count?: ProjectTagCountOrderByAggregateInput
    _max?: ProjectTagMaxOrderByAggregateInput
    _min?: ProjectTagMinOrderByAggregateInput
  }

  export type ProjectTagScalarWhereWithAggregatesInput = {
    AND?: ProjectTagScalarWhereWithAggregatesInput | ProjectTagScalarWhereWithAggregatesInput[]
    OR?: ProjectTagScalarWhereWithAggregatesInput[]
    NOT?: ProjectTagScalarWhereWithAggregatesInput | ProjectTagScalarWhereWithAggregatesInput[]
    projectId?: UuidWithAggregatesFilter<"ProjectTag"> | string
    tagCode?: StringWithAggregatesFilter<"ProjectTag"> | string
  }

  export type UserProjectWhereInput = {
    AND?: UserProjectWhereInput | UserProjectWhereInput[]
    OR?: UserProjectWhereInput[]
    NOT?: UserProjectWhereInput | UserProjectWhereInput[]
    userId?: UuidFilter<"UserProject"> | string
    projectId?: UuidFilter<"UserProject"> | string
    createdAt?: DateTimeFilter<"UserProject"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type UserProjectOrderByWithRelationInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type UserProjectWhereUniqueInput = Prisma.AtLeast<{
    userId_projectId?: UserProjectUserIdProjectIdCompoundUniqueInput
    AND?: UserProjectWhereInput | UserProjectWhereInput[]
    OR?: UserProjectWhereInput[]
    NOT?: UserProjectWhereInput | UserProjectWhereInput[]
    userId?: UuidFilter<"UserProject"> | string
    projectId?: UuidFilter<"UserProject"> | string
    createdAt?: DateTimeFilter<"UserProject"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "userId_projectId">

  export type UserProjectOrderByWithAggregationInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    _count?: UserProjectCountOrderByAggregateInput
    _max?: UserProjectMaxOrderByAggregateInput
    _min?: UserProjectMinOrderByAggregateInput
  }

  export type UserProjectScalarWhereWithAggregatesInput = {
    AND?: UserProjectScalarWhereWithAggregatesInput | UserProjectScalarWhereWithAggregatesInput[]
    OR?: UserProjectScalarWhereWithAggregatesInput[]
    NOT?: UserProjectScalarWhereWithAggregatesInput | UserProjectScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"UserProject"> | string
    projectId?: UuidWithAggregatesFilter<"UserProject"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserProject"> | Date | string
  }

  export type UserCompanyWhereInput = {
    AND?: UserCompanyWhereInput | UserCompanyWhereInput[]
    OR?: UserCompanyWhereInput[]
    NOT?: UserCompanyWhereInput | UserCompanyWhereInput[]
    userId?: UuidFilter<"UserCompany"> | string
    companyId?: UuidFilter<"UserCompany"> | string
    createdAt?: DateTimeFilter<"UserCompany"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type UserCompanyOrderByWithRelationInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
  }

  export type UserCompanyWhereUniqueInput = Prisma.AtLeast<{
    userId_companyId?: UserCompanyUserIdCompanyIdCompoundUniqueInput
    AND?: UserCompanyWhereInput | UserCompanyWhereInput[]
    OR?: UserCompanyWhereInput[]
    NOT?: UserCompanyWhereInput | UserCompanyWhereInput[]
    userId?: UuidFilter<"UserCompany"> | string
    companyId?: UuidFilter<"UserCompany"> | string
    createdAt?: DateTimeFilter<"UserCompany"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "userId_companyId">

  export type UserCompanyOrderByWithAggregationInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    _count?: UserCompanyCountOrderByAggregateInput
    _max?: UserCompanyMaxOrderByAggregateInput
    _min?: UserCompanyMinOrderByAggregateInput
  }

  export type UserCompanyScalarWhereWithAggregatesInput = {
    AND?: UserCompanyScalarWhereWithAggregatesInput | UserCompanyScalarWhereWithAggregatesInput[]
    OR?: UserCompanyScalarWhereWithAggregatesInput[]
    NOT?: UserCompanyScalarWhereWithAggregatesInput | UserCompanyScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"UserCompany"> | string
    companyId?: UuidWithAggregatesFilter<"UserCompany"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserCompany"> | Date | string
  }

  export type StateCreateInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
    companies?: CompanyCreateNestedManyWithoutStateInput
    projects?: ProjectCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
    companies?: CompanyUncheckedCreateNestedManyWithoutStateInput
    projects?: ProjectUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateUpdateInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
    companies?: CompanyUpdateManyWithoutStateNestedInput
    projects?: ProjectUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutStateNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutStateNestedInput
  }

  export type StateCreateManyInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StateUpdateManyMutationInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateUncheckedUpdateManyInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistrictCreateInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutDistrictsInput
    users?: UserCreateNestedManyWithoutDistrictInput
    companies?: CompanyCreateNestedManyWithoutDistrictInput
    projects?: ProjectCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDistrictInput
    companies?: CompanyUncheckedCreateNestedManyWithoutDistrictInput
    projects?: ProjectUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUpdateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutDistrictsNestedInput
    users?: UserUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictCreateManyInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistrictUpdateManyMutationInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistrictUncheckedUpdateManyInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
  }

  export type UserUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
  }

  export type CompanyCreateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    owner?: UserCreateNestedOneWithoutCompaniesOwnedInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    owner?: UserUpdateOneWithoutCompaniesOwnedNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefProjectTagCreateInput = {
    tagCode: string
    label: string
    tags?: ProjectTagCreateNestedManyWithoutTagInput
  }

  export type RefProjectTagUncheckedCreateInput = {
    tagCode: string
    label: string
    tags?: ProjectTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type RefProjectTagUpdateInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: ProjectTagUpdateManyWithoutTagNestedInput
  }

  export type RefProjectTagUncheckedUpdateInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: ProjectTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type RefProjectTagCreateManyInput = {
    tagCode: string
    label: string
  }

  export type RefProjectTagUpdateManyMutationInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type RefProjectTagUncheckedUpdateManyInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectTagCreateInput = {
    project: ProjectCreateNestedOneWithoutProjectTagsInput
    tag: RefProjectTagCreateNestedOneWithoutTagsInput
  }

  export type ProjectTagUncheckedCreateInput = {
    projectId: string
    tagCode: string
  }

  export type ProjectTagUpdateInput = {
    project?: ProjectUpdateOneRequiredWithoutProjectTagsNestedInput
    tag?: RefProjectTagUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ProjectTagUncheckedUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    tagCode?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectTagCreateManyInput = {
    projectId: string
    tagCode: string
  }

  export type ProjectTagUpdateManyMutationInput = {

  }

  export type ProjectTagUncheckedUpdateManyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    tagCode?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserProjectsInput
    project: ProjectCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectUncheckedCreateInput = {
    userId: string
    projectId: string
    createdAt?: Date | string
  }

  export type UserProjectUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserProjectsNestedInput
    project?: ProjectUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectCreateManyInput = {
    userId: string
    projectId: string
    createdAt?: Date | string
  }

  export type UserProjectUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserCompaniesInput
    company: CompanyCreateNestedOneWithoutUserCompaniesInput
  }

  export type UserCompanyUncheckedCreateInput = {
    userId: string
    companyId: string
    createdAt?: Date | string
  }

  export type UserCompanyUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCompaniesNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserCompaniesNestedInput
  }

  export type UserCompanyUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyCreateManyInput = {
    userId: string
    companyId: string
    createdAt?: Date | string
  }

  export type UserCompanyUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumStateTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StateType | EnumStateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStateTypeFilter<$PrismaModel> | $Enums.StateType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DistrictListRelationFilter = {
    every?: DistrictWhereInput
    some?: DistrictWhereInput
    none?: DistrictWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type DistrictOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StateCountOrderByAggregateInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateMaxOrderByAggregateInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateMinOrderByAggregateInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumStateTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StateType | EnumStateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStateTypeWithAggregatesFilter<$PrismaModel> | $Enums.StateType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStateTypeFilter<$PrismaModel>
    _max?: NestedEnumStateTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StateRelationFilter = {
    is?: StateWhereInput
    isNot?: StateWhereInput
  }

  export type DistrictStateIdNameCompoundUniqueInput = {
    stateId: string
    name: string
  }

  export type DistrictCountOrderByAggregateInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistrictMaxOrderByAggregateInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistrictMinOrderByAggregateInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumPreferredLanguageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PreferredLanguage | EnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel> | $Enums.PreferredLanguage | null
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type EnumOperatingZoneNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OperatingZone | EnumOperatingZoneFieldRefInput<$PrismaModel> | null
    in?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOperatingZoneNullableFilter<$PrismaModel> | $Enums.OperatingZone | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type EnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type StateNullableRelationFilter = {
    is?: StateWhereInput | null
    isNot?: StateWhereInput | null
  }

  export type DistrictNullableRelationFilter = {
    is?: DistrictWhereInput | null
    isNot?: DistrictWhereInput | null
  }

  export type UserProjectListRelationFilter = {
    every?: UserProjectWhereInput
    some?: UserProjectWhereInput
    none?: UserProjectWhereInput
  }

  export type UserCompanyListRelationFilter = {
    every?: UserCompanyWhereInput
    some?: UserCompanyWhereInput
    none?: UserCompanyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountryCodePhoneCompoundUniqueInput = {
    countryCode: string
    phone: string
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    preferredLanguage?: SortOrder
    profilePhoto?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    cityTown?: SortOrder
    pin?: SortOrder
    operatingZone?: SortOrder
    address?: SortOrder
    isClient?: SortOrder
    isServiceProvider?: SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrder
    isSuperAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    preferredLanguage?: SortOrder
    profilePhoto?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    cityTown?: SortOrder
    pin?: SortOrder
    operatingZone?: SortOrder
    address?: SortOrder
    isClient?: SortOrder
    isServiceProvider?: SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrder
    isSuperAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    preferredLanguage?: SortOrder
    profilePhoto?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    cityTown?: SortOrder
    pin?: SortOrder
    operatingZone?: SortOrder
    address?: SortOrder
    isClient?: SortOrder
    isServiceProvider?: SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrder
    isSuperAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumPreferredLanguageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PreferredLanguage | EnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPreferredLanguageNullableWithAggregatesFilter<$PrismaModel> | $Enums.PreferredLanguage | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel>
    _max?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumOperatingZoneNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OperatingZone | EnumOperatingZoneFieldRefInput<$PrismaModel> | null
    in?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOperatingZoneNullableWithAggregatesFilter<$PrismaModel> | $Enums.OperatingZone | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOperatingZoneNullableFilter<$PrismaModel>
    _max?: NestedEnumOperatingZoneNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type EnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type EnumCompanyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyStatus | EnumCompanyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyStatusFilter<$PrismaModel> | $Enums.CompanyStatus
  }

  export type EnumCompanyRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyRole | EnumCompanyRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompanyRoleNullableFilter<$PrismaModel> | $Enums.CompanyRole | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CompanyCountOrderByAggregateInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrder
    companyRole?: SortOrder
    gstin?: SortOrder
    pan?: SortOrder
    cin?: SortOrder
    primaryContact?: SortOrder
    contactMobile?: SortOrder
    contactEmail?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    address?: SortOrder
    pin?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrder
    companyRole?: SortOrder
    gstin?: SortOrder
    pan?: SortOrder
    cin?: SortOrder
    primaryContact?: SortOrder
    contactMobile?: SortOrder
    contactEmail?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    address?: SortOrder
    pin?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrder
    companyRole?: SortOrder
    gstin?: SortOrder
    pan?: SortOrder
    cin?: SortOrder
    primaryContact?: SortOrder
    contactMobile?: SortOrder
    contactEmail?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    address?: SortOrder
    pin?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCompanyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyStatus | EnumCompanyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyStatusWithAggregatesFilter<$PrismaModel> | $Enums.CompanyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyStatusFilter<$PrismaModel>
    _max?: NestedEnumCompanyStatusFilter<$PrismaModel>
  }

  export type EnumCompanyRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyRole | EnumCompanyRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompanyRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.CompanyRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCompanyRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumCompanyRoleNullableFilter<$PrismaModel>
  }

  export type EnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type EnumProjectStageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStage | EnumProjectStageFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectStageNullableFilter<$PrismaModel> | $Enums.ProjectStage | null
  }

  export type EnumProjectTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectTypeNullableFilter<$PrismaModel> | $Enums.ProjectType | null
  }

  export type EnumStructureTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StructureType | EnumStructureTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStructureTypeNullableFilter<$PrismaModel> | $Enums.StructureType | null
  }

  export type EnumConstructionTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ConstructionType | EnumConstructionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConstructionTypeNullableFilter<$PrismaModel> | $Enums.ConstructionType | null
  }

  export type EnumContractTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContractTypeNullableFilter<$PrismaModel> | $Enums.ContractType | null
  }

  export type EnumProjectHealthFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectHealth | EnumProjectHealthFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectHealthFilter<$PrismaModel> | $Enums.ProjectHealth
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumCurrencyCodeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel> | $Enums.CurrencyCode | null
  }

  export type EnumAreaUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AreaUnit | EnumAreaUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAreaUnitNullableFilter<$PrismaModel> | $Enums.AreaUnit | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CompanyNullableRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type ProjectTagListRelationFilter = {
    every?: ProjectTagWhereInput
    some?: ProjectTagWhereInput
    none?: ProjectTagWhereInput
  }

  export type ProjectTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrder
    status?: SortOrder
    stage?: SortOrder
    projectType?: SortOrder
    structureType?: SortOrder
    constructionType?: SortOrder
    contractType?: SortOrder
    health?: SortOrder
    clientUserId?: SortOrder
    clientCompanyId?: SortOrder
    address?: SortOrder
    cityTown?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    pin?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    startDate?: SortOrder
    plannedCompletionDate?: SortOrder
    currency?: SortOrder
    contractValue?: SortOrder
    areaUnit?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    contractValue?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrder
    status?: SortOrder
    stage?: SortOrder
    projectType?: SortOrder
    structureType?: SortOrder
    constructionType?: SortOrder
    contractType?: SortOrder
    health?: SortOrder
    clientUserId?: SortOrder
    clientCompanyId?: SortOrder
    address?: SortOrder
    cityTown?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    pin?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    startDate?: SortOrder
    plannedCompletionDate?: SortOrder
    currency?: SortOrder
    contractValue?: SortOrder
    areaUnit?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrder
    status?: SortOrder
    stage?: SortOrder
    projectType?: SortOrder
    structureType?: SortOrder
    constructionType?: SortOrder
    contractType?: SortOrder
    health?: SortOrder
    clientUserId?: SortOrder
    clientCompanyId?: SortOrder
    address?: SortOrder
    cityTown?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    pin?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    startDate?: SortOrder
    plannedCompletionDate?: SortOrder
    currency?: SortOrder
    contractValue?: SortOrder
    areaUnit?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    contractValue?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
  }

  export type EnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type EnumProjectStageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStage | EnumProjectStageFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectStageNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStage | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProjectStageNullableFilter<$PrismaModel>
    _max?: NestedEnumProjectStageNullableFilter<$PrismaModel>
  }

  export type EnumProjectTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProjectType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProjectTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumProjectTypeNullableFilter<$PrismaModel>
  }

  export type EnumStructureTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StructureType | EnumStructureTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStructureTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.StructureType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStructureTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumStructureTypeNullableFilter<$PrismaModel>
  }

  export type EnumConstructionTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConstructionType | EnumConstructionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConstructionTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ConstructionType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumConstructionTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumConstructionTypeNullableFilter<$PrismaModel>
  }

  export type EnumContractTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContractTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ContractType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumContractTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumContractTypeNullableFilter<$PrismaModel>
  }

  export type EnumProjectHealthWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectHealth | EnumProjectHealthFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectHealthWithAggregatesFilter<$PrismaModel> | $Enums.ProjectHealth
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectHealthFilter<$PrismaModel>
    _max?: NestedEnumProjectHealthFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyCode | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
    _max?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
  }

  export type EnumAreaUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AreaUnit | EnumAreaUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAreaUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.AreaUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAreaUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumAreaUnitNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type RefProjectTagCountOrderByAggregateInput = {
    tagCode?: SortOrder
    label?: SortOrder
  }

  export type RefProjectTagMaxOrderByAggregateInput = {
    tagCode?: SortOrder
    label?: SortOrder
  }

  export type RefProjectTagMinOrderByAggregateInput = {
    tagCode?: SortOrder
    label?: SortOrder
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type RefProjectTagRelationFilter = {
    is?: RefProjectTagWhereInput
    isNot?: RefProjectTagWhereInput
  }

  export type ProjectTagProjectIdTagCodeCompoundUniqueInput = {
    projectId: string
    tagCode: string
  }

  export type ProjectTagCountOrderByAggregateInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
  }

  export type ProjectTagMaxOrderByAggregateInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
  }

  export type ProjectTagMinOrderByAggregateInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserProjectUserIdProjectIdCompoundUniqueInput = {
    userId: string
    projectId: string
  }

  export type UserProjectCountOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserProjectMaxOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserProjectMinOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type UserCompanyUserIdCompanyIdCompoundUniqueInput = {
    userId: string
    companyId: string
  }

  export type UserCompanyCountOrderByAggregateInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCompanyMaxOrderByAggregateInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCompanyMinOrderByAggregateInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
  }

  export type DistrictCreateNestedManyWithoutStateInput = {
    create?: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput> | DistrictCreateWithoutStateInput[] | DistrictUncheckedCreateWithoutStateInput[]
    connectOrCreate?: DistrictCreateOrConnectWithoutStateInput | DistrictCreateOrConnectWithoutStateInput[]
    createMany?: DistrictCreateManyStateInputEnvelope
    connect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStateInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutStateInput = {
    create?: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput> | CompanyCreateWithoutStateInput[] | CompanyUncheckedCreateWithoutStateInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutStateInput | CompanyCreateOrConnectWithoutStateInput[]
    createMany?: CompanyCreateManyStateInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutStateInput = {
    create?: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput> | ProjectCreateWithoutStateInput[] | ProjectUncheckedCreateWithoutStateInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStateInput | ProjectCreateOrConnectWithoutStateInput[]
    createMany?: ProjectCreateManyStateInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type DistrictUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput> | DistrictCreateWithoutStateInput[] | DistrictUncheckedCreateWithoutStateInput[]
    connectOrCreate?: DistrictCreateOrConnectWithoutStateInput | DistrictCreateOrConnectWithoutStateInput[]
    createMany?: DistrictCreateManyStateInputEnvelope
    connect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput> | CompanyCreateWithoutStateInput[] | CompanyUncheckedCreateWithoutStateInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutStateInput | CompanyCreateOrConnectWithoutStateInput[]
    createMany?: CompanyCreateManyStateInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput> | ProjectCreateWithoutStateInput[] | ProjectUncheckedCreateWithoutStateInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStateInput | ProjectCreateOrConnectWithoutStateInput[]
    createMany?: ProjectCreateManyStateInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumStateTypeFieldUpdateOperationsInput = {
    set?: $Enums.StateType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DistrictUpdateManyWithoutStateNestedInput = {
    create?: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput> | DistrictCreateWithoutStateInput[] | DistrictUncheckedCreateWithoutStateInput[]
    connectOrCreate?: DistrictCreateOrConnectWithoutStateInput | DistrictCreateOrConnectWithoutStateInput[]
    upsert?: DistrictUpsertWithWhereUniqueWithoutStateInput | DistrictUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: DistrictCreateManyStateInputEnvelope
    set?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    disconnect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    delete?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    connect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    update?: DistrictUpdateWithWhereUniqueWithoutStateInput | DistrictUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: DistrictUpdateManyWithWhereWithoutStateInput | DistrictUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: DistrictScalarWhereInput | DistrictScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStateNestedInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStateInput | UserUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStateInput | UserUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStateInput | UserUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutStateNestedInput = {
    create?: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput> | CompanyCreateWithoutStateInput[] | CompanyUncheckedCreateWithoutStateInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutStateInput | CompanyCreateOrConnectWithoutStateInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutStateInput | CompanyUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: CompanyCreateManyStateInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutStateInput | CompanyUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutStateInput | CompanyUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutStateNestedInput = {
    create?: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput> | ProjectCreateWithoutStateInput[] | ProjectUncheckedCreateWithoutStateInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStateInput | ProjectCreateOrConnectWithoutStateInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutStateInput | ProjectUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: ProjectCreateManyStateInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutStateInput | ProjectUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutStateInput | ProjectUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type DistrictUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput> | DistrictCreateWithoutStateInput[] | DistrictUncheckedCreateWithoutStateInput[]
    connectOrCreate?: DistrictCreateOrConnectWithoutStateInput | DistrictCreateOrConnectWithoutStateInput[]
    upsert?: DistrictUpsertWithWhereUniqueWithoutStateInput | DistrictUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: DistrictCreateManyStateInputEnvelope
    set?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    disconnect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    delete?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    connect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    update?: DistrictUpdateWithWhereUniqueWithoutStateInput | DistrictUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: DistrictUpdateManyWithWhereWithoutStateInput | DistrictUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: DistrictScalarWhereInput | DistrictScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStateInput | UserUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStateInput | UserUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStateInput | UserUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput> | CompanyCreateWithoutStateInput[] | CompanyUncheckedCreateWithoutStateInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutStateInput | CompanyCreateOrConnectWithoutStateInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutStateInput | CompanyUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: CompanyCreateManyStateInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutStateInput | CompanyUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutStateInput | CompanyUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput> | ProjectCreateWithoutStateInput[] | ProjectUncheckedCreateWithoutStateInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStateInput | ProjectCreateOrConnectWithoutStateInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutStateInput | ProjectUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: ProjectCreateManyStateInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutStateInput | ProjectUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutStateInput | ProjectUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type StateCreateNestedOneWithoutDistrictsInput = {
    create?: XOR<StateCreateWithoutDistrictsInput, StateUncheckedCreateWithoutDistrictsInput>
    connectOrCreate?: StateCreateOrConnectWithoutDistrictsInput
    connect?: StateWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutDistrictInput = {
    create?: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput> | UserCreateWithoutDistrictInput[] | UserUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDistrictInput | UserCreateOrConnectWithoutDistrictInput[]
    createMany?: UserCreateManyDistrictInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutDistrictInput = {
    create?: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput> | CompanyCreateWithoutDistrictInput[] | CompanyUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutDistrictInput | CompanyCreateOrConnectWithoutDistrictInput[]
    createMany?: CompanyCreateManyDistrictInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutDistrictInput = {
    create?: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput> | ProjectCreateWithoutDistrictInput[] | ProjectUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutDistrictInput | ProjectCreateOrConnectWithoutDistrictInput[]
    createMany?: ProjectCreateManyDistrictInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput> | UserCreateWithoutDistrictInput[] | UserUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDistrictInput | UserCreateOrConnectWithoutDistrictInput[]
    createMany?: UserCreateManyDistrictInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput> | CompanyCreateWithoutDistrictInput[] | CompanyUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutDistrictInput | CompanyCreateOrConnectWithoutDistrictInput[]
    createMany?: CompanyCreateManyDistrictInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput> | ProjectCreateWithoutDistrictInput[] | ProjectUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutDistrictInput | ProjectCreateOrConnectWithoutDistrictInput[]
    createMany?: ProjectCreateManyDistrictInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type StateUpdateOneRequiredWithoutDistrictsNestedInput = {
    create?: XOR<StateCreateWithoutDistrictsInput, StateUncheckedCreateWithoutDistrictsInput>
    connectOrCreate?: StateCreateOrConnectWithoutDistrictsInput
    upsert?: StateUpsertWithoutDistrictsInput
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutDistrictsInput, StateUpdateWithoutDistrictsInput>, StateUncheckedUpdateWithoutDistrictsInput>
  }

  export type UserUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput> | UserCreateWithoutDistrictInput[] | UserUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDistrictInput | UserCreateOrConnectWithoutDistrictInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDistrictInput | UserUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: UserCreateManyDistrictInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDistrictInput | UserUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDistrictInput | UserUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput> | CompanyCreateWithoutDistrictInput[] | CompanyUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutDistrictInput | CompanyCreateOrConnectWithoutDistrictInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutDistrictInput | CompanyUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: CompanyCreateManyDistrictInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutDistrictInput | CompanyUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutDistrictInput | CompanyUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput> | ProjectCreateWithoutDistrictInput[] | ProjectUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutDistrictInput | ProjectCreateOrConnectWithoutDistrictInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutDistrictInput | ProjectUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: ProjectCreateManyDistrictInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutDistrictInput | ProjectUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutDistrictInput | ProjectUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput> | UserCreateWithoutDistrictInput[] | UserUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDistrictInput | UserCreateOrConnectWithoutDistrictInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDistrictInput | UserUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: UserCreateManyDistrictInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDistrictInput | UserUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDistrictInput | UserUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput> | CompanyCreateWithoutDistrictInput[] | CompanyUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutDistrictInput | CompanyCreateOrConnectWithoutDistrictInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutDistrictInput | CompanyUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: CompanyCreateManyDistrictInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutDistrictInput | CompanyUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutDistrictInput | CompanyUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput> | ProjectCreateWithoutDistrictInput[] | ProjectUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutDistrictInput | ProjectCreateOrConnectWithoutDistrictInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutDistrictInput | ProjectUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: ProjectCreateManyDistrictInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutDistrictInput | ProjectUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutDistrictInput | ProjectUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type StateCreateNestedOneWithoutUsersInput = {
    create?: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StateCreateOrConnectWithoutUsersInput
    connect?: StateWhereUniqueInput
  }

  export type DistrictCreateNestedOneWithoutUsersInput = {
    create?: XOR<DistrictCreateWithoutUsersInput, DistrictUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutUsersInput
    connect?: DistrictWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutClientUserInput = {
    create?: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput> | ProjectCreateWithoutClientUserInput[] | ProjectUncheckedCreateWithoutClientUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientUserInput | ProjectCreateOrConnectWithoutClientUserInput[]
    createMany?: ProjectCreateManyClientUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type UserProjectCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput> | UserProjectCreateWithoutUserInput[] | UserProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutUserInput | UserProjectCreateOrConnectWithoutUserInput[]
    createMany?: UserProjectCreateManyUserInputEnvelope
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
  }

  export type UserCompanyCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput> | UserCompanyCreateWithoutUserInput[] | UserCompanyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutUserInput | UserCompanyCreateOrConnectWithoutUserInput[]
    createMany?: UserCompanyCreateManyUserInputEnvelope
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutClientUserInput = {
    create?: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput> | ProjectCreateWithoutClientUserInput[] | ProjectUncheckedCreateWithoutClientUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientUserInput | ProjectCreateOrConnectWithoutClientUserInput[]
    createMany?: ProjectCreateManyClientUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type UserProjectUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput> | UserProjectCreateWithoutUserInput[] | UserProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutUserInput | UserProjectCreateOrConnectWithoutUserInput[]
    createMany?: UserProjectCreateManyUserInputEnvelope
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
  }

  export type UserCompanyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput> | UserCompanyCreateWithoutUserInput[] | UserCompanyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutUserInput | UserCompanyCreateOrConnectWithoutUserInput[]
    createMany?: UserCompanyCreateManyUserInputEnvelope
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumPreferredLanguageFieldUpdateOperationsInput = {
    set?: $Enums.PreferredLanguage | null
  }

  export type NullableEnumOperatingZoneFieldUpdateOperationsInput = {
    set?: $Enums.OperatingZone | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type NullableEnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole | null
  }

  export type StateUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StateCreateOrConnectWithoutUsersInput
    upsert?: StateUpsertWithoutUsersInput
    disconnect?: StateWhereInput | boolean
    delete?: StateWhereInput | boolean
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutUsersInput, StateUpdateWithoutUsersInput>, StateUncheckedUpdateWithoutUsersInput>
  }

  export type DistrictUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DistrictCreateWithoutUsersInput, DistrictUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutUsersInput
    upsert?: DistrictUpsertWithoutUsersInput
    disconnect?: DistrictWhereInput | boolean
    delete?: DistrictWhereInput | boolean
    connect?: DistrictWhereUniqueInput
    update?: XOR<XOR<DistrictUpdateToOneWithWhereWithoutUsersInput, DistrictUpdateWithoutUsersInput>, DistrictUncheckedUpdateWithoutUsersInput>
  }

  export type ProjectUpdateManyWithoutClientUserNestedInput = {
    create?: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput> | ProjectCreateWithoutClientUserInput[] | ProjectUncheckedCreateWithoutClientUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientUserInput | ProjectCreateOrConnectWithoutClientUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientUserInput | ProjectUpsertWithWhereUniqueWithoutClientUserInput[]
    createMany?: ProjectCreateManyClientUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientUserInput | ProjectUpdateWithWhereUniqueWithoutClientUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientUserInput | ProjectUpdateManyWithWhereWithoutClientUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutOwnerInput | CompanyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutOwnerInput | CompanyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutOwnerInput | CompanyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type UserProjectUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput> | UserProjectCreateWithoutUserInput[] | UserProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutUserInput | UserProjectCreateOrConnectWithoutUserInput[]
    upsert?: UserProjectUpsertWithWhereUniqueWithoutUserInput | UserProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProjectCreateManyUserInputEnvelope
    set?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    disconnect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    delete?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    update?: UserProjectUpdateWithWhereUniqueWithoutUserInput | UserProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProjectUpdateManyWithWhereWithoutUserInput | UserProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
  }

  export type UserCompanyUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput> | UserCompanyCreateWithoutUserInput[] | UserCompanyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutUserInput | UserCompanyCreateOrConnectWithoutUserInput[]
    upsert?: UserCompanyUpsertWithWhereUniqueWithoutUserInput | UserCompanyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCompanyCreateManyUserInputEnvelope
    set?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    disconnect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    delete?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    update?: UserCompanyUpdateWithWhereUniqueWithoutUserInput | UserCompanyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCompanyUpdateManyWithWhereWithoutUserInput | UserCompanyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutClientUserNestedInput = {
    create?: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput> | ProjectCreateWithoutClientUserInput[] | ProjectUncheckedCreateWithoutClientUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientUserInput | ProjectCreateOrConnectWithoutClientUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientUserInput | ProjectUpsertWithWhereUniqueWithoutClientUserInput[]
    createMany?: ProjectCreateManyClientUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientUserInput | ProjectUpdateWithWhereUniqueWithoutClientUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientUserInput | ProjectUpdateManyWithWhereWithoutClientUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutOwnerInput | CompanyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutOwnerInput | CompanyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutOwnerInput | CompanyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type UserProjectUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput> | UserProjectCreateWithoutUserInput[] | UserProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutUserInput | UserProjectCreateOrConnectWithoutUserInput[]
    upsert?: UserProjectUpsertWithWhereUniqueWithoutUserInput | UserProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProjectCreateManyUserInputEnvelope
    set?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    disconnect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    delete?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    update?: UserProjectUpdateWithWhereUniqueWithoutUserInput | UserProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProjectUpdateManyWithWhereWithoutUserInput | UserProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
  }

  export type UserCompanyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput> | UserCompanyCreateWithoutUserInput[] | UserCompanyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutUserInput | UserCompanyCreateOrConnectWithoutUserInput[]
    upsert?: UserCompanyUpsertWithWhereUniqueWithoutUserInput | UserCompanyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCompanyCreateManyUserInputEnvelope
    set?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    disconnect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    delete?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    update?: UserCompanyUpdateWithWhereUniqueWithoutUserInput | UserCompanyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCompanyUpdateManyWithWhereWithoutUserInput | UserCompanyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
  }

  export type StateCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<StateCreateWithoutCompaniesInput, StateUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: StateCreateOrConnectWithoutCompaniesInput
    connect?: StateWhereUniqueInput
  }

  export type DistrictCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<DistrictCreateWithoutCompaniesInput, DistrictUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutCompaniesInput
    connect?: DistrictWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCompaniesOwnedInput = {
    create?: XOR<UserCreateWithoutCompaniesOwnedInput, UserUncheckedCreateWithoutCompaniesOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompaniesOwnedInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutClientCompanyInput = {
    create?: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput> | ProjectCreateWithoutClientCompanyInput[] | ProjectUncheckedCreateWithoutClientCompanyInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientCompanyInput | ProjectCreateOrConnectWithoutClientCompanyInput[]
    createMany?: ProjectCreateManyClientCompanyInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserCompanyCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput> | UserCompanyCreateWithoutCompanyInput[] | UserCompanyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutCompanyInput | UserCompanyCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCompanyCreateManyCompanyInputEnvelope
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutClientCompanyInput = {
    create?: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput> | ProjectCreateWithoutClientCompanyInput[] | ProjectUncheckedCreateWithoutClientCompanyInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientCompanyInput | ProjectCreateOrConnectWithoutClientCompanyInput[]
    createMany?: ProjectCreateManyClientCompanyInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserCompanyUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput> | UserCompanyCreateWithoutCompanyInput[] | UserCompanyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutCompanyInput | UserCompanyCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCompanyCreateManyCompanyInputEnvelope
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
  }

  export type EnumCompanyStatusFieldUpdateOperationsInput = {
    set?: $Enums.CompanyStatus
  }

  export type NullableEnumCompanyRoleFieldUpdateOperationsInput = {
    set?: $Enums.CompanyRole | null
  }

  export type StateUpdateOneWithoutCompaniesNestedInput = {
    create?: XOR<StateCreateWithoutCompaniesInput, StateUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: StateCreateOrConnectWithoutCompaniesInput
    upsert?: StateUpsertWithoutCompaniesInput
    disconnect?: StateWhereInput | boolean
    delete?: StateWhereInput | boolean
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutCompaniesInput, StateUpdateWithoutCompaniesInput>, StateUncheckedUpdateWithoutCompaniesInput>
  }

  export type DistrictUpdateOneWithoutCompaniesNestedInput = {
    create?: XOR<DistrictCreateWithoutCompaniesInput, DistrictUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutCompaniesInput
    upsert?: DistrictUpsertWithoutCompaniesInput
    disconnect?: DistrictWhereInput | boolean
    delete?: DistrictWhereInput | boolean
    connect?: DistrictWhereUniqueInput
    update?: XOR<XOR<DistrictUpdateToOneWithWhereWithoutCompaniesInput, DistrictUpdateWithoutCompaniesInput>, DistrictUncheckedUpdateWithoutCompaniesInput>
  }

  export type UserUpdateOneWithoutCompaniesOwnedNestedInput = {
    create?: XOR<UserCreateWithoutCompaniesOwnedInput, UserUncheckedCreateWithoutCompaniesOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompaniesOwnedInput
    upsert?: UserUpsertWithoutCompaniesOwnedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompaniesOwnedInput, UserUpdateWithoutCompaniesOwnedInput>, UserUncheckedUpdateWithoutCompaniesOwnedInput>
  }

  export type ProjectUpdateManyWithoutClientCompanyNestedInput = {
    create?: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput> | ProjectCreateWithoutClientCompanyInput[] | ProjectUncheckedCreateWithoutClientCompanyInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientCompanyInput | ProjectCreateOrConnectWithoutClientCompanyInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientCompanyInput | ProjectUpsertWithWhereUniqueWithoutClientCompanyInput[]
    createMany?: ProjectCreateManyClientCompanyInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientCompanyInput | ProjectUpdateWithWhereUniqueWithoutClientCompanyInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientCompanyInput | ProjectUpdateManyWithWhereWithoutClientCompanyInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserCompanyUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput> | UserCompanyCreateWithoutCompanyInput[] | UserCompanyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutCompanyInput | UserCompanyCreateOrConnectWithoutCompanyInput[]
    upsert?: UserCompanyUpsertWithWhereUniqueWithoutCompanyInput | UserCompanyUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCompanyCreateManyCompanyInputEnvelope
    set?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    disconnect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    delete?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    update?: UserCompanyUpdateWithWhereUniqueWithoutCompanyInput | UserCompanyUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserCompanyUpdateManyWithWhereWithoutCompanyInput | UserCompanyUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput = {
    create?: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput> | ProjectCreateWithoutClientCompanyInput[] | ProjectUncheckedCreateWithoutClientCompanyInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientCompanyInput | ProjectCreateOrConnectWithoutClientCompanyInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientCompanyInput | ProjectUpsertWithWhereUniqueWithoutClientCompanyInput[]
    createMany?: ProjectCreateManyClientCompanyInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientCompanyInput | ProjectUpdateWithWhereUniqueWithoutClientCompanyInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientCompanyInput | ProjectUpdateManyWithWhereWithoutClientCompanyInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput> | UserCompanyCreateWithoutCompanyInput[] | UserCompanyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutCompanyInput | UserCompanyCreateOrConnectWithoutCompanyInput[]
    upsert?: UserCompanyUpsertWithWhereUniqueWithoutCompanyInput | UserCompanyUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCompanyCreateManyCompanyInputEnvelope
    set?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    disconnect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    delete?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    update?: UserCompanyUpdateWithWhereUniqueWithoutCompanyInput | UserCompanyUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserCompanyUpdateManyWithWhereWithoutCompanyInput | UserCompanyUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectsAsClientInput = {
    create?: XOR<UserCreateWithoutProjectsAsClientInput, UserUncheckedCreateWithoutProjectsAsClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsAsClientInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutProjectsInput = {
    create?: XOR<CompanyCreateWithoutProjectsInput, CompanyUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutProjectsInput
    connect?: CompanyWhereUniqueInput
  }

  export type StateCreateNestedOneWithoutProjectsInput = {
    create?: XOR<StateCreateWithoutProjectsInput, StateUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: StateCreateOrConnectWithoutProjectsInput
    connect?: StateWhereUniqueInput
  }

  export type DistrictCreateNestedOneWithoutProjectsInput = {
    create?: XOR<DistrictCreateWithoutProjectsInput, DistrictUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutProjectsInput
    connect?: DistrictWhereUniqueInput
  }

  export type ProjectTagCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput> | ProjectTagCreateWithoutProjectInput[] | ProjectTagUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutProjectInput | ProjectTagCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectTagCreateManyProjectInputEnvelope
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
  }

  export type UserProjectCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput> | UserProjectCreateWithoutProjectInput[] | UserProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutProjectInput | UserProjectCreateOrConnectWithoutProjectInput[]
    createMany?: UserProjectCreateManyProjectInputEnvelope
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
  }

  export type ProjectTagUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput> | ProjectTagCreateWithoutProjectInput[] | ProjectTagUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutProjectInput | ProjectTagCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectTagCreateManyProjectInputEnvelope
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
  }

  export type UserProjectUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput> | UserProjectCreateWithoutProjectInput[] | UserProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutProjectInput | UserProjectCreateOrConnectWithoutProjectInput[]
    createMany?: UserProjectCreateManyProjectInputEnvelope
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
  }

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStatus
  }

  export type NullableEnumProjectStageFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStage | null
  }

  export type NullableEnumProjectTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProjectType | null
  }

  export type NullableEnumStructureTypeFieldUpdateOperationsInput = {
    set?: $Enums.StructureType | null
  }

  export type NullableEnumConstructionTypeFieldUpdateOperationsInput = {
    set?: $Enums.ConstructionType | null
  }

  export type NullableEnumContractTypeFieldUpdateOperationsInput = {
    set?: $Enums.ContractType | null
  }

  export type EnumProjectHealthFieldUpdateOperationsInput = {
    set?: $Enums.ProjectHealth
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumCurrencyCodeFieldUpdateOperationsInput = {
    set?: $Enums.CurrencyCode | null
  }

  export type NullableEnumAreaUnitFieldUpdateOperationsInput = {
    set?: $Enums.AreaUnit | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutProjectsAsClientNestedInput = {
    create?: XOR<UserCreateWithoutProjectsAsClientInput, UserUncheckedCreateWithoutProjectsAsClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsAsClientInput
    upsert?: UserUpsertWithoutProjectsAsClientInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsAsClientInput, UserUpdateWithoutProjectsAsClientInput>, UserUncheckedUpdateWithoutProjectsAsClientInput>
  }

  export type CompanyUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<CompanyCreateWithoutProjectsInput, CompanyUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutProjectsInput
    upsert?: CompanyUpsertWithoutProjectsInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutProjectsInput, CompanyUpdateWithoutProjectsInput>, CompanyUncheckedUpdateWithoutProjectsInput>
  }

  export type StateUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<StateCreateWithoutProjectsInput, StateUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: StateCreateOrConnectWithoutProjectsInput
    upsert?: StateUpsertWithoutProjectsInput
    disconnect?: StateWhereInput | boolean
    delete?: StateWhereInput | boolean
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutProjectsInput, StateUpdateWithoutProjectsInput>, StateUncheckedUpdateWithoutProjectsInput>
  }

  export type DistrictUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<DistrictCreateWithoutProjectsInput, DistrictUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutProjectsInput
    upsert?: DistrictUpsertWithoutProjectsInput
    disconnect?: DistrictWhereInput | boolean
    delete?: DistrictWhereInput | boolean
    connect?: DistrictWhereUniqueInput
    update?: XOR<XOR<DistrictUpdateToOneWithWhereWithoutProjectsInput, DistrictUpdateWithoutProjectsInput>, DistrictUncheckedUpdateWithoutProjectsInput>
  }

  export type ProjectTagUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput> | ProjectTagCreateWithoutProjectInput[] | ProjectTagUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutProjectInput | ProjectTagCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectTagUpsertWithWhereUniqueWithoutProjectInput | ProjectTagUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectTagCreateManyProjectInputEnvelope
    set?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    disconnect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    delete?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    update?: ProjectTagUpdateWithWhereUniqueWithoutProjectInput | ProjectTagUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectTagUpdateManyWithWhereWithoutProjectInput | ProjectTagUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
  }

  export type UserProjectUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput> | UserProjectCreateWithoutProjectInput[] | UserProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutProjectInput | UserProjectCreateOrConnectWithoutProjectInput[]
    upsert?: UserProjectUpsertWithWhereUniqueWithoutProjectInput | UserProjectUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserProjectCreateManyProjectInputEnvelope
    set?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    disconnect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    delete?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    update?: UserProjectUpdateWithWhereUniqueWithoutProjectInput | UserProjectUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserProjectUpdateManyWithWhereWithoutProjectInput | UserProjectUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
  }

  export type ProjectTagUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput> | ProjectTagCreateWithoutProjectInput[] | ProjectTagUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutProjectInput | ProjectTagCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectTagUpsertWithWhereUniqueWithoutProjectInput | ProjectTagUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectTagCreateManyProjectInputEnvelope
    set?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    disconnect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    delete?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    update?: ProjectTagUpdateWithWhereUniqueWithoutProjectInput | ProjectTagUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectTagUpdateManyWithWhereWithoutProjectInput | ProjectTagUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
  }

  export type UserProjectUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput> | UserProjectCreateWithoutProjectInput[] | UserProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutProjectInput | UserProjectCreateOrConnectWithoutProjectInput[]
    upsert?: UserProjectUpsertWithWhereUniqueWithoutProjectInput | UserProjectUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserProjectCreateManyProjectInputEnvelope
    set?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    disconnect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    delete?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    update?: UserProjectUpdateWithWhereUniqueWithoutProjectInput | UserProjectUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserProjectUpdateManyWithWhereWithoutProjectInput | UserProjectUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
  }

  export type ProjectTagCreateNestedManyWithoutTagInput = {
    create?: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput> | ProjectTagCreateWithoutTagInput[] | ProjectTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutTagInput | ProjectTagCreateOrConnectWithoutTagInput[]
    createMany?: ProjectTagCreateManyTagInputEnvelope
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
  }

  export type ProjectTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput> | ProjectTagCreateWithoutTagInput[] | ProjectTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutTagInput | ProjectTagCreateOrConnectWithoutTagInput[]
    createMany?: ProjectTagCreateManyTagInputEnvelope
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
  }

  export type ProjectTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput> | ProjectTagCreateWithoutTagInput[] | ProjectTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutTagInput | ProjectTagCreateOrConnectWithoutTagInput[]
    upsert?: ProjectTagUpsertWithWhereUniqueWithoutTagInput | ProjectTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: ProjectTagCreateManyTagInputEnvelope
    set?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    disconnect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    delete?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    update?: ProjectTagUpdateWithWhereUniqueWithoutTagInput | ProjectTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: ProjectTagUpdateManyWithWhereWithoutTagInput | ProjectTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
  }

  export type ProjectTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput> | ProjectTagCreateWithoutTagInput[] | ProjectTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutTagInput | ProjectTagCreateOrConnectWithoutTagInput[]
    upsert?: ProjectTagUpsertWithWhereUniqueWithoutTagInput | ProjectTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: ProjectTagCreateManyTagInputEnvelope
    set?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    disconnect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    delete?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    update?: ProjectTagUpdateWithWhereUniqueWithoutTagInput | ProjectTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: ProjectTagUpdateManyWithWhereWithoutTagInput | ProjectTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutProjectTagsInput = {
    create?: XOR<ProjectCreateWithoutProjectTagsInput, ProjectUncheckedCreateWithoutProjectTagsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectTagsInput
    connect?: ProjectWhereUniqueInput
  }

  export type RefProjectTagCreateNestedOneWithoutTagsInput = {
    create?: XOR<RefProjectTagCreateWithoutTagsInput, RefProjectTagUncheckedCreateWithoutTagsInput>
    connectOrCreate?: RefProjectTagCreateOrConnectWithoutTagsInput
    connect?: RefProjectTagWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutProjectTagsNestedInput = {
    create?: XOR<ProjectCreateWithoutProjectTagsInput, ProjectUncheckedCreateWithoutProjectTagsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectTagsInput
    upsert?: ProjectUpsertWithoutProjectTagsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutProjectTagsInput, ProjectUpdateWithoutProjectTagsInput>, ProjectUncheckedUpdateWithoutProjectTagsInput>
  }

  export type RefProjectTagUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<RefProjectTagCreateWithoutTagsInput, RefProjectTagUncheckedCreateWithoutTagsInput>
    connectOrCreate?: RefProjectTagCreateOrConnectWithoutTagsInput
    upsert?: RefProjectTagUpsertWithoutTagsInput
    connect?: RefProjectTagWhereUniqueInput
    update?: XOR<XOR<RefProjectTagUpdateToOneWithWhereWithoutTagsInput, RefProjectTagUpdateWithoutTagsInput>, RefProjectTagUncheckedUpdateWithoutTagsInput>
  }

  export type UserCreateNestedOneWithoutUserProjectsInput = {
    create?: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutUserProjectsInput = {
    create?: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserProjectsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserProjectsNestedInput = {
    create?: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProjectsInput
    upsert?: UserUpsertWithoutUserProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserProjectsInput, UserUpdateWithoutUserProjectsInput>, UserUncheckedUpdateWithoutUserProjectsInput>
  }

  export type ProjectUpdateOneRequiredWithoutUserProjectsNestedInput = {
    create?: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserProjectsInput
    upsert?: ProjectUpsertWithoutUserProjectsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutUserProjectsInput, ProjectUpdateWithoutUserProjectsInput>, ProjectUncheckedUpdateWithoutUserProjectsInput>
  }

  export type UserCreateNestedOneWithoutUserCompaniesInput = {
    create?: XOR<UserCreateWithoutUserCompaniesInput, UserUncheckedCreateWithoutUserCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCompaniesInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutUserCompaniesInput = {
    create?: XOR<CompanyCreateWithoutUserCompaniesInput, CompanyUncheckedCreateWithoutUserCompaniesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserCompaniesInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserCompaniesNestedInput = {
    create?: XOR<UserCreateWithoutUserCompaniesInput, UserUncheckedCreateWithoutUserCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCompaniesInput
    upsert?: UserUpsertWithoutUserCompaniesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserCompaniesInput, UserUpdateWithoutUserCompaniesInput>, UserUncheckedUpdateWithoutUserCompaniesInput>
  }

  export type CompanyUpdateOneRequiredWithoutUserCompaniesNestedInput = {
    create?: XOR<CompanyCreateWithoutUserCompaniesInput, CompanyUncheckedCreateWithoutUserCompaniesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserCompaniesInput
    upsert?: CompanyUpsertWithoutUserCompaniesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserCompaniesInput, CompanyUpdateWithoutUserCompaniesInput>, CompanyUncheckedUpdateWithoutUserCompaniesInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumStateTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StateType | EnumStateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStateTypeFilter<$PrismaModel> | $Enums.StateType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumStateTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StateType | EnumStateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStateTypeWithAggregatesFilter<$PrismaModel> | $Enums.StateType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStateTypeFilter<$PrismaModel>
    _max?: NestedEnumStateTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumPreferredLanguageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PreferredLanguage | EnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel> | $Enums.PreferredLanguage | null
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumOperatingZoneNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OperatingZone | EnumOperatingZoneFieldRefInput<$PrismaModel> | null
    in?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOperatingZoneNullableFilter<$PrismaModel> | $Enums.OperatingZone | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedEnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPreferredLanguageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PreferredLanguage | EnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPreferredLanguageNullableWithAggregatesFilter<$PrismaModel> | $Enums.PreferredLanguage | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel>
    _max?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel>
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumOperatingZoneNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OperatingZone | EnumOperatingZoneFieldRefInput<$PrismaModel> | null
    in?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOperatingZoneNullableWithAggregatesFilter<$PrismaModel> | $Enums.OperatingZone | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOperatingZoneNullableFilter<$PrismaModel>
    _max?: NestedEnumOperatingZoneNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type NestedEnumCompanyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyStatus | EnumCompanyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyStatusFilter<$PrismaModel> | $Enums.CompanyStatus
  }

  export type NestedEnumCompanyRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyRole | EnumCompanyRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompanyRoleNullableFilter<$PrismaModel> | $Enums.CompanyRole | null
  }

  export type NestedEnumCompanyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyStatus | EnumCompanyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyStatusWithAggregatesFilter<$PrismaModel> | $Enums.CompanyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyStatusFilter<$PrismaModel>
    _max?: NestedEnumCompanyStatusFilter<$PrismaModel>
  }

  export type NestedEnumCompanyRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyRole | EnumCompanyRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompanyRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.CompanyRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCompanyRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumCompanyRoleNullableFilter<$PrismaModel>
  }

  export type NestedEnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type NestedEnumProjectStageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStage | EnumProjectStageFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectStageNullableFilter<$PrismaModel> | $Enums.ProjectStage | null
  }

  export type NestedEnumProjectTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectTypeNullableFilter<$PrismaModel> | $Enums.ProjectType | null
  }

  export type NestedEnumStructureTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StructureType | EnumStructureTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStructureTypeNullableFilter<$PrismaModel> | $Enums.StructureType | null
  }

  export type NestedEnumConstructionTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ConstructionType | EnumConstructionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConstructionTypeNullableFilter<$PrismaModel> | $Enums.ConstructionType | null
  }

  export type NestedEnumContractTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContractTypeNullableFilter<$PrismaModel> | $Enums.ContractType | null
  }

  export type NestedEnumProjectHealthFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectHealth | EnumProjectHealthFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectHealthFilter<$PrismaModel> | $Enums.ProjectHealth
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumCurrencyCodeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel> | $Enums.CurrencyCode | null
  }

  export type NestedEnumAreaUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AreaUnit | EnumAreaUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAreaUnitNullableFilter<$PrismaModel> | $Enums.AreaUnit | null
  }

  export type NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type NestedEnumProjectStageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStage | EnumProjectStageFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectStageNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStage | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProjectStageNullableFilter<$PrismaModel>
    _max?: NestedEnumProjectStageNullableFilter<$PrismaModel>
  }

  export type NestedEnumProjectTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProjectType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProjectTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumProjectTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStructureTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StructureType | EnumStructureTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStructureTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.StructureType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStructureTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumStructureTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumConstructionTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConstructionType | EnumConstructionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConstructionTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ConstructionType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumConstructionTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumConstructionTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumContractTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContractTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ContractType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumContractTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumContractTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumProjectHealthWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectHealth | EnumProjectHealthFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectHealthWithAggregatesFilter<$PrismaModel> | $Enums.ProjectHealth
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectHealthFilter<$PrismaModel>
    _max?: NestedEnumProjectHealthFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyCode | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
    _max?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAreaUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AreaUnit | EnumAreaUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAreaUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.AreaUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAreaUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumAreaUnitNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DistrictCreateWithoutStateInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutDistrictInput
    companies?: CompanyCreateNestedManyWithoutDistrictInput
    projects?: ProjectCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateWithoutStateInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDistrictInput
    companies?: CompanyUncheckedCreateNestedManyWithoutDistrictInput
    projects?: ProjectUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictCreateOrConnectWithoutStateInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput>
  }

  export type DistrictCreateManyStateInputEnvelope = {
    data: DistrictCreateManyStateInput | DistrictCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStateInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput>
  }

  export type UserCreateManyStateInputEnvelope = {
    data: UserCreateManyStateInput | UserCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutStateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    owner?: UserCreateNestedOneWithoutCompaniesOwnedInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutStateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutStateInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput>
  }

  export type CompanyCreateManyStateInputEnvelope = {
    data: CompanyCreateManyStateInput | CompanyCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutStateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutStateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutStateInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput>
  }

  export type ProjectCreateManyStateInputEnvelope = {
    data: ProjectCreateManyStateInput | ProjectCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type DistrictUpsertWithWhereUniqueWithoutStateInput = {
    where: DistrictWhereUniqueInput
    update: XOR<DistrictUpdateWithoutStateInput, DistrictUncheckedUpdateWithoutStateInput>
    create: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput>
  }

  export type DistrictUpdateWithWhereUniqueWithoutStateInput = {
    where: DistrictWhereUniqueInput
    data: XOR<DistrictUpdateWithoutStateInput, DistrictUncheckedUpdateWithoutStateInput>
  }

  export type DistrictUpdateManyWithWhereWithoutStateInput = {
    where: DistrictScalarWhereInput
    data: XOR<DistrictUpdateManyMutationInput, DistrictUncheckedUpdateManyWithoutStateInput>
  }

  export type DistrictScalarWhereInput = {
    AND?: DistrictScalarWhereInput | DistrictScalarWhereInput[]
    OR?: DistrictScalarWhereInput[]
    NOT?: DistrictScalarWhereInput | DistrictScalarWhereInput[]
    districtId?: UuidFilter<"District"> | string
    name?: StringFilter<"District"> | string
    stateId?: UuidFilter<"District"> | string
    createdAt?: DateTimeFilter<"District"> | Date | string
    updatedAt?: DateTimeFilter<"District"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutStateInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStateInput, UserUncheckedUpdateWithoutStateInput>
    create: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStateInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStateInput, UserUncheckedUpdateWithoutStateInput>
  }

  export type UserUpdateManyWithWhereWithoutStateInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStateInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    userId?: UuidFilter<"User"> | string
    code?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    middleName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    countryCode?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    preferredLanguage?: EnumPreferredLanguageNullableFilter<"User"> | $Enums.PreferredLanguage | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    stateId?: UuidNullableFilter<"User"> | string | null
    districtId?: UuidNullableFilter<"User"> | string | null
    cityTown?: StringNullableFilter<"User"> | string | null
    pin?: StringNullableFilter<"User"> | string | null
    operatingZone?: EnumOperatingZoneNullableFilter<"User"> | $Enums.OperatingZone | null
    address?: StringNullableFilter<"User"> | string | null
    isClient?: BoolNullableFilter<"User"> | boolean | null
    isServiceProvider?: BoolNullableFilter<"User"> | boolean | null
    userStatus?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    passwordHash?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userRole?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
  }

  export type CompanyUpsertWithWhereUniqueWithoutStateInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutStateInput, CompanyUncheckedUpdateWithoutStateInput>
    create: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutStateInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutStateInput, CompanyUncheckedUpdateWithoutStateInput>
  }

  export type CompanyUpdateManyWithWhereWithoutStateInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutStateInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    companyId?: UuidFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    status?: EnumCompanyStatusFilter<"Company"> | $Enums.CompanyStatus
    website?: StringNullableFilter<"Company"> | string | null
    companyRole?: EnumCompanyRoleNullableFilter<"Company"> | $Enums.CompanyRole | null
    gstin?: StringNullableFilter<"Company"> | string | null
    pan?: StringNullableFilter<"Company"> | string | null
    cin?: StringNullableFilter<"Company"> | string | null
    primaryContact?: StringNullableFilter<"Company"> | string | null
    contactMobile?: StringNullableFilter<"Company"> | string | null
    contactEmail?: StringNullableFilter<"Company"> | string | null
    stateId?: UuidNullableFilter<"Company"> | string | null
    districtId?: UuidNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    pin?: StringNullableFilter<"Company"> | string | null
    notes?: StringNullableFilter<"Company"> | string | null
    userId?: UuidNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutStateInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutStateInput, ProjectUncheckedUpdateWithoutStateInput>
    create: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutStateInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutStateInput, ProjectUncheckedUpdateWithoutStateInput>
  }

  export type ProjectUpdateManyWithWhereWithoutStateInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutStateInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    projectId?: UuidFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    code?: StringNullableFilter<"Project"> | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    stage?: EnumProjectStageNullableFilter<"Project"> | $Enums.ProjectStage | null
    projectType?: EnumProjectTypeNullableFilter<"Project"> | $Enums.ProjectType | null
    structureType?: EnumStructureTypeNullableFilter<"Project"> | $Enums.StructureType | null
    constructionType?: EnumConstructionTypeNullableFilter<"Project"> | $Enums.ConstructionType | null
    contractType?: EnumContractTypeNullableFilter<"Project"> | $Enums.ContractType | null
    health?: EnumProjectHealthFilter<"Project"> | $Enums.ProjectHealth
    clientUserId?: UuidNullableFilter<"Project"> | string | null
    clientCompanyId?: UuidNullableFilter<"Project"> | string | null
    address?: StringNullableFilter<"Project"> | string | null
    cityTown?: StringNullableFilter<"Project"> | string | null
    stateId?: UuidNullableFilter<"Project"> | string | null
    districtId?: UuidNullableFilter<"Project"> | string | null
    pin?: StringNullableFilter<"Project"> | string | null
    latitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    plannedCompletionDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Project"> | $Enums.CurrencyCode | null
    contractValue?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    areaUnit?: EnumAreaUnitNullableFilter<"Project"> | $Enums.AreaUnit | null
    plotArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    floors?: IntNullableFilter<"Project"> | number | null
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type StateCreateWithoutDistrictsInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutStateInput
    companies?: CompanyCreateNestedManyWithoutStateInput
    projects?: ProjectCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutDistrictsInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutStateInput
    companies?: CompanyUncheckedCreateNestedManyWithoutStateInput
    projects?: ProjectUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutDistrictsInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutDistrictsInput, StateUncheckedCreateWithoutDistrictsInput>
  }

  export type UserCreateWithoutDistrictInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDistrictInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDistrictInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput>
  }

  export type UserCreateManyDistrictInputEnvelope = {
    data: UserCreateManyDistrictInput | UserCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutDistrictInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    owner?: UserCreateNestedOneWithoutCompaniesOwnedInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutDistrictInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDistrictInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput>
  }

  export type CompanyCreateManyDistrictInputEnvelope = {
    data: CompanyCreateManyDistrictInput | CompanyCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutDistrictInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDistrictInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDistrictInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput>
  }

  export type ProjectCreateManyDistrictInputEnvelope = {
    data: ProjectCreateManyDistrictInput | ProjectCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutDistrictsInput = {
    update: XOR<StateUpdateWithoutDistrictsInput, StateUncheckedUpdateWithoutDistrictsInput>
    create: XOR<StateCreateWithoutDistrictsInput, StateUncheckedCreateWithoutDistrictsInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutDistrictsInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutDistrictsInput, StateUncheckedUpdateWithoutDistrictsInput>
  }

  export type StateUpdateWithoutDistrictsInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutStateNestedInput
    companies?: CompanyUpdateManyWithoutStateNestedInput
    projects?: ProjectUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutDistrictsInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutStateNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutStateNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutDistrictInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDistrictInput, UserUncheckedUpdateWithoutDistrictInput>
    create: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDistrictInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDistrictInput, UserUncheckedUpdateWithoutDistrictInput>
  }

  export type UserUpdateManyWithWhereWithoutDistrictInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDistrictInput>
  }

  export type CompanyUpsertWithWhereUniqueWithoutDistrictInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutDistrictInput, CompanyUncheckedUpdateWithoutDistrictInput>
    create: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutDistrictInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutDistrictInput, CompanyUncheckedUpdateWithoutDistrictInput>
  }

  export type CompanyUpdateManyWithWhereWithoutDistrictInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutDistrictInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutDistrictInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutDistrictInput, ProjectUncheckedUpdateWithoutDistrictInput>
    create: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutDistrictInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutDistrictInput, ProjectUncheckedUpdateWithoutDistrictInput>
  }

  export type ProjectUpdateManyWithWhereWithoutDistrictInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutDistrictInput>
  }

  export type StateCreateWithoutUsersInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictCreateNestedManyWithoutStateInput
    companies?: CompanyCreateNestedManyWithoutStateInput
    projects?: ProjectCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutUsersInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictUncheckedCreateNestedManyWithoutStateInput
    companies?: CompanyUncheckedCreateNestedManyWithoutStateInput
    projects?: ProjectUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutUsersInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
  }

  export type DistrictCreateWithoutUsersInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutDistrictsInput
    companies?: CompanyCreateNestedManyWithoutDistrictInput
    projects?: ProjectCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateWithoutUsersInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutDistrictInput
    projects?: ProjectUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictCreateOrConnectWithoutUsersInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutUsersInput, DistrictUncheckedCreateWithoutUsersInput>
  }

  export type ProjectCreateWithoutClientUserInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutClientUserInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutClientUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput>
  }

  export type ProjectCreateManyClientUserInputEnvelope = {
    data: ProjectCreateManyClientUserInput | ProjectCreateManyClientUserInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutOwnerInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutOwnerInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
  }

  export type CompanyCreateManyOwnerInputEnvelope = {
    data: CompanyCreateManyOwnerInput | CompanyCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type UserProjectCreateWithoutUserInput = {
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectUncheckedCreateWithoutUserInput = {
    projectId: string
    createdAt?: Date | string
  }

  export type UserProjectCreateOrConnectWithoutUserInput = {
    where: UserProjectWhereUniqueInput
    create: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput>
  }

  export type UserProjectCreateManyUserInputEnvelope = {
    data: UserProjectCreateManyUserInput | UserProjectCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCompanyCreateWithoutUserInput = {
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutUserCompaniesInput
  }

  export type UserCompanyUncheckedCreateWithoutUserInput = {
    companyId: string
    createdAt?: Date | string
  }

  export type UserCompanyCreateOrConnectWithoutUserInput = {
    where: UserCompanyWhereUniqueInput
    create: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput>
  }

  export type UserCompanyCreateManyUserInputEnvelope = {
    data: UserCompanyCreateManyUserInput | UserCompanyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutUsersInput = {
    update: XOR<StateUpdateWithoutUsersInput, StateUncheckedUpdateWithoutUsersInput>
    create: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutUsersInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutUsersInput, StateUncheckedUpdateWithoutUsersInput>
  }

  export type StateUpdateWithoutUsersInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUpdateManyWithoutStateNestedInput
    companies?: CompanyUpdateManyWithoutStateNestedInput
    projects?: ProjectUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutUsersInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUncheckedUpdateManyWithoutStateNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutStateNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutStateNestedInput
  }

  export type DistrictUpsertWithoutUsersInput = {
    update: XOR<DistrictUpdateWithoutUsersInput, DistrictUncheckedUpdateWithoutUsersInput>
    create: XOR<DistrictCreateWithoutUsersInput, DistrictUncheckedCreateWithoutUsersInput>
    where?: DistrictWhereInput
  }

  export type DistrictUpdateToOneWithWhereWithoutUsersInput = {
    where?: DistrictWhereInput
    data: XOR<DistrictUpdateWithoutUsersInput, DistrictUncheckedUpdateWithoutUsersInput>
  }

  export type DistrictUpdateWithoutUsersInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutDistrictsNestedInput
    companies?: CompanyUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateWithoutUsersInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutClientUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutClientUserInput, ProjectUncheckedUpdateWithoutClientUserInput>
    create: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutClientUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutClientUserInput, ProjectUncheckedUpdateWithoutClientUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutClientUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutClientUserInput>
  }

  export type CompanyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutOwnerInput, CompanyUncheckedUpdateWithoutOwnerInput>
    create: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutOwnerInput, CompanyUncheckedUpdateWithoutOwnerInput>
  }

  export type CompanyUpdateManyWithWhereWithoutOwnerInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutOwnerInput>
  }

  export type UserProjectUpsertWithWhereUniqueWithoutUserInput = {
    where: UserProjectWhereUniqueInput
    update: XOR<UserProjectUpdateWithoutUserInput, UserProjectUncheckedUpdateWithoutUserInput>
    create: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput>
  }

  export type UserProjectUpdateWithWhereUniqueWithoutUserInput = {
    where: UserProjectWhereUniqueInput
    data: XOR<UserProjectUpdateWithoutUserInput, UserProjectUncheckedUpdateWithoutUserInput>
  }

  export type UserProjectUpdateManyWithWhereWithoutUserInput = {
    where: UserProjectScalarWhereInput
    data: XOR<UserProjectUpdateManyMutationInput, UserProjectUncheckedUpdateManyWithoutUserInput>
  }

  export type UserProjectScalarWhereInput = {
    AND?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
    OR?: UserProjectScalarWhereInput[]
    NOT?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
    userId?: UuidFilter<"UserProject"> | string
    projectId?: UuidFilter<"UserProject"> | string
    createdAt?: DateTimeFilter<"UserProject"> | Date | string
  }

  export type UserCompanyUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCompanyWhereUniqueInput
    update: XOR<UserCompanyUpdateWithoutUserInput, UserCompanyUncheckedUpdateWithoutUserInput>
    create: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput>
  }

  export type UserCompanyUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCompanyWhereUniqueInput
    data: XOR<UserCompanyUpdateWithoutUserInput, UserCompanyUncheckedUpdateWithoutUserInput>
  }

  export type UserCompanyUpdateManyWithWhereWithoutUserInput = {
    where: UserCompanyScalarWhereInput
    data: XOR<UserCompanyUpdateManyMutationInput, UserCompanyUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCompanyScalarWhereInput = {
    AND?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
    OR?: UserCompanyScalarWhereInput[]
    NOT?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
    userId?: UuidFilter<"UserCompany"> | string
    companyId?: UuidFilter<"UserCompany"> | string
    createdAt?: DateTimeFilter<"UserCompany"> | Date | string
  }

  export type StateCreateWithoutCompaniesInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
    projects?: ProjectCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutCompaniesInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
    projects?: ProjectUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutCompaniesInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutCompaniesInput, StateUncheckedCreateWithoutCompaniesInput>
  }

  export type DistrictCreateWithoutCompaniesInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutDistrictsInput
    users?: UserCreateNestedManyWithoutDistrictInput
    projects?: ProjectCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateWithoutCompaniesInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDistrictInput
    projects?: ProjectUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictCreateOrConnectWithoutCompaniesInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutCompaniesInput, DistrictUncheckedCreateWithoutCompaniesInput>
  }

  export type UserCreateWithoutCompaniesOwnedInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompaniesOwnedInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompaniesOwnedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompaniesOwnedInput, UserUncheckedCreateWithoutCompaniesOwnedInput>
  }

  export type ProjectCreateWithoutClientCompanyInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutClientCompanyInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutClientCompanyInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput>
  }

  export type ProjectCreateManyClientCompanyInputEnvelope = {
    data: ProjectCreateManyClientCompanyInput | ProjectCreateManyClientCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserCompanyCreateWithoutCompanyInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserCompaniesInput
  }

  export type UserCompanyUncheckedCreateWithoutCompanyInput = {
    userId: string
    createdAt?: Date | string
  }

  export type UserCompanyCreateOrConnectWithoutCompanyInput = {
    where: UserCompanyWhereUniqueInput
    create: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput>
  }

  export type UserCompanyCreateManyCompanyInputEnvelope = {
    data: UserCompanyCreateManyCompanyInput | UserCompanyCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutCompaniesInput = {
    update: XOR<StateUpdateWithoutCompaniesInput, StateUncheckedUpdateWithoutCompaniesInput>
    create: XOR<StateCreateWithoutCompaniesInput, StateUncheckedCreateWithoutCompaniesInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutCompaniesInput, StateUncheckedUpdateWithoutCompaniesInput>
  }

  export type StateUpdateWithoutCompaniesInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
    projects?: ProjectUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutCompaniesInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutStateNestedInput
  }

  export type DistrictUpsertWithoutCompaniesInput = {
    update: XOR<DistrictUpdateWithoutCompaniesInput, DistrictUncheckedUpdateWithoutCompaniesInput>
    create: XOR<DistrictCreateWithoutCompaniesInput, DistrictUncheckedCreateWithoutCompaniesInput>
    where?: DistrictWhereInput
  }

  export type DistrictUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: DistrictWhereInput
    data: XOR<DistrictUpdateWithoutCompaniesInput, DistrictUncheckedUpdateWithoutCompaniesInput>
  }

  export type DistrictUpdateWithoutCompaniesInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutDistrictsNestedInput
    users?: UserUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateWithoutCompaniesInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type UserUpsertWithoutCompaniesOwnedInput = {
    update: XOR<UserUpdateWithoutCompaniesOwnedInput, UserUncheckedUpdateWithoutCompaniesOwnedInput>
    create: XOR<UserCreateWithoutCompaniesOwnedInput, UserUncheckedCreateWithoutCompaniesOwnedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompaniesOwnedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompaniesOwnedInput, UserUncheckedUpdateWithoutCompaniesOwnedInput>
  }

  export type UserUpdateWithoutCompaniesOwnedInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompaniesOwnedInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutClientCompanyInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutClientCompanyInput, ProjectUncheckedUpdateWithoutClientCompanyInput>
    create: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutClientCompanyInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutClientCompanyInput, ProjectUncheckedUpdateWithoutClientCompanyInput>
  }

  export type ProjectUpdateManyWithWhereWithoutClientCompanyInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutClientCompanyInput>
  }

  export type UserCompanyUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserCompanyWhereUniqueInput
    update: XOR<UserCompanyUpdateWithoutCompanyInput, UserCompanyUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput>
  }

  export type UserCompanyUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserCompanyWhereUniqueInput
    data: XOR<UserCompanyUpdateWithoutCompanyInput, UserCompanyUncheckedUpdateWithoutCompanyInput>
  }

  export type UserCompanyUpdateManyWithWhereWithoutCompanyInput = {
    where: UserCompanyScalarWhereInput
    data: XOR<UserCompanyUpdateManyMutationInput, UserCompanyUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserCreateWithoutProjectsAsClientInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsAsClientInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsAsClientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsAsClientInput, UserUncheckedCreateWithoutProjectsAsClientInput>
  }

  export type CompanyCreateWithoutProjectsInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    owner?: UserCreateNestedOneWithoutCompaniesOwnedInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutProjectsInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutProjectsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutProjectsInput, CompanyUncheckedCreateWithoutProjectsInput>
  }

  export type StateCreateWithoutProjectsInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
    companies?: CompanyCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutProjectsInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
    companies?: CompanyUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutProjectsInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutProjectsInput, StateUncheckedCreateWithoutProjectsInput>
  }

  export type DistrictCreateWithoutProjectsInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutDistrictsInput
    users?: UserCreateNestedManyWithoutDistrictInput
    companies?: CompanyCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateWithoutProjectsInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDistrictInput
    companies?: CompanyUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictCreateOrConnectWithoutProjectsInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutProjectsInput, DistrictUncheckedCreateWithoutProjectsInput>
  }

  export type ProjectTagCreateWithoutProjectInput = {
    tag: RefProjectTagCreateNestedOneWithoutTagsInput
  }

  export type ProjectTagUncheckedCreateWithoutProjectInput = {
    tagCode: string
  }

  export type ProjectTagCreateOrConnectWithoutProjectInput = {
    where: ProjectTagWhereUniqueInput
    create: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput>
  }

  export type ProjectTagCreateManyProjectInputEnvelope = {
    data: ProjectTagCreateManyProjectInput | ProjectTagCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserProjectCreateWithoutProjectInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectUncheckedCreateWithoutProjectInput = {
    userId: string
    createdAt?: Date | string
  }

  export type UserProjectCreateOrConnectWithoutProjectInput = {
    where: UserProjectWhereUniqueInput
    create: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput>
  }

  export type UserProjectCreateManyProjectInputEnvelope = {
    data: UserProjectCreateManyProjectInput | UserProjectCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProjectsAsClientInput = {
    update: XOR<UserUpdateWithoutProjectsAsClientInput, UserUncheckedUpdateWithoutProjectsAsClientInput>
    create: XOR<UserCreateWithoutProjectsAsClientInput, UserUncheckedCreateWithoutProjectsAsClientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsAsClientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsAsClientInput, UserUncheckedUpdateWithoutProjectsAsClientInput>
  }

  export type UserUpdateWithoutProjectsAsClientInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsAsClientInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyUpsertWithoutProjectsInput = {
    update: XOR<CompanyUpdateWithoutProjectsInput, CompanyUncheckedUpdateWithoutProjectsInput>
    create: XOR<CompanyCreateWithoutProjectsInput, CompanyUncheckedCreateWithoutProjectsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutProjectsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutProjectsInput, CompanyUncheckedUpdateWithoutProjectsInput>
  }

  export type CompanyUpdateWithoutProjectsInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    owner?: UserUpdateOneWithoutCompaniesOwnedNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutProjectsInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type StateUpsertWithoutProjectsInput = {
    update: XOR<StateUpdateWithoutProjectsInput, StateUncheckedUpdateWithoutProjectsInput>
    create: XOR<StateCreateWithoutProjectsInput, StateUncheckedCreateWithoutProjectsInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutProjectsInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutProjectsInput, StateUncheckedUpdateWithoutProjectsInput>
  }

  export type StateUpdateWithoutProjectsInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
    companies?: CompanyUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutProjectsInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutStateNestedInput
  }

  export type DistrictUpsertWithoutProjectsInput = {
    update: XOR<DistrictUpdateWithoutProjectsInput, DistrictUncheckedUpdateWithoutProjectsInput>
    create: XOR<DistrictCreateWithoutProjectsInput, DistrictUncheckedCreateWithoutProjectsInput>
    where?: DistrictWhereInput
  }

  export type DistrictUpdateToOneWithWhereWithoutProjectsInput = {
    where?: DistrictWhereInput
    data: XOR<DistrictUpdateWithoutProjectsInput, DistrictUncheckedUpdateWithoutProjectsInput>
  }

  export type DistrictUpdateWithoutProjectsInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutDistrictsNestedInput
    users?: UserUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateWithoutProjectsInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type ProjectTagUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectTagWhereUniqueInput
    update: XOR<ProjectTagUpdateWithoutProjectInput, ProjectTagUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput>
  }

  export type ProjectTagUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectTagWhereUniqueInput
    data: XOR<ProjectTagUpdateWithoutProjectInput, ProjectTagUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectTagUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectTagScalarWhereInput
    data: XOR<ProjectTagUpdateManyMutationInput, ProjectTagUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectTagScalarWhereInput = {
    AND?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
    OR?: ProjectTagScalarWhereInput[]
    NOT?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
    projectId?: UuidFilter<"ProjectTag"> | string
    tagCode?: StringFilter<"ProjectTag"> | string
  }

  export type UserProjectUpsertWithWhereUniqueWithoutProjectInput = {
    where: UserProjectWhereUniqueInput
    update: XOR<UserProjectUpdateWithoutProjectInput, UserProjectUncheckedUpdateWithoutProjectInput>
    create: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput>
  }

  export type UserProjectUpdateWithWhereUniqueWithoutProjectInput = {
    where: UserProjectWhereUniqueInput
    data: XOR<UserProjectUpdateWithoutProjectInput, UserProjectUncheckedUpdateWithoutProjectInput>
  }

  export type UserProjectUpdateManyWithWhereWithoutProjectInput = {
    where: UserProjectScalarWhereInput
    data: XOR<UserProjectUpdateManyMutationInput, UserProjectUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectTagCreateWithoutTagInput = {
    project: ProjectCreateNestedOneWithoutProjectTagsInput
  }

  export type ProjectTagUncheckedCreateWithoutTagInput = {
    projectId: string
  }

  export type ProjectTagCreateOrConnectWithoutTagInput = {
    where: ProjectTagWhereUniqueInput
    create: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput>
  }

  export type ProjectTagCreateManyTagInputEnvelope = {
    data: ProjectTagCreateManyTagInput | ProjectTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type ProjectTagUpsertWithWhereUniqueWithoutTagInput = {
    where: ProjectTagWhereUniqueInput
    update: XOR<ProjectTagUpdateWithoutTagInput, ProjectTagUncheckedUpdateWithoutTagInput>
    create: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput>
  }

  export type ProjectTagUpdateWithWhereUniqueWithoutTagInput = {
    where: ProjectTagWhereUniqueInput
    data: XOR<ProjectTagUpdateWithoutTagInput, ProjectTagUncheckedUpdateWithoutTagInput>
  }

  export type ProjectTagUpdateManyWithWhereWithoutTagInput = {
    where: ProjectTagScalarWhereInput
    data: XOR<ProjectTagUpdateManyMutationInput, ProjectTagUncheckedUpdateManyWithoutTagInput>
  }

  export type ProjectCreateWithoutProjectTagsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutProjectTagsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutProjectTagsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProjectTagsInput, ProjectUncheckedCreateWithoutProjectTagsInput>
  }

  export type RefProjectTagCreateWithoutTagsInput = {
    tagCode: string
    label: string
  }

  export type RefProjectTagUncheckedCreateWithoutTagsInput = {
    tagCode: string
    label: string
  }

  export type RefProjectTagCreateOrConnectWithoutTagsInput = {
    where: RefProjectTagWhereUniqueInput
    create: XOR<RefProjectTagCreateWithoutTagsInput, RefProjectTagUncheckedCreateWithoutTagsInput>
  }

  export type ProjectUpsertWithoutProjectTagsInput = {
    update: XOR<ProjectUpdateWithoutProjectTagsInput, ProjectUncheckedUpdateWithoutProjectTagsInput>
    create: XOR<ProjectCreateWithoutProjectTagsInput, ProjectUncheckedCreateWithoutProjectTagsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutProjectTagsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutProjectTagsInput, ProjectUncheckedUpdateWithoutProjectTagsInput>
  }

  export type ProjectUpdateWithoutProjectTagsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProjectTagsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type RefProjectTagUpsertWithoutTagsInput = {
    update: XOR<RefProjectTagUpdateWithoutTagsInput, RefProjectTagUncheckedUpdateWithoutTagsInput>
    create: XOR<RefProjectTagCreateWithoutTagsInput, RefProjectTagUncheckedCreateWithoutTagsInput>
    where?: RefProjectTagWhereInput
  }

  export type RefProjectTagUpdateToOneWithWhereWithoutTagsInput = {
    where?: RefProjectTagWhereInput
    data: XOR<RefProjectTagUpdateWithoutTagsInput, RefProjectTagUncheckedUpdateWithoutTagsInput>
  }

  export type RefProjectTagUpdateWithoutTagsInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type RefProjectTagUncheckedUpdateWithoutTagsInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutUserProjectsInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserProjectsInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
  }

  export type ProjectCreateWithoutUserProjectsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUserProjectsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUserProjectsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
  }

  export type UserUpsertWithoutUserProjectsInput = {
    update: XOR<UserUpdateWithoutUserProjectsInput, UserUncheckedUpdateWithoutUserProjectsInput>
    create: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserProjectsInput, UserUncheckedUpdateWithoutUserProjectsInput>
  }

  export type UserUpdateWithoutUserProjectsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserProjectsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutUserProjectsInput = {
    update: XOR<ProjectUpdateWithoutUserProjectsInput, ProjectUncheckedUpdateWithoutUserProjectsInput>
    create: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutUserProjectsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutUserProjectsInput, ProjectUncheckedUpdateWithoutUserProjectsInput>
  }

  export type ProjectUpdateWithoutUserProjectsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserProjectsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateWithoutUserCompaniesInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserCompaniesInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserCompaniesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserCompaniesInput, UserUncheckedCreateWithoutUserCompaniesInput>
  }

  export type CompanyCreateWithoutUserCompaniesInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    owner?: UserCreateNestedOneWithoutCompaniesOwnedInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUserCompaniesInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUserCompaniesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUserCompaniesInput, CompanyUncheckedCreateWithoutUserCompaniesInput>
  }

  export type UserUpsertWithoutUserCompaniesInput = {
    update: XOR<UserUpdateWithoutUserCompaniesInput, UserUncheckedUpdateWithoutUserCompaniesInput>
    create: XOR<UserCreateWithoutUserCompaniesInput, UserUncheckedCreateWithoutUserCompaniesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserCompaniesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserCompaniesInput, UserUncheckedUpdateWithoutUserCompaniesInput>
  }

  export type UserUpdateWithoutUserCompaniesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserCompaniesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyUpsertWithoutUserCompaniesInput = {
    update: XOR<CompanyUpdateWithoutUserCompaniesInput, CompanyUncheckedUpdateWithoutUserCompaniesInput>
    create: XOR<CompanyCreateWithoutUserCompaniesInput, CompanyUncheckedCreateWithoutUserCompaniesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUserCompaniesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUserCompaniesInput, CompanyUncheckedUpdateWithoutUserCompaniesInput>
  }

  export type CompanyUpdateWithoutUserCompaniesInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    owner?: UserUpdateOneWithoutCompaniesOwnedNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUserCompaniesInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
  }

  export type DistrictCreateManyStateInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyStateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
  }

  export type CompanyCreateManyStateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyStateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistrictUpdateWithoutStateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateWithoutStateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateManyWithoutStateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutStateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
  }

  export type CompanyUpdateWithoutStateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    owner?: UserUpdateOneWithoutCompaniesOwnedNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutStateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutStateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutStateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutStateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutStateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyDistrictInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
  }

  export type CompanyCreateManyDistrictInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyDistrictInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutDistrictInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDistrictInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDistrictInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
  }

  export type CompanyUpdateWithoutDistrictInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    owner?: UserUpdateOneWithoutCompaniesOwnedNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDistrictInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutDistrictInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutDistrictInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDistrictInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutDistrictInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateManyClientUserInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyCreateManyOwnerInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProjectCreateManyUserInput = {
    projectId: string
    createdAt?: Date | string
  }

  export type UserCompanyCreateManyUserInput = {
    companyId: string
    createdAt?: Date | string
  }

  export type ProjectUpdateWithoutClientUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutClientUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutClientUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUpdateWithoutOwnerInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutOwnerInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutOwnerInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectUncheckedUpdateWithoutUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectUncheckedUpdateManyWithoutUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUserCompaniesNestedInput
  }

  export type UserCompanyUncheckedUpdateWithoutUserInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUncheckedUpdateManyWithoutUserInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateManyClientCompanyInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCompanyCreateManyCompanyInput = {
    userId: string
    createdAt?: Date | string
  }

  export type ProjectUpdateWithoutClientCompanyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutClientCompanyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutClientCompanyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUpdateWithoutCompanyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCompaniesNestedInput
  }

  export type UserCompanyUncheckedUpdateWithoutCompanyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUncheckedUpdateManyWithoutCompanyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectTagCreateManyProjectInput = {
    tagCode: string
  }

  export type UserProjectCreateManyProjectInput = {
    userId: string
    createdAt?: Date | string
  }

  export type ProjectTagUpdateWithoutProjectInput = {
    tag?: RefProjectTagUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ProjectTagUncheckedUpdateWithoutProjectInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectTagUncheckedUpdateManyWithoutProjectInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectUpdateWithoutProjectInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectUncheckedUpdateWithoutProjectInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectUncheckedUpdateManyWithoutProjectInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectTagCreateManyTagInput = {
    projectId: string
  }

  export type ProjectTagUpdateWithoutTagInput = {
    project?: ProjectUpdateOneRequiredWithoutProjectTagsNestedInput
  }

  export type ProjectTagUncheckedUpdateWithoutTagInput = {
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectTagUncheckedUpdateManyWithoutTagInput = {
    projectId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StateCountOutputTypeDefaultArgs instead
     */
    export type StateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistrictCountOutputTypeDefaultArgs instead
     */
    export type DistrictCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistrictCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefProjectTagCountOutputTypeDefaultArgs instead
     */
    export type RefProjectTagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefProjectTagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StateDefaultArgs instead
     */
    export type StateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistrictDefaultArgs instead
     */
    export type DistrictArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistrictDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefProjectTagDefaultArgs instead
     */
    export type RefProjectTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefProjectTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectTagDefaultArgs instead
     */
    export type ProjectTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserProjectDefaultArgs instead
     */
    export type UserProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCompanyDefaultArgs instead
     */
    export type UserCompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCompanyDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}