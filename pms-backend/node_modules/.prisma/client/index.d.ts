
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model State
 * 
 */
export type State = $Result.DefaultSelection<Prisma.$StatePayload>
/**
 * Model District
 * 
 */
export type District = $Result.DefaultSelection<Prisma.$DistrictPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model RefProjectTag
 * 
 */
export type RefProjectTag = $Result.DefaultSelection<Prisma.$RefProjectTagPayload>
/**
 * Model ProjectTag
 * 
 */
export type ProjectTag = $Result.DefaultSelection<Prisma.$ProjectTagPayload>
/**
 * Model UserProject
 * 
 */
export type UserProject = $Result.DefaultSelection<Prisma.$UserProjectPayload>
/**
 * Model UserCompany
 * 
 */
export type UserCompany = $Result.DefaultSelection<Prisma.$UserCompanyPayload>
/**
 * Model UserRoleMembership
 * 
 */
export type UserRoleMembership = $Result.DefaultSelection<Prisma.$UserRoleMembershipPayload>
/**
 * Model PermissionTemplate
 * 
 */
export type PermissionTemplate = $Result.DefaultSelection<Prisma.$PermissionTemplatePayload>
/**
 * Model PermissionProjectOverride
 * 
 */
export type PermissionProjectOverride = $Result.DefaultSelection<Prisma.$PermissionProjectOverridePayload>
/**
 * Model PermissionUserOverride
 * Deny-only overrides at User level for a specific Project.
 * Null/absent means "inherit".
 */
export type PermissionUserOverride = $Result.DefaultSelection<Prisma.$PermissionUserOverridePayload>
/**
 * Model RefChecklist
 * 
 */
export type RefChecklist = $Result.DefaultSelection<Prisma.$RefChecklistPayload>
/**
 * Model RefChecklistItem
 * 
 */
export type RefChecklistItem = $Result.DefaultSelection<Prisma.$RefChecklistItemPayload>
/**
 * Model RefChecklistItemActivityLink
 * 
 */
export type RefChecklistItemActivityLink = $Result.DefaultSelection<Prisma.$RefChecklistItemActivityLinkPayload>
/**
 * Model RefChecklistItemMaterialLink
 * 
 */
export type RefChecklistItemMaterialLink = $Result.DefaultSelection<Prisma.$RefChecklistItemMaterialLinkPayload>
/**
 * Model RefActivity
 * 
 */
export type RefActivity = $Result.DefaultSelection<Prisma.$RefActivityPayload>
/**
 * Model RefMaterial
 * 
 */
export type RefMaterial = $Result.DefaultSelection<Prisma.$RefMaterialPayload>
/**
 * Model RefActivityMaterial
 * 
 */
export type RefActivityMaterial = $Result.DefaultSelection<Prisma.$RefActivityMaterialPayload>
/**
 * Model AdminAuditSetting
 * 
 */
export type AdminAuditSetting = $Result.DefaultSelection<Prisma.$AdminAuditSettingPayload>
/**
 * Model AdminAuditLog
 * 
 */
export type AdminAuditLog = $Result.DefaultSelection<Prisma.$AdminAuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StateType: {
  State: 'State',
  UT: 'UT'
};

export type StateType = (typeof StateType)[keyof typeof StateType]


export const PreferredLanguage: {
  en: 'en',
  hi: 'hi',
  bn: 'bn',
  ta: 'ta',
  te: 'te',
  mr: 'mr',
  pa: 'pa',
  or: 'or',
  gu: 'gu',
  kn: 'kn',
  ml: 'ml'
};

export type PreferredLanguage = (typeof PreferredLanguage)[keyof typeof PreferredLanguage]


export const OperatingZone: {
  NCR: 'NCR',
  North: 'North',
  South: 'South',
  East: 'East',
  West: 'West',
  Central: 'Central'
};

export type OperatingZone = (typeof OperatingZone)[keyof typeof OperatingZone]


export const UserStatus: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const UserRole: {
  Admin: 'Admin',
  Client: 'Client',
  IH_PMT: 'IH_PMT',
  Contractor: 'Contractor',
  Consultant: 'Consultant',
  PMC: 'PMC',
  Supplier: 'Supplier'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CompanyStatus: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type CompanyStatus = (typeof CompanyStatus)[keyof typeof CompanyStatus]


export const CompanyRole: {
  IH_PMT: 'IH_PMT',
  Contractor: 'Contractor',
  Consultant: 'Consultant',
  PMC: 'PMC',
  Supplier: 'Supplier'
};

export type CompanyRole = (typeof CompanyRole)[keyof typeof CompanyRole]


export const ProjectStatus: {
  Draft: 'Draft',
  Active: 'Active',
  OnHold: 'OnHold',
  Completed: 'Completed',
  Archived: 'Archived'
};

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus]


export const ProjectStage: {
  Planning: 'Planning',
  Design: 'Design',
  Procurement: 'Procurement',
  Execution: 'Execution',
  Handover: 'Handover',
  Closed: 'Closed'
};

export type ProjectStage = (typeof ProjectStage)[keyof typeof ProjectStage]


export const ProjectType: {
  Residential: 'Residential',
  Commercial: 'Commercial',
  Industrial: 'Industrial',
  Institutional: 'Institutional',
  MixedUse: 'MixedUse',
  Infrastructure: 'Infrastructure',
  Other: 'Other'
};

export type ProjectType = (typeof ProjectType)[keyof typeof ProjectType]


export const StructureType: {
  LowRise: 'LowRise',
  HighRise: 'HighRise',
  Villa: 'Villa',
  RowHouse: 'RowHouse',
  InteriorFitout: 'InteriorFitout',
  ShellCore: 'ShellCore',
  Other: 'Other'
};

export type StructureType = (typeof StructureType)[keyof typeof StructureType]


export const ConstructionType: {
  New: 'New',
  Renovation: 'Renovation',
  Retrofit: 'Retrofit',
  Repair: 'Repair',
  Fitout: 'Fitout',
  Other: 'Other'
};

export type ConstructionType = (typeof ConstructionType)[keyof typeof ConstructionType]


export const ContractType: {
  LumpSum: 'LumpSum',
  ItemRate: 'ItemRate',
  Turnkey: 'Turnkey',
  EPC: 'EPC',
  PMC: 'PMC',
  LabourOnly: 'LabourOnly',
  Other: 'Other'
};

export type ContractType = (typeof ContractType)[keyof typeof ContractType]


export const ProjectHealth: {
  Green: 'Green',
  Amber: 'Amber',
  Red: 'Red',
  Unknown: 'Unknown'
};

export type ProjectHealth = (typeof ProjectHealth)[keyof typeof ProjectHealth]


export const CurrencyCode: {
  INR: 'INR',
  USD: 'USD',
  EUR: 'EUR',
  GBP: 'GBP',
  AED: 'AED',
  SAR: 'SAR',
  SGD: 'SGD',
  AUD: 'AUD',
  Other: 'Other'
};

export type CurrencyCode = (typeof CurrencyCode)[keyof typeof CurrencyCode]


export const AreaUnit: {
  SQFT: 'SQFT',
  SQM: 'SQM',
  SQYD: 'SQYD',
  Acre: 'Acre',
  Hectare: 'Hectare'
};

export type AreaUnit = (typeof AreaUnit)[keyof typeof AreaUnit]


export const RoleScope: {
  Global: 'Global',
  Company: 'Company',
  Project: 'Project'
};

export type RoleScope = (typeof RoleScope)[keyof typeof RoleScope]


export const Discipline: {
  Civil: 'Civil',
  MEP: 'MEP',
  Finishes: 'Finishes'
};

export type Discipline = (typeof Discipline)[keyof typeof Discipline]


export const MaterialDiscipline: {
  Civil: 'Civil',
  Architecture: 'Architecture',
  MEP_ELE: 'MEP_ELE',
  MEP_PHE: 'MEP_PHE',
  MEP_HVC: 'MEP_HVC',
  Finishes: 'Finishes'
};

export type MaterialDiscipline = (typeof MaterialDiscipline)[keyof typeof MaterialDiscipline]


export const AuditAction: {
  AssignAdded: 'AssignAdded',
  AssignRemoved: 'AssignRemoved',
  AssignReplaced: 'AssignReplaced'
};

export type AuditAction = (typeof AuditAction)[keyof typeof AuditAction]

}

export type StateType = $Enums.StateType

export const StateType: typeof $Enums.StateType

export type PreferredLanguage = $Enums.PreferredLanguage

export const PreferredLanguage: typeof $Enums.PreferredLanguage

export type OperatingZone = $Enums.OperatingZone

export const OperatingZone: typeof $Enums.OperatingZone

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CompanyStatus = $Enums.CompanyStatus

export const CompanyStatus: typeof $Enums.CompanyStatus

export type CompanyRole = $Enums.CompanyRole

export const CompanyRole: typeof $Enums.CompanyRole

export type ProjectStatus = $Enums.ProjectStatus

export const ProjectStatus: typeof $Enums.ProjectStatus

export type ProjectStage = $Enums.ProjectStage

export const ProjectStage: typeof $Enums.ProjectStage

export type ProjectType = $Enums.ProjectType

export const ProjectType: typeof $Enums.ProjectType

export type StructureType = $Enums.StructureType

export const StructureType: typeof $Enums.StructureType

export type ConstructionType = $Enums.ConstructionType

export const ConstructionType: typeof $Enums.ConstructionType

export type ContractType = $Enums.ContractType

export const ContractType: typeof $Enums.ContractType

export type ProjectHealth = $Enums.ProjectHealth

export const ProjectHealth: typeof $Enums.ProjectHealth

export type CurrencyCode = $Enums.CurrencyCode

export const CurrencyCode: typeof $Enums.CurrencyCode

export type AreaUnit = $Enums.AreaUnit

export const AreaUnit: typeof $Enums.AreaUnit

export type RoleScope = $Enums.RoleScope

export const RoleScope: typeof $Enums.RoleScope

export type Discipline = $Enums.Discipline

export const Discipline: typeof $Enums.Discipline

export type MaterialDiscipline = $Enums.MaterialDiscipline

export const MaterialDiscipline: typeof $Enums.MaterialDiscipline

export type AuditAction = $Enums.AuditAction

export const AuditAction: typeof $Enums.AuditAction

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more States
 * const states = await prisma.state.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more States
   * const states = await prisma.state.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.state`: Exposes CRUD operations for the **State** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more States
    * const states = await prisma.state.findMany()
    * ```
    */
  get state(): Prisma.StateDelegate<ExtArgs>;

  /**
   * `prisma.district`: Exposes CRUD operations for the **District** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Districts
    * const districts = await prisma.district.findMany()
    * ```
    */
  get district(): Prisma.DistrictDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.refProjectTag`: Exposes CRUD operations for the **RefProjectTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefProjectTags
    * const refProjectTags = await prisma.refProjectTag.findMany()
    * ```
    */
  get refProjectTag(): Prisma.RefProjectTagDelegate<ExtArgs>;

  /**
   * `prisma.projectTag`: Exposes CRUD operations for the **ProjectTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectTags
    * const projectTags = await prisma.projectTag.findMany()
    * ```
    */
  get projectTag(): Prisma.ProjectTagDelegate<ExtArgs>;

  /**
   * `prisma.userProject`: Exposes CRUD operations for the **UserProject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProjects
    * const userProjects = await prisma.userProject.findMany()
    * ```
    */
  get userProject(): Prisma.UserProjectDelegate<ExtArgs>;

  /**
   * `prisma.userCompany`: Exposes CRUD operations for the **UserCompany** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCompanies
    * const userCompanies = await prisma.userCompany.findMany()
    * ```
    */
  get userCompany(): Prisma.UserCompanyDelegate<ExtArgs>;

  /**
   * `prisma.userRoleMembership`: Exposes CRUD operations for the **UserRoleMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoleMemberships
    * const userRoleMemberships = await prisma.userRoleMembership.findMany()
    * ```
    */
  get userRoleMembership(): Prisma.UserRoleMembershipDelegate<ExtArgs>;

  /**
   * `prisma.permissionTemplate`: Exposes CRUD operations for the **PermissionTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PermissionTemplates
    * const permissionTemplates = await prisma.permissionTemplate.findMany()
    * ```
    */
  get permissionTemplate(): Prisma.PermissionTemplateDelegate<ExtArgs>;

  /**
   * `prisma.permissionProjectOverride`: Exposes CRUD operations for the **PermissionProjectOverride** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PermissionProjectOverrides
    * const permissionProjectOverrides = await prisma.permissionProjectOverride.findMany()
    * ```
    */
  get permissionProjectOverride(): Prisma.PermissionProjectOverrideDelegate<ExtArgs>;

  /**
   * `prisma.permissionUserOverride`: Exposes CRUD operations for the **PermissionUserOverride** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PermissionUserOverrides
    * const permissionUserOverrides = await prisma.permissionUserOverride.findMany()
    * ```
    */
  get permissionUserOverride(): Prisma.PermissionUserOverrideDelegate<ExtArgs>;

  /**
   * `prisma.refChecklist`: Exposes CRUD operations for the **RefChecklist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefChecklists
    * const refChecklists = await prisma.refChecklist.findMany()
    * ```
    */
  get refChecklist(): Prisma.RefChecklistDelegate<ExtArgs>;

  /**
   * `prisma.refChecklistItem`: Exposes CRUD operations for the **RefChecklistItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefChecklistItems
    * const refChecklistItems = await prisma.refChecklistItem.findMany()
    * ```
    */
  get refChecklistItem(): Prisma.RefChecklistItemDelegate<ExtArgs>;

  /**
   * `prisma.refChecklistItemActivityLink`: Exposes CRUD operations for the **RefChecklistItemActivityLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefChecklistItemActivityLinks
    * const refChecklistItemActivityLinks = await prisma.refChecklistItemActivityLink.findMany()
    * ```
    */
  get refChecklistItemActivityLink(): Prisma.RefChecklistItemActivityLinkDelegate<ExtArgs>;

  /**
   * `prisma.refChecklistItemMaterialLink`: Exposes CRUD operations for the **RefChecklistItemMaterialLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefChecklistItemMaterialLinks
    * const refChecklistItemMaterialLinks = await prisma.refChecklistItemMaterialLink.findMany()
    * ```
    */
  get refChecklistItemMaterialLink(): Prisma.RefChecklistItemMaterialLinkDelegate<ExtArgs>;

  /**
   * `prisma.refActivity`: Exposes CRUD operations for the **RefActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefActivities
    * const refActivities = await prisma.refActivity.findMany()
    * ```
    */
  get refActivity(): Prisma.RefActivityDelegate<ExtArgs>;

  /**
   * `prisma.refMaterial`: Exposes CRUD operations for the **RefMaterial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefMaterials
    * const refMaterials = await prisma.refMaterial.findMany()
    * ```
    */
  get refMaterial(): Prisma.RefMaterialDelegate<ExtArgs>;

  /**
   * `prisma.refActivityMaterial`: Exposes CRUD operations for the **RefActivityMaterial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefActivityMaterials
    * const refActivityMaterials = await prisma.refActivityMaterial.findMany()
    * ```
    */
  get refActivityMaterial(): Prisma.RefActivityMaterialDelegate<ExtArgs>;

  /**
   * `prisma.adminAuditSetting`: Exposes CRUD operations for the **AdminAuditSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminAuditSettings
    * const adminAuditSettings = await prisma.adminAuditSetting.findMany()
    * ```
    */
  get adminAuditSetting(): Prisma.AdminAuditSettingDelegate<ExtArgs>;

  /**
   * `prisma.adminAuditLog`: Exposes CRUD operations for the **AdminAuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminAuditLogs
    * const adminAuditLogs = await prisma.adminAuditLog.findMany()
    * ```
    */
  get adminAuditLog(): Prisma.AdminAuditLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    State: 'State',
    District: 'District',
    User: 'User',
    Company: 'Company',
    Project: 'Project',
    RefProjectTag: 'RefProjectTag',
    ProjectTag: 'ProjectTag',
    UserProject: 'UserProject',
    UserCompany: 'UserCompany',
    UserRoleMembership: 'UserRoleMembership',
    PermissionTemplate: 'PermissionTemplate',
    PermissionProjectOverride: 'PermissionProjectOverride',
    PermissionUserOverride: 'PermissionUserOverride',
    RefChecklist: 'RefChecklist',
    RefChecklistItem: 'RefChecklistItem',
    RefChecklistItemActivityLink: 'RefChecklistItemActivityLink',
    RefChecklistItemMaterialLink: 'RefChecklistItemMaterialLink',
    RefActivity: 'RefActivity',
    RefMaterial: 'RefMaterial',
    RefActivityMaterial: 'RefActivityMaterial',
    AdminAuditSetting: 'AdminAuditSetting',
    AdminAuditLog: 'AdminAuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "state" | "district" | "user" | "company" | "project" | "refProjectTag" | "projectTag" | "userProject" | "userCompany" | "userRoleMembership" | "permissionTemplate" | "permissionProjectOverride" | "permissionUserOverride" | "refChecklist" | "refChecklistItem" | "refChecklistItemActivityLink" | "refChecklistItemMaterialLink" | "refActivity" | "refMaterial" | "refActivityMaterial" | "adminAuditSetting" | "adminAuditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      State: {
        payload: Prisma.$StatePayload<ExtArgs>
        fields: Prisma.StateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          findFirst: {
            args: Prisma.StateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          findMany: {
            args: Prisma.StateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>[]
          }
          create: {
            args: Prisma.StateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          createMany: {
            args: Prisma.StateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>[]
          }
          delete: {
            args: Prisma.StateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          update: {
            args: Prisma.StateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          deleteMany: {
            args: Prisma.StateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatePayload>
          }
          aggregate: {
            args: Prisma.StateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateState>
          }
          groupBy: {
            args: Prisma.StateGroupByArgs<ExtArgs>
            result: $Utils.Optional<StateGroupByOutputType>[]
          }
          count: {
            args: Prisma.StateCountArgs<ExtArgs>
            result: $Utils.Optional<StateCountAggregateOutputType> | number
          }
        }
      }
      District: {
        payload: Prisma.$DistrictPayload<ExtArgs>
        fields: Prisma.DistrictFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistrictFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistrictFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          findFirst: {
            args: Prisma.DistrictFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistrictFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          findMany: {
            args: Prisma.DistrictFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>[]
          }
          create: {
            args: Prisma.DistrictCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          createMany: {
            args: Prisma.DistrictCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DistrictCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>[]
          }
          delete: {
            args: Prisma.DistrictDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          update: {
            args: Prisma.DistrictUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          deleteMany: {
            args: Prisma.DistrictDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DistrictUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DistrictUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistrictPayload>
          }
          aggregate: {
            args: Prisma.DistrictAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistrict>
          }
          groupBy: {
            args: Prisma.DistrictGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistrictGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistrictCountArgs<ExtArgs>
            result: $Utils.Optional<DistrictCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      RefProjectTag: {
        payload: Prisma.$RefProjectTagPayload<ExtArgs>
        fields: Prisma.RefProjectTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefProjectTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefProjectTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          findFirst: {
            args: Prisma.RefProjectTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefProjectTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          findMany: {
            args: Prisma.RefProjectTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>[]
          }
          create: {
            args: Prisma.RefProjectTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          createMany: {
            args: Prisma.RefProjectTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefProjectTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>[]
          }
          delete: {
            args: Prisma.RefProjectTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          update: {
            args: Prisma.RefProjectTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          deleteMany: {
            args: Prisma.RefProjectTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefProjectTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefProjectTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefProjectTagPayload>
          }
          aggregate: {
            args: Prisma.RefProjectTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefProjectTag>
          }
          groupBy: {
            args: Prisma.RefProjectTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefProjectTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefProjectTagCountArgs<ExtArgs>
            result: $Utils.Optional<RefProjectTagCountAggregateOutputType> | number
          }
        }
      }
      ProjectTag: {
        payload: Prisma.$ProjectTagPayload<ExtArgs>
        fields: Prisma.ProjectTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          findFirst: {
            args: Prisma.ProjectTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          findMany: {
            args: Prisma.ProjectTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>[]
          }
          create: {
            args: Prisma.ProjectTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          createMany: {
            args: Prisma.ProjectTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>[]
          }
          delete: {
            args: Prisma.ProjectTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          update: {
            args: Prisma.ProjectTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          deleteMany: {
            args: Prisma.ProjectTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTagPayload>
          }
          aggregate: {
            args: Prisma.ProjectTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectTag>
          }
          groupBy: {
            args: Prisma.ProjectTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectTagCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectTagCountAggregateOutputType> | number
          }
        }
      }
      UserProject: {
        payload: Prisma.$UserProjectPayload<ExtArgs>
        fields: Prisma.UserProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          findFirst: {
            args: Prisma.UserProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          findMany: {
            args: Prisma.UserProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>[]
          }
          create: {
            args: Prisma.UserProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          createMany: {
            args: Prisma.UserProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>[]
          }
          delete: {
            args: Prisma.UserProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          update: {
            args: Prisma.UserProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          deleteMany: {
            args: Prisma.UserProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectPayload>
          }
          aggregate: {
            args: Prisma.UserProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProject>
          }
          groupBy: {
            args: Prisma.UserProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProjectCountArgs<ExtArgs>
            result: $Utils.Optional<UserProjectCountAggregateOutputType> | number
          }
        }
      }
      UserCompany: {
        payload: Prisma.$UserCompanyPayload<ExtArgs>
        fields: Prisma.UserCompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          findFirst: {
            args: Prisma.UserCompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          findMany: {
            args: Prisma.UserCompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>[]
          }
          create: {
            args: Prisma.UserCompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          createMany: {
            args: Prisma.UserCompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>[]
          }
          delete: {
            args: Prisma.UserCompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          update: {
            args: Prisma.UserCompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          deleteMany: {
            args: Prisma.UserCompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserCompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCompanyPayload>
          }
          aggregate: {
            args: Prisma.UserCompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCompany>
          }
          groupBy: {
            args: Prisma.UserCompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCompanyCountArgs<ExtArgs>
            result: $Utils.Optional<UserCompanyCountAggregateOutputType> | number
          }
        }
      }
      UserRoleMembership: {
        payload: Prisma.$UserRoleMembershipPayload<ExtArgs>
        fields: Prisma.UserRoleMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleMembershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleMembershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload>
          }
          findFirst: {
            args: Prisma.UserRoleMembershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleMembershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload>
          }
          findMany: {
            args: Prisma.UserRoleMembershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload>[]
          }
          create: {
            args: Prisma.UserRoleMembershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload>
          }
          createMany: {
            args: Prisma.UserRoleMembershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleMembershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload>[]
          }
          delete: {
            args: Prisma.UserRoleMembershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload>
          }
          update: {
            args: Prisma.UserRoleMembershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload>
          }
          deleteMany: {
            args: Prisma.UserRoleMembershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleMembershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleMembershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRoleMembershipPayload>
          }
          aggregate: {
            args: Prisma.UserRoleMembershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRoleMembership>
          }
          groupBy: {
            args: Prisma.UserRoleMembershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleMembershipCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleMembershipCountAggregateOutputType> | number
          }
        }
      }
      PermissionTemplate: {
        payload: Prisma.$PermissionTemplatePayload<ExtArgs>
        fields: Prisma.PermissionTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload>
          }
          findFirst: {
            args: Prisma.PermissionTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload>
          }
          findMany: {
            args: Prisma.PermissionTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload>[]
          }
          create: {
            args: Prisma.PermissionTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload>
          }
          createMany: {
            args: Prisma.PermissionTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload>[]
          }
          delete: {
            args: Prisma.PermissionTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload>
          }
          update: {
            args: Prisma.PermissionTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload>
          }
          deleteMany: {
            args: Prisma.PermissionTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionTemplatePayload>
          }
          aggregate: {
            args: Prisma.PermissionTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermissionTemplate>
          }
          groupBy: {
            args: Prisma.PermissionTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionTemplateCountAggregateOutputType> | number
          }
        }
      }
      PermissionProjectOverride: {
        payload: Prisma.$PermissionProjectOverridePayload<ExtArgs>
        fields: Prisma.PermissionProjectOverrideFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionProjectOverrideFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionProjectOverrideFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload>
          }
          findFirst: {
            args: Prisma.PermissionProjectOverrideFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionProjectOverrideFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload>
          }
          findMany: {
            args: Prisma.PermissionProjectOverrideFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload>[]
          }
          create: {
            args: Prisma.PermissionProjectOverrideCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload>
          }
          createMany: {
            args: Prisma.PermissionProjectOverrideCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionProjectOverrideCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload>[]
          }
          delete: {
            args: Prisma.PermissionProjectOverrideDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload>
          }
          update: {
            args: Prisma.PermissionProjectOverrideUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload>
          }
          deleteMany: {
            args: Prisma.PermissionProjectOverrideDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionProjectOverrideUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionProjectOverrideUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionProjectOverridePayload>
          }
          aggregate: {
            args: Prisma.PermissionProjectOverrideAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermissionProjectOverride>
          }
          groupBy: {
            args: Prisma.PermissionProjectOverrideGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionProjectOverrideGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionProjectOverrideCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionProjectOverrideCountAggregateOutputType> | number
          }
        }
      }
      PermissionUserOverride: {
        payload: Prisma.$PermissionUserOverridePayload<ExtArgs>
        fields: Prisma.PermissionUserOverrideFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionUserOverrideFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionUserOverrideFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload>
          }
          findFirst: {
            args: Prisma.PermissionUserOverrideFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionUserOverrideFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload>
          }
          findMany: {
            args: Prisma.PermissionUserOverrideFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload>[]
          }
          create: {
            args: Prisma.PermissionUserOverrideCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload>
          }
          createMany: {
            args: Prisma.PermissionUserOverrideCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionUserOverrideCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload>[]
          }
          delete: {
            args: Prisma.PermissionUserOverrideDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload>
          }
          update: {
            args: Prisma.PermissionUserOverrideUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload>
          }
          deleteMany: {
            args: Prisma.PermissionUserOverrideDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUserOverrideUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUserOverrideUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionUserOverridePayload>
          }
          aggregate: {
            args: Prisma.PermissionUserOverrideAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermissionUserOverride>
          }
          groupBy: {
            args: Prisma.PermissionUserOverrideGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionUserOverrideGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionUserOverrideCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionUserOverrideCountAggregateOutputType> | number
          }
        }
      }
      RefChecklist: {
        payload: Prisma.$RefChecklistPayload<ExtArgs>
        fields: Prisma.RefChecklistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefChecklistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefChecklistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload>
          }
          findFirst: {
            args: Prisma.RefChecklistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefChecklistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload>
          }
          findMany: {
            args: Prisma.RefChecklistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload>[]
          }
          create: {
            args: Prisma.RefChecklistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload>
          }
          createMany: {
            args: Prisma.RefChecklistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefChecklistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload>[]
          }
          delete: {
            args: Prisma.RefChecklistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload>
          }
          update: {
            args: Prisma.RefChecklistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload>
          }
          deleteMany: {
            args: Prisma.RefChecklistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefChecklistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefChecklistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistPayload>
          }
          aggregate: {
            args: Prisma.RefChecklistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefChecklist>
          }
          groupBy: {
            args: Prisma.RefChecklistGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefChecklistGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefChecklistCountArgs<ExtArgs>
            result: $Utils.Optional<RefChecklistCountAggregateOutputType> | number
          }
        }
      }
      RefChecklistItem: {
        payload: Prisma.$RefChecklistItemPayload<ExtArgs>
        fields: Prisma.RefChecklistItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefChecklistItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefChecklistItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload>
          }
          findFirst: {
            args: Prisma.RefChecklistItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefChecklistItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload>
          }
          findMany: {
            args: Prisma.RefChecklistItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload>[]
          }
          create: {
            args: Prisma.RefChecklistItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload>
          }
          createMany: {
            args: Prisma.RefChecklistItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefChecklistItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload>[]
          }
          delete: {
            args: Prisma.RefChecklistItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload>
          }
          update: {
            args: Prisma.RefChecklistItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload>
          }
          deleteMany: {
            args: Prisma.RefChecklistItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefChecklistItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefChecklistItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemPayload>
          }
          aggregate: {
            args: Prisma.RefChecklistItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefChecklistItem>
          }
          groupBy: {
            args: Prisma.RefChecklistItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefChecklistItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefChecklistItemCountArgs<ExtArgs>
            result: $Utils.Optional<RefChecklistItemCountAggregateOutputType> | number
          }
        }
      }
      RefChecklistItemActivityLink: {
        payload: Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>
        fields: Prisma.RefChecklistItemActivityLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefChecklistItemActivityLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefChecklistItemActivityLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload>
          }
          findFirst: {
            args: Prisma.RefChecklistItemActivityLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefChecklistItemActivityLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload>
          }
          findMany: {
            args: Prisma.RefChecklistItemActivityLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload>[]
          }
          create: {
            args: Prisma.RefChecklistItemActivityLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload>
          }
          createMany: {
            args: Prisma.RefChecklistItemActivityLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefChecklistItemActivityLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload>[]
          }
          delete: {
            args: Prisma.RefChecklistItemActivityLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload>
          }
          update: {
            args: Prisma.RefChecklistItemActivityLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload>
          }
          deleteMany: {
            args: Prisma.RefChecklistItemActivityLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefChecklistItemActivityLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefChecklistItemActivityLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemActivityLinkPayload>
          }
          aggregate: {
            args: Prisma.RefChecklistItemActivityLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefChecklistItemActivityLink>
          }
          groupBy: {
            args: Prisma.RefChecklistItemActivityLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefChecklistItemActivityLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefChecklistItemActivityLinkCountArgs<ExtArgs>
            result: $Utils.Optional<RefChecklistItemActivityLinkCountAggregateOutputType> | number
          }
        }
      }
      RefChecklistItemMaterialLink: {
        payload: Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>
        fields: Prisma.RefChecklistItemMaterialLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefChecklistItemMaterialLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefChecklistItemMaterialLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload>
          }
          findFirst: {
            args: Prisma.RefChecklistItemMaterialLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefChecklistItemMaterialLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload>
          }
          findMany: {
            args: Prisma.RefChecklistItemMaterialLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload>[]
          }
          create: {
            args: Prisma.RefChecklistItemMaterialLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload>
          }
          createMany: {
            args: Prisma.RefChecklistItemMaterialLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefChecklistItemMaterialLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload>[]
          }
          delete: {
            args: Prisma.RefChecklistItemMaterialLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload>
          }
          update: {
            args: Prisma.RefChecklistItemMaterialLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload>
          }
          deleteMany: {
            args: Prisma.RefChecklistItemMaterialLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefChecklistItemMaterialLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefChecklistItemMaterialLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefChecklistItemMaterialLinkPayload>
          }
          aggregate: {
            args: Prisma.RefChecklistItemMaterialLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefChecklistItemMaterialLink>
          }
          groupBy: {
            args: Prisma.RefChecklistItemMaterialLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefChecklistItemMaterialLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefChecklistItemMaterialLinkCountArgs<ExtArgs>
            result: $Utils.Optional<RefChecklistItemMaterialLinkCountAggregateOutputType> | number
          }
        }
      }
      RefActivity: {
        payload: Prisma.$RefActivityPayload<ExtArgs>
        fields: Prisma.RefActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload>
          }
          findFirst: {
            args: Prisma.RefActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload>
          }
          findMany: {
            args: Prisma.RefActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload>[]
          }
          create: {
            args: Prisma.RefActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload>
          }
          createMany: {
            args: Prisma.RefActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload>[]
          }
          delete: {
            args: Prisma.RefActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload>
          }
          update: {
            args: Prisma.RefActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload>
          }
          deleteMany: {
            args: Prisma.RefActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityPayload>
          }
          aggregate: {
            args: Prisma.RefActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefActivity>
          }
          groupBy: {
            args: Prisma.RefActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefActivityCountArgs<ExtArgs>
            result: $Utils.Optional<RefActivityCountAggregateOutputType> | number
          }
        }
      }
      RefMaterial: {
        payload: Prisma.$RefMaterialPayload<ExtArgs>
        fields: Prisma.RefMaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefMaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefMaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload>
          }
          findFirst: {
            args: Prisma.RefMaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefMaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload>
          }
          findMany: {
            args: Prisma.RefMaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload>[]
          }
          create: {
            args: Prisma.RefMaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload>
          }
          createMany: {
            args: Prisma.RefMaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefMaterialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload>[]
          }
          delete: {
            args: Prisma.RefMaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload>
          }
          update: {
            args: Prisma.RefMaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload>
          }
          deleteMany: {
            args: Prisma.RefMaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefMaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefMaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefMaterialPayload>
          }
          aggregate: {
            args: Prisma.RefMaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefMaterial>
          }
          groupBy: {
            args: Prisma.RefMaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefMaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefMaterialCountArgs<ExtArgs>
            result: $Utils.Optional<RefMaterialCountAggregateOutputType> | number
          }
        }
      }
      RefActivityMaterial: {
        payload: Prisma.$RefActivityMaterialPayload<ExtArgs>
        fields: Prisma.RefActivityMaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefActivityMaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefActivityMaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload>
          }
          findFirst: {
            args: Prisma.RefActivityMaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefActivityMaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload>
          }
          findMany: {
            args: Prisma.RefActivityMaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload>[]
          }
          create: {
            args: Prisma.RefActivityMaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload>
          }
          createMany: {
            args: Prisma.RefActivityMaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefActivityMaterialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload>[]
          }
          delete: {
            args: Prisma.RefActivityMaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload>
          }
          update: {
            args: Prisma.RefActivityMaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload>
          }
          deleteMany: {
            args: Prisma.RefActivityMaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefActivityMaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefActivityMaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefActivityMaterialPayload>
          }
          aggregate: {
            args: Prisma.RefActivityMaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefActivityMaterial>
          }
          groupBy: {
            args: Prisma.RefActivityMaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefActivityMaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefActivityMaterialCountArgs<ExtArgs>
            result: $Utils.Optional<RefActivityMaterialCountAggregateOutputType> | number
          }
        }
      }
      AdminAuditSetting: {
        payload: Prisma.$AdminAuditSettingPayload<ExtArgs>
        fields: Prisma.AdminAuditSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminAuditSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminAuditSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload>
          }
          findFirst: {
            args: Prisma.AdminAuditSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminAuditSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload>
          }
          findMany: {
            args: Prisma.AdminAuditSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload>[]
          }
          create: {
            args: Prisma.AdminAuditSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload>
          }
          createMany: {
            args: Prisma.AdminAuditSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminAuditSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload>[]
          }
          delete: {
            args: Prisma.AdminAuditSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload>
          }
          update: {
            args: Prisma.AdminAuditSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload>
          }
          deleteMany: {
            args: Prisma.AdminAuditSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminAuditSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminAuditSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditSettingPayload>
          }
          aggregate: {
            args: Prisma.AdminAuditSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminAuditSetting>
          }
          groupBy: {
            args: Prisma.AdminAuditSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminAuditSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminAuditSettingCountArgs<ExtArgs>
            result: $Utils.Optional<AdminAuditSettingCountAggregateOutputType> | number
          }
        }
      }
      AdminAuditLog: {
        payload: Prisma.$AdminAuditLogPayload<ExtArgs>
        fields: Prisma.AdminAuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminAuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminAuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload>
          }
          findFirst: {
            args: Prisma.AdminAuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminAuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload>
          }
          findMany: {
            args: Prisma.AdminAuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload>[]
          }
          create: {
            args: Prisma.AdminAuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload>
          }
          createMany: {
            args: Prisma.AdminAuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminAuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload>[]
          }
          delete: {
            args: Prisma.AdminAuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload>
          }
          update: {
            args: Prisma.AdminAuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AdminAuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminAuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminAuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminAuditLogPayload>
          }
          aggregate: {
            args: Prisma.AdminAuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminAuditLog>
          }
          groupBy: {
            args: Prisma.AdminAuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminAuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminAuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AdminAuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StateCountOutputType
   */

  export type StateCountOutputType = {
    districts: number
    users: number
    companies: number
    projects: number
  }

  export type StateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    districts?: boolean | StateCountOutputTypeCountDistrictsArgs
    users?: boolean | StateCountOutputTypeCountUsersArgs
    companies?: boolean | StateCountOutputTypeCountCompaniesArgs
    projects?: boolean | StateCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateCountOutputType
     */
    select?: StateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountDistrictsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistrictWhereInput
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * Count Type DistrictCountOutputType
   */

  export type DistrictCountOutputType = {
    users: number
    companies: number
    projects: number
  }

  export type DistrictCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DistrictCountOutputTypeCountUsersArgs
    companies?: boolean | DistrictCountOutputTypeCountCompaniesArgs
    projects?: boolean | DistrictCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistrictCountOutputType
     */
    select?: DistrictCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * DistrictCountOutputType without action
   */
  export type DistrictCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    projectsAsClient: number
    companiesAsServiceProvider: number
    userProjects: number
    userCompanies: number
    userRoleMemberships: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectsAsClient?: boolean | UserCountOutputTypeCountProjectsAsClientArgs
    companiesAsServiceProvider?: boolean | UserCountOutputTypeCountCompaniesAsServiceProviderArgs
    userProjects?: boolean | UserCountOutputTypeCountUserProjectsArgs
    userCompanies?: boolean | UserCountOutputTypeCountUserCompaniesArgs
    userRoleMemberships?: boolean | UserCountOutputTypeCountUserRoleMembershipsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsAsClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompaniesAsServiceProviderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRoleMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleMembershipWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    projects: number
    userCompanies: number
    userRoleMemberships: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | CompanyCountOutputTypeCountProjectsArgs
    userCompanies?: boolean | CompanyCountOutputTypeCountUserCompaniesArgs
    userRoleMemberships?: boolean | CompanyCountOutputTypeCountUserRoleMembershipsArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUserCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUserRoleMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleMembershipWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    projectTags: number
    userProjects: number
    userRoleMemberships: number
    PermissionProjectOverride: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectTags?: boolean | ProjectCountOutputTypeCountProjectTagsArgs
    userProjects?: boolean | ProjectCountOutputTypeCountUserProjectsArgs
    userRoleMemberships?: boolean | ProjectCountOutputTypeCountUserRoleMembershipsArgs
    PermissionProjectOverride?: boolean | ProjectCountOutputTypeCountPermissionProjectOverrideArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountProjectTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectTagWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountUserProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountUserRoleMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleMembershipWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountPermissionProjectOverrideArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionProjectOverrideWhereInput
  }


  /**
   * Count Type RefProjectTagCountOutputType
   */

  export type RefProjectTagCountOutputType = {
    tags: number
  }

  export type RefProjectTagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | RefProjectTagCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * RefProjectTagCountOutputType without action
   */
  export type RefProjectTagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTagCountOutputType
     */
    select?: RefProjectTagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RefProjectTagCountOutputType without action
   */
  export type RefProjectTagCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectTagWhereInput
  }


  /**
   * Count Type RefChecklistCountOutputType
   */

  export type RefChecklistCountOutputType = {
    items: number
  }

  export type RefChecklistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | RefChecklistCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * RefChecklistCountOutputType without action
   */
  export type RefChecklistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistCountOutputType
     */
    select?: RefChecklistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RefChecklistCountOutputType without action
   */
  export type RefChecklistCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistItemWhereInput
  }


  /**
   * Count Type RefChecklistItemCountOutputType
   */

  export type RefChecklistItemCountOutputType = {
    suggestedActivities: number
    suggestedMaterials: number
  }

  export type RefChecklistItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suggestedActivities?: boolean | RefChecklistItemCountOutputTypeCountSuggestedActivitiesArgs
    suggestedMaterials?: boolean | RefChecklistItemCountOutputTypeCountSuggestedMaterialsArgs
  }

  // Custom InputTypes
  /**
   * RefChecklistItemCountOutputType without action
   */
  export type RefChecklistItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemCountOutputType
     */
    select?: RefChecklistItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RefChecklistItemCountOutputType without action
   */
  export type RefChecklistItemCountOutputTypeCountSuggestedActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistItemActivityLinkWhereInput
  }

  /**
   * RefChecklistItemCountOutputType without action
   */
  export type RefChecklistItemCountOutputTypeCountSuggestedMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistItemMaterialLinkWhereInput
  }


  /**
   * Count Type RefActivityCountOutputType
   */

  export type RefActivityCountOutputType = {
    materials: number
    RefChecklistItemActivityLink: number
  }

  export type RefActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    materials?: boolean | RefActivityCountOutputTypeCountMaterialsArgs
    RefChecklistItemActivityLink?: boolean | RefActivityCountOutputTypeCountRefChecklistItemActivityLinkArgs
  }

  // Custom InputTypes
  /**
   * RefActivityCountOutputType without action
   */
  export type RefActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityCountOutputType
     */
    select?: RefActivityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RefActivityCountOutputType without action
   */
  export type RefActivityCountOutputTypeCountMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefActivityMaterialWhereInput
  }

  /**
   * RefActivityCountOutputType without action
   */
  export type RefActivityCountOutputTypeCountRefChecklistItemActivityLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistItemActivityLinkWhereInput
  }


  /**
   * Count Type RefMaterialCountOutputType
   */

  export type RefMaterialCountOutputType = {
    activityUses: number
    RefChecklistItemMaterialLink: number
  }

  export type RefMaterialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityUses?: boolean | RefMaterialCountOutputTypeCountActivityUsesArgs
    RefChecklistItemMaterialLink?: boolean | RefMaterialCountOutputTypeCountRefChecklistItemMaterialLinkArgs
  }

  // Custom InputTypes
  /**
   * RefMaterialCountOutputType without action
   */
  export type RefMaterialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterialCountOutputType
     */
    select?: RefMaterialCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RefMaterialCountOutputType without action
   */
  export type RefMaterialCountOutputTypeCountActivityUsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefActivityMaterialWhereInput
  }

  /**
   * RefMaterialCountOutputType without action
   */
  export type RefMaterialCountOutputTypeCountRefChecklistItemMaterialLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistItemMaterialLinkWhereInput
  }


  /**
   * Models
   */

  /**
   * Model State
   */

  export type AggregateState = {
    _count: StateCountAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  export type StateMinAggregateOutputType = {
    stateId: string | null
    code: string | null
    name: string | null
    type: $Enums.StateType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StateMaxAggregateOutputType = {
    stateId: string | null
    code: string | null
    name: string | null
    type: $Enums.StateType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StateCountAggregateOutputType = {
    stateId: number
    code: number
    name: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StateMinAggregateInputType = {
    stateId?: true
    code?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StateMaxAggregateInputType = {
    stateId?: true
    code?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StateCountAggregateInputType = {
    stateId?: true
    code?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which State to aggregate.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned States
    **/
    _count?: true | StateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StateMaxAggregateInputType
  }

  export type GetStateAggregateType<T extends StateAggregateArgs> = {
        [P in keyof T & keyof AggregateState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateState[P]>
      : GetScalarType<T[P], AggregateState[P]>
  }




  export type StateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StateWhereInput
    orderBy?: StateOrderByWithAggregationInput | StateOrderByWithAggregationInput[]
    by: StateScalarFieldEnum[] | StateScalarFieldEnum
    having?: StateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StateCountAggregateInputType | true
    _min?: StateMinAggregateInputType
    _max?: StateMaxAggregateInputType
  }

  export type StateGroupByOutputType = {
    stateId: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt: Date
    updatedAt: Date
    _count: StateCountAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  type GetStateGroupByPayload<T extends StateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StateGroupByOutputType[P]>
            : GetScalarType<T[P], StateGroupByOutputType[P]>
        }
      >
    >


  export type StateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stateId?: boolean
    code?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    districts?: boolean | State$districtsArgs<ExtArgs>
    users?: boolean | State$usersArgs<ExtArgs>
    companies?: boolean | State$companiesArgs<ExtArgs>
    projects?: boolean | State$projectsArgs<ExtArgs>
    _count?: boolean | StateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["state"]>

  export type StateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stateId?: boolean
    code?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["state"]>

  export type StateSelectScalar = {
    stateId?: boolean
    code?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    districts?: boolean | State$districtsArgs<ExtArgs>
    users?: boolean | State$usersArgs<ExtArgs>
    companies?: boolean | State$companiesArgs<ExtArgs>
    projects?: boolean | State$projectsArgs<ExtArgs>
    _count?: boolean | StateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "State"
    objects: {
      districts: Prisma.$DistrictPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      companies: Prisma.$CompanyPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      stateId: string
      code: string
      name: string
      type: $Enums.StateType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["state"]>
    composites: {}
  }

  type StateGetPayload<S extends boolean | null | undefined | StateDefaultArgs> = $Result.GetResult<Prisma.$StatePayload, S>

  type StateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StateCountAggregateInputType | true
    }

  export interface StateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['State'], meta: { name: 'State' } }
    /**
     * Find zero or one State that matches the filter.
     * @param {StateFindUniqueArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StateFindUniqueArgs>(args: SelectSubset<T, StateFindUniqueArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one State that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StateFindUniqueOrThrowArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StateFindUniqueOrThrowArgs>(args: SelectSubset<T, StateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first State that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StateFindFirstArgs>(args?: SelectSubset<T, StateFindFirstArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first State that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstOrThrowArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StateFindFirstOrThrowArgs>(args?: SelectSubset<T, StateFindFirstOrThrowArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more States that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all States
     * const states = await prisma.state.findMany()
     * 
     * // Get first 10 States
     * const states = await prisma.state.findMany({ take: 10 })
     * 
     * // Only select the `stateId`
     * const stateWithStateIdOnly = await prisma.state.findMany({ select: { stateId: true } })
     * 
     */
    findMany<T extends StateFindManyArgs>(args?: SelectSubset<T, StateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a State.
     * @param {StateCreateArgs} args - Arguments to create a State.
     * @example
     * // Create one State
     * const State = await prisma.state.create({
     *   data: {
     *     // ... data to create a State
     *   }
     * })
     * 
     */
    create<T extends StateCreateArgs>(args: SelectSubset<T, StateCreateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many States.
     * @param {StateCreateManyArgs} args - Arguments to create many States.
     * @example
     * // Create many States
     * const state = await prisma.state.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StateCreateManyArgs>(args?: SelectSubset<T, StateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many States and returns the data saved in the database.
     * @param {StateCreateManyAndReturnArgs} args - Arguments to create many States.
     * @example
     * // Create many States
     * const state = await prisma.state.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many States and only return the `stateId`
     * const stateWithStateIdOnly = await prisma.state.createManyAndReturn({ 
     *   select: { stateId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StateCreateManyAndReturnArgs>(args?: SelectSubset<T, StateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a State.
     * @param {StateDeleteArgs} args - Arguments to delete one State.
     * @example
     * // Delete one State
     * const State = await prisma.state.delete({
     *   where: {
     *     // ... filter to delete one State
     *   }
     * })
     * 
     */
    delete<T extends StateDeleteArgs>(args: SelectSubset<T, StateDeleteArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one State.
     * @param {StateUpdateArgs} args - Arguments to update one State.
     * @example
     * // Update one State
     * const state = await prisma.state.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StateUpdateArgs>(args: SelectSubset<T, StateUpdateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more States.
     * @param {StateDeleteManyArgs} args - Arguments to filter States to delete.
     * @example
     * // Delete a few States
     * const { count } = await prisma.state.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StateDeleteManyArgs>(args?: SelectSubset<T, StateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many States
     * const state = await prisma.state.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StateUpdateManyArgs>(args: SelectSubset<T, StateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one State.
     * @param {StateUpsertArgs} args - Arguments to update or create a State.
     * @example
     * // Update or create a State
     * const state = await prisma.state.upsert({
     *   create: {
     *     // ... data to create a State
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the State we want to update
     *   }
     * })
     */
    upsert<T extends StateUpsertArgs>(args: SelectSubset<T, StateUpsertArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateCountArgs} args - Arguments to filter States to count.
     * @example
     * // Count the number of States
     * const count = await prisma.state.count({
     *   where: {
     *     // ... the filter for the States we want to count
     *   }
     * })
    **/
    count<T extends StateCountArgs>(
      args?: Subset<T, StateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StateAggregateArgs>(args: Subset<T, StateAggregateArgs>): Prisma.PrismaPromise<GetStateAggregateType<T>>

    /**
     * Group by State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StateGroupByArgs['orderBy'] }
        : { orderBy?: StateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the State model
   */
  readonly fields: StateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for State.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    districts<T extends State$districtsArgs<ExtArgs> = {}>(args?: Subset<T, State$districtsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends State$usersArgs<ExtArgs> = {}>(args?: Subset<T, State$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    companies<T extends State$companiesArgs<ExtArgs> = {}>(args?: Subset<T, State$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany"> | Null>
    projects<T extends State$projectsArgs<ExtArgs> = {}>(args?: Subset<T, State$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the State model
   */ 
  interface StateFieldRefs {
    readonly stateId: FieldRef<"State", 'String'>
    readonly code: FieldRef<"State", 'String'>
    readonly name: FieldRef<"State", 'String'>
    readonly type: FieldRef<"State", 'StateType'>
    readonly createdAt: FieldRef<"State", 'DateTime'>
    readonly updatedAt: FieldRef<"State", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * State findUnique
   */
  export type StateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State findUniqueOrThrow
   */
  export type StateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State findFirst
   */
  export type StateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     */
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State findFirstOrThrow
   */
  export type StateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which State to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     */
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State findMany
   */
  export type StateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter, which States to fetch.
     */
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     */
    orderBy?: StateOrderByWithRelationInput | StateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing States.
     */
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     */
    skip?: number
    distinct?: StateScalarFieldEnum | StateScalarFieldEnum[]
  }

  /**
   * State create
   */
  export type StateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The data needed to create a State.
     */
    data: XOR<StateCreateInput, StateUncheckedCreateInput>
  }

  /**
   * State createMany
   */
  export type StateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many States.
     */
    data: StateCreateManyInput | StateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * State createManyAndReturn
   */
  export type StateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many States.
     */
    data: StateCreateManyInput | StateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * State update
   */
  export type StateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The data needed to update a State.
     */
    data: XOR<StateUpdateInput, StateUncheckedUpdateInput>
    /**
     * Choose, which State to update.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State updateMany
   */
  export type StateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update States.
     */
    data: XOR<StateUpdateManyMutationInput, StateUncheckedUpdateManyInput>
    /**
     * Filter which States to update
     */
    where?: StateWhereInput
  }

  /**
   * State upsert
   */
  export type StateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * The filter to search for the State to update in case it exists.
     */
    where: StateWhereUniqueInput
    /**
     * In case the State found by the `where` argument doesn't exist, create a new State with this data.
     */
    create: XOR<StateCreateInput, StateUncheckedCreateInput>
    /**
     * In case the State was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StateUpdateInput, StateUncheckedUpdateInput>
  }

  /**
   * State delete
   */
  export type StateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    /**
     * Filter which State to delete.
     */
    where: StateWhereUniqueInput
  }

  /**
   * State deleteMany
   */
  export type StateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which States to delete
     */
    where?: StateWhereInput
  }

  /**
   * State.districts
   */
  export type State$districtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    where?: DistrictWhereInput
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    cursor?: DistrictWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }

  /**
   * State.users
   */
  export type State$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * State.companies
   */
  export type State$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * State.projects
   */
  export type State$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * State without action
   */
  export type StateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
  }


  /**
   * Model District
   */

  export type AggregateDistrict = {
    _count: DistrictCountAggregateOutputType | null
    _min: DistrictMinAggregateOutputType | null
    _max: DistrictMaxAggregateOutputType | null
  }

  export type DistrictMinAggregateOutputType = {
    districtId: string | null
    name: string | null
    stateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DistrictMaxAggregateOutputType = {
    districtId: string | null
    name: string | null
    stateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DistrictCountAggregateOutputType = {
    districtId: number
    name: number
    stateId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DistrictMinAggregateInputType = {
    districtId?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DistrictMaxAggregateInputType = {
    districtId?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DistrictCountAggregateInputType = {
    districtId?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DistrictAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which District to aggregate.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Districts
    **/
    _count?: true | DistrictCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistrictMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistrictMaxAggregateInputType
  }

  export type GetDistrictAggregateType<T extends DistrictAggregateArgs> = {
        [P in keyof T & keyof AggregateDistrict]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistrict[P]>
      : GetScalarType<T[P], AggregateDistrict[P]>
  }




  export type DistrictGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistrictWhereInput
    orderBy?: DistrictOrderByWithAggregationInput | DistrictOrderByWithAggregationInput[]
    by: DistrictScalarFieldEnum[] | DistrictScalarFieldEnum
    having?: DistrictScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistrictCountAggregateInputType | true
    _min?: DistrictMinAggregateInputType
    _max?: DistrictMaxAggregateInputType
  }

  export type DistrictGroupByOutputType = {
    districtId: string
    name: string
    stateId: string
    createdAt: Date
    updatedAt: Date
    _count: DistrictCountAggregateOutputType | null
    _min: DistrictMinAggregateOutputType | null
    _max: DistrictMaxAggregateOutputType | null
  }

  type GetDistrictGroupByPayload<T extends DistrictGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistrictGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistrictGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistrictGroupByOutputType[P]>
            : GetScalarType<T[P], DistrictGroupByOutputType[P]>
        }
      >
    >


  export type DistrictSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    districtId?: boolean
    name?: boolean
    stateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | StateDefaultArgs<ExtArgs>
    users?: boolean | District$usersArgs<ExtArgs>
    companies?: boolean | District$companiesArgs<ExtArgs>
    projects?: boolean | District$projectsArgs<ExtArgs>
    _count?: boolean | DistrictCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["district"]>

  export type DistrictSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    districtId?: boolean
    name?: boolean
    stateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | StateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["district"]>

  export type DistrictSelectScalar = {
    districtId?: boolean
    name?: boolean
    stateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DistrictInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | StateDefaultArgs<ExtArgs>
    users?: boolean | District$usersArgs<ExtArgs>
    companies?: boolean | District$companiesArgs<ExtArgs>
    projects?: boolean | District$projectsArgs<ExtArgs>
    _count?: boolean | DistrictCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DistrictIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | StateDefaultArgs<ExtArgs>
  }

  export type $DistrictPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "District"
    objects: {
      state: Prisma.$StatePayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
      companies: Prisma.$CompanyPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      districtId: string
      name: string
      stateId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["district"]>
    composites: {}
  }

  type DistrictGetPayload<S extends boolean | null | undefined | DistrictDefaultArgs> = $Result.GetResult<Prisma.$DistrictPayload, S>

  type DistrictCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DistrictFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DistrictCountAggregateInputType | true
    }

  export interface DistrictDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['District'], meta: { name: 'District' } }
    /**
     * Find zero or one District that matches the filter.
     * @param {DistrictFindUniqueArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DistrictFindUniqueArgs>(args: SelectSubset<T, DistrictFindUniqueArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one District that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DistrictFindUniqueOrThrowArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DistrictFindUniqueOrThrowArgs>(args: SelectSubset<T, DistrictFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first District that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindFirstArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DistrictFindFirstArgs>(args?: SelectSubset<T, DistrictFindFirstArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first District that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindFirstOrThrowArgs} args - Arguments to find a District
     * @example
     * // Get one District
     * const district = await prisma.district.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DistrictFindFirstOrThrowArgs>(args?: SelectSubset<T, DistrictFindFirstOrThrowArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Districts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Districts
     * const districts = await prisma.district.findMany()
     * 
     * // Get first 10 Districts
     * const districts = await prisma.district.findMany({ take: 10 })
     * 
     * // Only select the `districtId`
     * const districtWithDistrictIdOnly = await prisma.district.findMany({ select: { districtId: true } })
     * 
     */
    findMany<T extends DistrictFindManyArgs>(args?: SelectSubset<T, DistrictFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a District.
     * @param {DistrictCreateArgs} args - Arguments to create a District.
     * @example
     * // Create one District
     * const District = await prisma.district.create({
     *   data: {
     *     // ... data to create a District
     *   }
     * })
     * 
     */
    create<T extends DistrictCreateArgs>(args: SelectSubset<T, DistrictCreateArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Districts.
     * @param {DistrictCreateManyArgs} args - Arguments to create many Districts.
     * @example
     * // Create many Districts
     * const district = await prisma.district.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DistrictCreateManyArgs>(args?: SelectSubset<T, DistrictCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Districts and returns the data saved in the database.
     * @param {DistrictCreateManyAndReturnArgs} args - Arguments to create many Districts.
     * @example
     * // Create many Districts
     * const district = await prisma.district.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Districts and only return the `districtId`
     * const districtWithDistrictIdOnly = await prisma.district.createManyAndReturn({ 
     *   select: { districtId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DistrictCreateManyAndReturnArgs>(args?: SelectSubset<T, DistrictCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a District.
     * @param {DistrictDeleteArgs} args - Arguments to delete one District.
     * @example
     * // Delete one District
     * const District = await prisma.district.delete({
     *   where: {
     *     // ... filter to delete one District
     *   }
     * })
     * 
     */
    delete<T extends DistrictDeleteArgs>(args: SelectSubset<T, DistrictDeleteArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one District.
     * @param {DistrictUpdateArgs} args - Arguments to update one District.
     * @example
     * // Update one District
     * const district = await prisma.district.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DistrictUpdateArgs>(args: SelectSubset<T, DistrictUpdateArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Districts.
     * @param {DistrictDeleteManyArgs} args - Arguments to filter Districts to delete.
     * @example
     * // Delete a few Districts
     * const { count } = await prisma.district.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DistrictDeleteManyArgs>(args?: SelectSubset<T, DistrictDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Districts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Districts
     * const district = await prisma.district.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DistrictUpdateManyArgs>(args: SelectSubset<T, DistrictUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one District.
     * @param {DistrictUpsertArgs} args - Arguments to update or create a District.
     * @example
     * // Update or create a District
     * const district = await prisma.district.upsert({
     *   create: {
     *     // ... data to create a District
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the District we want to update
     *   }
     * })
     */
    upsert<T extends DistrictUpsertArgs>(args: SelectSubset<T, DistrictUpsertArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Districts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictCountArgs} args - Arguments to filter Districts to count.
     * @example
     * // Count the number of Districts
     * const count = await prisma.district.count({
     *   where: {
     *     // ... the filter for the Districts we want to count
     *   }
     * })
    **/
    count<T extends DistrictCountArgs>(
      args?: Subset<T, DistrictCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistrictCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a District.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistrictAggregateArgs>(args: Subset<T, DistrictAggregateArgs>): Prisma.PrismaPromise<GetDistrictAggregateType<T>>

    /**
     * Group by District.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistrictGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistrictGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistrictGroupByArgs['orderBy'] }
        : { orderBy?: DistrictGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistrictGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistrictGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the District model
   */
  readonly fields: DistrictFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for District.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistrictClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    state<T extends StateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StateDefaultArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    users<T extends District$usersArgs<ExtArgs> = {}>(args?: Subset<T, District$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    companies<T extends District$companiesArgs<ExtArgs> = {}>(args?: Subset<T, District$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany"> | Null>
    projects<T extends District$projectsArgs<ExtArgs> = {}>(args?: Subset<T, District$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the District model
   */ 
  interface DistrictFieldRefs {
    readonly districtId: FieldRef<"District", 'String'>
    readonly name: FieldRef<"District", 'String'>
    readonly stateId: FieldRef<"District", 'String'>
    readonly createdAt: FieldRef<"District", 'DateTime'>
    readonly updatedAt: FieldRef<"District", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * District findUnique
   */
  export type DistrictFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where: DistrictWhereUniqueInput
  }

  /**
   * District findUniqueOrThrow
   */
  export type DistrictFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where: DistrictWhereUniqueInput
  }

  /**
   * District findFirst
   */
  export type DistrictFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Districts.
     */
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }

  /**
   * District findFirstOrThrow
   */
  export type DistrictFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which District to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Districts.
     */
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }

  /**
   * District findMany
   */
  export type DistrictFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter, which Districts to fetch.
     */
    where?: DistrictWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Districts to fetch.
     */
    orderBy?: DistrictOrderByWithRelationInput | DistrictOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Districts.
     */
    cursor?: DistrictWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Districts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Districts.
     */
    skip?: number
    distinct?: DistrictScalarFieldEnum | DistrictScalarFieldEnum[]
  }

  /**
   * District create
   */
  export type DistrictCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The data needed to create a District.
     */
    data: XOR<DistrictCreateInput, DistrictUncheckedCreateInput>
  }

  /**
   * District createMany
   */
  export type DistrictCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Districts.
     */
    data: DistrictCreateManyInput | DistrictCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * District createManyAndReturn
   */
  export type DistrictCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Districts.
     */
    data: DistrictCreateManyInput | DistrictCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * District update
   */
  export type DistrictUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The data needed to update a District.
     */
    data: XOR<DistrictUpdateInput, DistrictUncheckedUpdateInput>
    /**
     * Choose, which District to update.
     */
    where: DistrictWhereUniqueInput
  }

  /**
   * District updateMany
   */
  export type DistrictUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Districts.
     */
    data: XOR<DistrictUpdateManyMutationInput, DistrictUncheckedUpdateManyInput>
    /**
     * Filter which Districts to update
     */
    where?: DistrictWhereInput
  }

  /**
   * District upsert
   */
  export type DistrictUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * The filter to search for the District to update in case it exists.
     */
    where: DistrictWhereUniqueInput
    /**
     * In case the District found by the `where` argument doesn't exist, create a new District with this data.
     */
    create: XOR<DistrictCreateInput, DistrictUncheckedCreateInput>
    /**
     * In case the District was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistrictUpdateInput, DistrictUncheckedUpdateInput>
  }

  /**
   * District delete
   */
  export type DistrictDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    /**
     * Filter which District to delete.
     */
    where: DistrictWhereUniqueInput
  }

  /**
   * District deleteMany
   */
  export type DistrictDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Districts to delete
     */
    where?: DistrictWhereInput
  }

  /**
   * District.users
   */
  export type District$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * District.companies
   */
  export type District$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * District.projects
   */
  export type District$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * District without action
   */
  export type DistrictDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    userId: string | null
    code: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    countryCode: string | null
    phone: string | null
    email: string | null
    preferredLanguage: $Enums.PreferredLanguage | null
    profilePhoto: string | null
    stateId: string | null
    districtId: string | null
    cityTown: string | null
    pin: string | null
    operatingZone: $Enums.OperatingZone | null
    address: string | null
    isClient: boolean | null
    isServiceProvider: boolean | null
    userStatus: $Enums.UserStatus | null
    passwordHash: string | null
    isSuperAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userRole: $Enums.UserRole | null
  }

  export type UserMaxAggregateOutputType = {
    userId: string | null
    code: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    countryCode: string | null
    phone: string | null
    email: string | null
    preferredLanguage: $Enums.PreferredLanguage | null
    profilePhoto: string | null
    stateId: string | null
    districtId: string | null
    cityTown: string | null
    pin: string | null
    operatingZone: $Enums.OperatingZone | null
    address: string | null
    isClient: boolean | null
    isServiceProvider: boolean | null
    userStatus: $Enums.UserStatus | null
    passwordHash: string | null
    isSuperAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userRole: $Enums.UserRole | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    code: number
    firstName: number
    middleName: number
    lastName: number
    countryCode: number
    phone: number
    email: number
    preferredLanguage: number
    profilePhoto: number
    stateId: number
    districtId: number
    cityTown: number
    pin: number
    operatingZone: number
    address: number
    isClient: number
    isServiceProvider: number
    userStatus: number
    passwordHash: number
    isSuperAdmin: number
    createdAt: number
    updatedAt: number
    userRole: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    userId?: true
    code?: true
    firstName?: true
    middleName?: true
    lastName?: true
    countryCode?: true
    phone?: true
    email?: true
    preferredLanguage?: true
    profilePhoto?: true
    stateId?: true
    districtId?: true
    cityTown?: true
    pin?: true
    operatingZone?: true
    address?: true
    isClient?: true
    isServiceProvider?: true
    userStatus?: true
    passwordHash?: true
    isSuperAdmin?: true
    createdAt?: true
    updatedAt?: true
    userRole?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    code?: true
    firstName?: true
    middleName?: true
    lastName?: true
    countryCode?: true
    phone?: true
    email?: true
    preferredLanguage?: true
    profilePhoto?: true
    stateId?: true
    districtId?: true
    cityTown?: true
    pin?: true
    operatingZone?: true
    address?: true
    isClient?: true
    isServiceProvider?: true
    userStatus?: true
    passwordHash?: true
    isSuperAdmin?: true
    createdAt?: true
    updatedAt?: true
    userRole?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    code?: true
    firstName?: true
    middleName?: true
    lastName?: true
    countryCode?: true
    phone?: true
    email?: true
    preferredLanguage?: true
    profilePhoto?: true
    stateId?: true
    districtId?: true
    cityTown?: true
    pin?: true
    operatingZone?: true
    address?: true
    isClient?: true
    isServiceProvider?: true
    userStatus?: true
    passwordHash?: true
    isSuperAdmin?: true
    createdAt?: true
    updatedAt?: true
    userRole?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: string
    code: string | null
    firstName: string
    middleName: string | null
    lastName: string | null
    countryCode: string
    phone: string
    email: string | null
    preferredLanguage: $Enums.PreferredLanguage | null
    profilePhoto: string | null
    stateId: string | null
    districtId: string | null
    cityTown: string | null
    pin: string | null
    operatingZone: $Enums.OperatingZone | null
    address: string | null
    isClient: boolean | null
    isServiceProvider: boolean | null
    userStatus: $Enums.UserStatus
    passwordHash: string | null
    isSuperAdmin: boolean | null
    createdAt: Date
    updatedAt: Date
    userRole: $Enums.UserRole | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    code?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phone?: boolean
    email?: boolean
    preferredLanguage?: boolean
    profilePhoto?: boolean
    stateId?: boolean
    districtId?: boolean
    cityTown?: boolean
    pin?: boolean
    operatingZone?: boolean
    address?: boolean
    isClient?: boolean
    isServiceProvider?: boolean
    userStatus?: boolean
    passwordHash?: boolean
    isSuperAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRole?: boolean
    state?: boolean | User$stateArgs<ExtArgs>
    district?: boolean | User$districtArgs<ExtArgs>
    projectsAsClient?: boolean | User$projectsAsClientArgs<ExtArgs>
    companiesAsServiceProvider?: boolean | User$companiesAsServiceProviderArgs<ExtArgs>
    userProjects?: boolean | User$userProjectsArgs<ExtArgs>
    userCompanies?: boolean | User$userCompaniesArgs<ExtArgs>
    userRoleMemberships?: boolean | User$userRoleMembershipsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    code?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phone?: boolean
    email?: boolean
    preferredLanguage?: boolean
    profilePhoto?: boolean
    stateId?: boolean
    districtId?: boolean
    cityTown?: boolean
    pin?: boolean
    operatingZone?: boolean
    address?: boolean
    isClient?: boolean
    isServiceProvider?: boolean
    userStatus?: boolean
    passwordHash?: boolean
    isSuperAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRole?: boolean
    state?: boolean | User$stateArgs<ExtArgs>
    district?: boolean | User$districtArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    code?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phone?: boolean
    email?: boolean
    preferredLanguage?: boolean
    profilePhoto?: boolean
    stateId?: boolean
    districtId?: boolean
    cityTown?: boolean
    pin?: boolean
    operatingZone?: boolean
    address?: boolean
    isClient?: boolean
    isServiceProvider?: boolean
    userStatus?: boolean
    passwordHash?: boolean
    isSuperAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRole?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | User$stateArgs<ExtArgs>
    district?: boolean | User$districtArgs<ExtArgs>
    projectsAsClient?: boolean | User$projectsAsClientArgs<ExtArgs>
    companiesAsServiceProvider?: boolean | User$companiesAsServiceProviderArgs<ExtArgs>
    userProjects?: boolean | User$userProjectsArgs<ExtArgs>
    userCompanies?: boolean | User$userCompaniesArgs<ExtArgs>
    userRoleMemberships?: boolean | User$userRoleMembershipsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | User$stateArgs<ExtArgs>
    district?: boolean | User$districtArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      state: Prisma.$StatePayload<ExtArgs> | null
      district: Prisma.$DistrictPayload<ExtArgs> | null
      projectsAsClient: Prisma.$ProjectPayload<ExtArgs>[]
      companiesAsServiceProvider: Prisma.$CompanyPayload<ExtArgs>[]
      userProjects: Prisma.$UserProjectPayload<ExtArgs>[]
      userCompanies: Prisma.$UserCompanyPayload<ExtArgs>[]
      userRoleMemberships: Prisma.$UserRoleMembershipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      code: string | null
      firstName: string
      middleName: string | null
      lastName: string | null
      countryCode: string
      phone: string
      email: string | null
      preferredLanguage: $Enums.PreferredLanguage | null
      profilePhoto: string | null
      stateId: string | null
      districtId: string | null
      cityTown: string | null
      pin: string | null
      operatingZone: $Enums.OperatingZone | null
      address: string | null
      isClient: boolean | null
      isServiceProvider: boolean | null
      userStatus: $Enums.UserStatus
      passwordHash: string | null
      isSuperAdmin: boolean | null
      createdAt: Date
      updatedAt: Date
      userRole: $Enums.UserRole | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    state<T extends User$stateArgs<ExtArgs> = {}>(args?: Subset<T, User$stateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    district<T extends User$districtArgs<ExtArgs> = {}>(args?: Subset<T, User$districtArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projectsAsClient<T extends User$projectsAsClientArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsAsClientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    companiesAsServiceProvider<T extends User$companiesAsServiceProviderArgs<ExtArgs> = {}>(args?: Subset<T, User$companiesAsServiceProviderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany"> | Null>
    userProjects<T extends User$userProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$userProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findMany"> | Null>
    userCompanies<T extends User$userCompaniesArgs<ExtArgs> = {}>(args?: Subset<T, User$userCompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findMany"> | Null>
    userRoleMemberships<T extends User$userRoleMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$userRoleMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'String'>
    readonly code: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly middleName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly countryCode: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly preferredLanguage: FieldRef<"User", 'PreferredLanguage'>
    readonly profilePhoto: FieldRef<"User", 'String'>
    readonly stateId: FieldRef<"User", 'String'>
    readonly districtId: FieldRef<"User", 'String'>
    readonly cityTown: FieldRef<"User", 'String'>
    readonly pin: FieldRef<"User", 'String'>
    readonly operatingZone: FieldRef<"User", 'OperatingZone'>
    readonly address: FieldRef<"User", 'String'>
    readonly isClient: FieldRef<"User", 'Boolean'>
    readonly isServiceProvider: FieldRef<"User", 'Boolean'>
    readonly userStatus: FieldRef<"User", 'UserStatus'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly isSuperAdmin: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly userRole: FieldRef<"User", 'UserRole'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.state
   */
  export type User$stateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    where?: StateWhereInput
  }

  /**
   * User.district
   */
  export type User$districtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    where?: DistrictWhereInput
  }

  /**
   * User.projectsAsClient
   */
  export type User$projectsAsClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.companiesAsServiceProvider
   */
  export type User$companiesAsServiceProviderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * User.userProjects
   */
  export type User$userProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    where?: UserProjectWhereInput
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    cursor?: UserProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * User.userCompanies
   */
  export type User$userCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    where?: UserCompanyWhereInput
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    cursor?: UserCompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * User.userRoleMemberships
   */
  export type User$userRoleMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    where?: UserRoleMembershipWhereInput
    orderBy?: UserRoleMembershipOrderByWithRelationInput | UserRoleMembershipOrderByWithRelationInput[]
    cursor?: UserRoleMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleMembershipScalarFieldEnum | UserRoleMembershipScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    companyId: string | null
    name: string | null
    status: $Enums.CompanyStatus | null
    website: string | null
    companyRole: $Enums.CompanyRole | null
    gstin: string | null
    pan: string | null
    cin: string | null
    primaryContact: string | null
    contactMobile: string | null
    contactEmail: string | null
    stateId: string | null
    districtId: string | null
    address: string | null
    pin: string | null
    notes: string | null
    userId: string | null
    companyCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    companyId: string | null
    name: string | null
    status: $Enums.CompanyStatus | null
    website: string | null
    companyRole: $Enums.CompanyRole | null
    gstin: string | null
    pan: string | null
    cin: string | null
    primaryContact: string | null
    contactMobile: string | null
    contactEmail: string | null
    stateId: string | null
    districtId: string | null
    address: string | null
    pin: string | null
    notes: string | null
    userId: string | null
    companyCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    companyId: number
    name: number
    status: number
    website: number
    companyRole: number
    gstin: number
    pan: number
    cin: number
    primaryContact: number
    contactMobile: number
    contactEmail: number
    stateId: number
    districtId: number
    address: number
    pin: number
    notes: number
    userId: number
    companyCode: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    companyId?: true
    name?: true
    status?: true
    website?: true
    companyRole?: true
    gstin?: true
    pan?: true
    cin?: true
    primaryContact?: true
    contactMobile?: true
    contactEmail?: true
    stateId?: true
    districtId?: true
    address?: true
    pin?: true
    notes?: true
    userId?: true
    companyCode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    companyId?: true
    name?: true
    status?: true
    website?: true
    companyRole?: true
    gstin?: true
    pan?: true
    cin?: true
    primaryContact?: true
    contactMobile?: true
    contactEmail?: true
    stateId?: true
    districtId?: true
    address?: true
    pin?: true
    notes?: true
    userId?: true
    companyCode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    companyId?: true
    name?: true
    status?: true
    website?: true
    companyRole?: true
    gstin?: true
    pan?: true
    cin?: true
    primaryContact?: true
    contactMobile?: true
    contactEmail?: true
    stateId?: true
    districtId?: true
    address?: true
    pin?: true
    notes?: true
    userId?: true
    companyCode?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    companyId: string
    name: string
    status: $Enums.CompanyStatus
    website: string | null
    companyRole: $Enums.CompanyRole | null
    gstin: string | null
    pan: string | null
    cin: string | null
    primaryContact: string | null
    contactMobile: string | null
    contactEmail: string | null
    stateId: string | null
    districtId: string | null
    address: string | null
    pin: string | null
    notes: string | null
    userId: string | null
    companyCode: string | null
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    companyId?: boolean
    name?: boolean
    status?: boolean
    website?: boolean
    companyRole?: boolean
    gstin?: boolean
    pan?: boolean
    cin?: boolean
    primaryContact?: boolean
    contactMobile?: boolean
    contactEmail?: boolean
    stateId?: boolean
    districtId?: boolean
    address?: boolean
    pin?: boolean
    notes?: boolean
    userId?: boolean
    companyCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | Company$stateArgs<ExtArgs>
    district?: boolean | Company$districtArgs<ExtArgs>
    serviceProvider?: boolean | Company$serviceProviderArgs<ExtArgs>
    projects?: boolean | Company$projectsArgs<ExtArgs>
    userCompanies?: boolean | Company$userCompaniesArgs<ExtArgs>
    userRoleMemberships?: boolean | Company$userRoleMembershipsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    companyId?: boolean
    name?: boolean
    status?: boolean
    website?: boolean
    companyRole?: boolean
    gstin?: boolean
    pan?: boolean
    cin?: boolean
    primaryContact?: boolean
    contactMobile?: boolean
    contactEmail?: boolean
    stateId?: boolean
    districtId?: boolean
    address?: boolean
    pin?: boolean
    notes?: boolean
    userId?: boolean
    companyCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    state?: boolean | Company$stateArgs<ExtArgs>
    district?: boolean | Company$districtArgs<ExtArgs>
    serviceProvider?: boolean | Company$serviceProviderArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    companyId?: boolean
    name?: boolean
    status?: boolean
    website?: boolean
    companyRole?: boolean
    gstin?: boolean
    pan?: boolean
    cin?: boolean
    primaryContact?: boolean
    contactMobile?: boolean
    contactEmail?: boolean
    stateId?: boolean
    districtId?: boolean
    address?: boolean
    pin?: boolean
    notes?: boolean
    userId?: boolean
    companyCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | Company$stateArgs<ExtArgs>
    district?: boolean | Company$districtArgs<ExtArgs>
    serviceProvider?: boolean | Company$serviceProviderArgs<ExtArgs>
    projects?: boolean | Company$projectsArgs<ExtArgs>
    userCompanies?: boolean | Company$userCompaniesArgs<ExtArgs>
    userRoleMemberships?: boolean | Company$userRoleMembershipsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state?: boolean | Company$stateArgs<ExtArgs>
    district?: boolean | Company$districtArgs<ExtArgs>
    serviceProvider?: boolean | Company$serviceProviderArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      state: Prisma.$StatePayload<ExtArgs> | null
      district: Prisma.$DistrictPayload<ExtArgs> | null
      serviceProvider: Prisma.$UserPayload<ExtArgs> | null
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      userCompanies: Prisma.$UserCompanyPayload<ExtArgs>[]
      userRoleMemberships: Prisma.$UserRoleMembershipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      companyId: string
      name: string
      status: $Enums.CompanyStatus
      website: string | null
      companyRole: $Enums.CompanyRole | null
      gstin: string | null
      pan: string | null
      cin: string | null
      primaryContact: string | null
      contactMobile: string | null
      contactEmail: string | null
      stateId: string | null
      districtId: string | null
      address: string | null
      pin: string | null
      notes: string | null
      userId: string | null
      companyCode: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `companyId`
     * const companyWithCompanyIdOnly = await prisma.company.findMany({ select: { companyId: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `companyId`
     * const companyWithCompanyIdOnly = await prisma.company.createManyAndReturn({ 
     *   select: { companyId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    state<T extends Company$stateArgs<ExtArgs> = {}>(args?: Subset<T, Company$stateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    district<T extends Company$districtArgs<ExtArgs> = {}>(args?: Subset<T, Company$districtArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    serviceProvider<T extends Company$serviceProviderArgs<ExtArgs> = {}>(args?: Subset<T, Company$serviceProviderArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projects<T extends Company$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Company$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    userCompanies<T extends Company$userCompaniesArgs<ExtArgs> = {}>(args?: Subset<T, Company$userCompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findMany"> | Null>
    userRoleMemberships<T extends Company$userRoleMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, Company$userRoleMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly companyId: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly status: FieldRef<"Company", 'CompanyStatus'>
    readonly website: FieldRef<"Company", 'String'>
    readonly companyRole: FieldRef<"Company", 'CompanyRole'>
    readonly gstin: FieldRef<"Company", 'String'>
    readonly pan: FieldRef<"Company", 'String'>
    readonly cin: FieldRef<"Company", 'String'>
    readonly primaryContact: FieldRef<"Company", 'String'>
    readonly contactMobile: FieldRef<"Company", 'String'>
    readonly contactEmail: FieldRef<"Company", 'String'>
    readonly stateId: FieldRef<"Company", 'String'>
    readonly districtId: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly pin: FieldRef<"Company", 'String'>
    readonly notes: FieldRef<"Company", 'String'>
    readonly userId: FieldRef<"Company", 'String'>
    readonly companyCode: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company.state
   */
  export type Company$stateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    where?: StateWhereInput
  }

  /**
   * Company.district
   */
  export type Company$districtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    where?: DistrictWhereInput
  }

  /**
   * Company.serviceProvider
   */
  export type Company$serviceProviderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Company.projects
   */
  export type Company$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Company.userCompanies
   */
  export type Company$userCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    where?: UserCompanyWhereInput
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    cursor?: UserCompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * Company.userRoleMemberships
   */
  export type Company$userRoleMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    where?: UserRoleMembershipWhereInput
    orderBy?: UserRoleMembershipOrderByWithRelationInput | UserRoleMembershipOrderByWithRelationInput[]
    cursor?: UserRoleMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleMembershipScalarFieldEnum | UserRoleMembershipScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
    contractValue: Decimal | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
  }

  export type ProjectSumAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
    contractValue: Decimal | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
  }

  export type ProjectMinAggregateOutputType = {
    projectId: string | null
    title: string | null
    code: string | null
    status: $Enums.ProjectStatus | null
    stage: $Enums.ProjectStage | null
    projectType: $Enums.ProjectType | null
    structureType: $Enums.StructureType | null
    constructionType: $Enums.ConstructionType | null
    contractType: $Enums.ContractType | null
    health: $Enums.ProjectHealth | null
    clientUserId: string | null
    clientCompanyId: string | null
    address: string | null
    cityTown: string | null
    stateId: string | null
    districtId: string | null
    pin: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    startDate: Date | null
    plannedCompletionDate: Date | null
    currency: $Enums.CurrencyCode | null
    contractValue: Decimal | null
    areaUnit: $Enums.AreaUnit | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    projectId: string | null
    title: string | null
    code: string | null
    status: $Enums.ProjectStatus | null
    stage: $Enums.ProjectStage | null
    projectType: $Enums.ProjectType | null
    structureType: $Enums.StructureType | null
    constructionType: $Enums.ConstructionType | null
    contractType: $Enums.ContractType | null
    health: $Enums.ProjectHealth | null
    clientUserId: string | null
    clientCompanyId: string | null
    address: string | null
    cityTown: string | null
    stateId: string | null
    districtId: string | null
    pin: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    startDate: Date | null
    plannedCompletionDate: Date | null
    currency: $Enums.CurrencyCode | null
    contractValue: Decimal | null
    areaUnit: $Enums.AreaUnit | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    projectId: number
    title: number
    code: number
    status: number
    stage: number
    projectType: number
    structureType: number
    constructionType: number
    contractType: number
    health: number
    clientUserId: number
    clientCompanyId: number
    address: number
    cityTown: number
    stateId: number
    districtId: number
    pin: number
    latitude: number
    longitude: number
    startDate: number
    plannedCompletionDate: number
    currency: number
    contractValue: number
    areaUnit: number
    plotArea: number
    builtUpArea: number
    floors: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    latitude?: true
    longitude?: true
    contractValue?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
  }

  export type ProjectSumAggregateInputType = {
    latitude?: true
    longitude?: true
    contractValue?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
  }

  export type ProjectMinAggregateInputType = {
    projectId?: true
    title?: true
    code?: true
    status?: true
    stage?: true
    projectType?: true
    structureType?: true
    constructionType?: true
    contractType?: true
    health?: true
    clientUserId?: true
    clientCompanyId?: true
    address?: true
    cityTown?: true
    stateId?: true
    districtId?: true
    pin?: true
    latitude?: true
    longitude?: true
    startDate?: true
    plannedCompletionDate?: true
    currency?: true
    contractValue?: true
    areaUnit?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    projectId?: true
    title?: true
    code?: true
    status?: true
    stage?: true
    projectType?: true
    structureType?: true
    constructionType?: true
    contractType?: true
    health?: true
    clientUserId?: true
    clientCompanyId?: true
    address?: true
    cityTown?: true
    stateId?: true
    districtId?: true
    pin?: true
    latitude?: true
    longitude?: true
    startDate?: true
    plannedCompletionDate?: true
    currency?: true
    contractValue?: true
    areaUnit?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    projectId?: true
    title?: true
    code?: true
    status?: true
    stage?: true
    projectType?: true
    structureType?: true
    constructionType?: true
    contractType?: true
    health?: true
    clientUserId?: true
    clientCompanyId?: true
    address?: true
    cityTown?: true
    stateId?: true
    districtId?: true
    pin?: true
    latitude?: true
    longitude?: true
    startDate?: true
    plannedCompletionDate?: true
    currency?: true
    contractValue?: true
    areaUnit?: true
    plotArea?: true
    builtUpArea?: true
    floors?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    projectId: string
    title: string
    code: string | null
    status: $Enums.ProjectStatus
    stage: $Enums.ProjectStage | null
    projectType: $Enums.ProjectType | null
    structureType: $Enums.StructureType | null
    constructionType: $Enums.ConstructionType | null
    contractType: $Enums.ContractType | null
    health: $Enums.ProjectHealth
    clientUserId: string | null
    clientCompanyId: string | null
    address: string | null
    cityTown: string | null
    stateId: string | null
    districtId: string | null
    pin: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    startDate: Date | null
    plannedCompletionDate: Date | null
    currency: $Enums.CurrencyCode | null
    contractValue: Decimal | null
    areaUnit: $Enums.AreaUnit | null
    plotArea: Decimal | null
    builtUpArea: Decimal | null
    floors: number | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    title?: boolean
    code?: boolean
    status?: boolean
    stage?: boolean
    projectType?: boolean
    structureType?: boolean
    constructionType?: boolean
    contractType?: boolean
    health?: boolean
    clientUserId?: boolean
    clientCompanyId?: boolean
    address?: boolean
    cityTown?: boolean
    stateId?: boolean
    districtId?: boolean
    pin?: boolean
    latitude?: boolean
    longitude?: boolean
    startDate?: boolean
    plannedCompletionDate?: boolean
    currency?: boolean
    contractValue?: boolean
    areaUnit?: boolean
    plotArea?: boolean
    builtUpArea?: boolean
    floors?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientUser?: boolean | Project$clientUserArgs<ExtArgs>
    clientCompany?: boolean | Project$clientCompanyArgs<ExtArgs>
    state?: boolean | Project$stateArgs<ExtArgs>
    district?: boolean | Project$districtArgs<ExtArgs>
    projectTags?: boolean | Project$projectTagsArgs<ExtArgs>
    userProjects?: boolean | Project$userProjectsArgs<ExtArgs>
    userRoleMemberships?: boolean | Project$userRoleMembershipsArgs<ExtArgs>
    PermissionProjectOverride?: boolean | Project$PermissionProjectOverrideArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    title?: boolean
    code?: boolean
    status?: boolean
    stage?: boolean
    projectType?: boolean
    structureType?: boolean
    constructionType?: boolean
    contractType?: boolean
    health?: boolean
    clientUserId?: boolean
    clientCompanyId?: boolean
    address?: boolean
    cityTown?: boolean
    stateId?: boolean
    districtId?: boolean
    pin?: boolean
    latitude?: boolean
    longitude?: boolean
    startDate?: boolean
    plannedCompletionDate?: boolean
    currency?: boolean
    contractValue?: boolean
    areaUnit?: boolean
    plotArea?: boolean
    builtUpArea?: boolean
    floors?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientUser?: boolean | Project$clientUserArgs<ExtArgs>
    clientCompany?: boolean | Project$clientCompanyArgs<ExtArgs>
    state?: boolean | Project$stateArgs<ExtArgs>
    district?: boolean | Project$districtArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    projectId?: boolean
    title?: boolean
    code?: boolean
    status?: boolean
    stage?: boolean
    projectType?: boolean
    structureType?: boolean
    constructionType?: boolean
    contractType?: boolean
    health?: boolean
    clientUserId?: boolean
    clientCompanyId?: boolean
    address?: boolean
    cityTown?: boolean
    stateId?: boolean
    districtId?: boolean
    pin?: boolean
    latitude?: boolean
    longitude?: boolean
    startDate?: boolean
    plannedCompletionDate?: boolean
    currency?: boolean
    contractValue?: boolean
    areaUnit?: boolean
    plotArea?: boolean
    builtUpArea?: boolean
    floors?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientUser?: boolean | Project$clientUserArgs<ExtArgs>
    clientCompany?: boolean | Project$clientCompanyArgs<ExtArgs>
    state?: boolean | Project$stateArgs<ExtArgs>
    district?: boolean | Project$districtArgs<ExtArgs>
    projectTags?: boolean | Project$projectTagsArgs<ExtArgs>
    userProjects?: boolean | Project$userProjectsArgs<ExtArgs>
    userRoleMemberships?: boolean | Project$userRoleMembershipsArgs<ExtArgs>
    PermissionProjectOverride?: boolean | Project$PermissionProjectOverrideArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientUser?: boolean | Project$clientUserArgs<ExtArgs>
    clientCompany?: boolean | Project$clientCompanyArgs<ExtArgs>
    state?: boolean | Project$stateArgs<ExtArgs>
    district?: boolean | Project$districtArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      clientUser: Prisma.$UserPayload<ExtArgs> | null
      clientCompany: Prisma.$CompanyPayload<ExtArgs> | null
      state: Prisma.$StatePayload<ExtArgs> | null
      district: Prisma.$DistrictPayload<ExtArgs> | null
      projectTags: Prisma.$ProjectTagPayload<ExtArgs>[]
      userProjects: Prisma.$UserProjectPayload<ExtArgs>[]
      userRoleMemberships: Prisma.$UserRoleMembershipPayload<ExtArgs>[]
      PermissionProjectOverride: Prisma.$PermissionProjectOverridePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      projectId: string
      title: string
      code: string | null
      status: $Enums.ProjectStatus
      stage: $Enums.ProjectStage | null
      projectType: $Enums.ProjectType | null
      structureType: $Enums.StructureType | null
      constructionType: $Enums.ConstructionType | null
      contractType: $Enums.ContractType | null
      health: $Enums.ProjectHealth
      clientUserId: string | null
      clientCompanyId: string | null
      address: string | null
      cityTown: string | null
      stateId: string | null
      districtId: string | null
      pin: string | null
      latitude: Prisma.Decimal | null
      longitude: Prisma.Decimal | null
      startDate: Date | null
      plannedCompletionDate: Date | null
      currency: $Enums.CurrencyCode | null
      contractValue: Prisma.Decimal | null
      areaUnit: $Enums.AreaUnit | null
      plotArea: Prisma.Decimal | null
      builtUpArea: Prisma.Decimal | null
      floors: number | null
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const projectWithProjectIdOnly = await prisma.project.findMany({ select: { projectId: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `projectId`
     * const projectWithProjectIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { projectId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clientUser<T extends Project$clientUserArgs<ExtArgs> = {}>(args?: Subset<T, Project$clientUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    clientCompany<T extends Project$clientCompanyArgs<ExtArgs> = {}>(args?: Subset<T, Project$clientCompanyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    state<T extends Project$stateArgs<ExtArgs> = {}>(args?: Subset<T, Project$stateArgs<ExtArgs>>): Prisma__StateClient<$Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    district<T extends Project$districtArgs<ExtArgs> = {}>(args?: Subset<T, Project$districtArgs<ExtArgs>>): Prisma__DistrictClient<$Result.GetResult<Prisma.$DistrictPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projectTags<T extends Project$projectTagsArgs<ExtArgs> = {}>(args?: Subset<T, Project$projectTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findMany"> | Null>
    userProjects<T extends Project$userProjectsArgs<ExtArgs> = {}>(args?: Subset<T, Project$userProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findMany"> | Null>
    userRoleMemberships<T extends Project$userRoleMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, Project$userRoleMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "findMany"> | Null>
    PermissionProjectOverride<T extends Project$PermissionProjectOverrideArgs<ExtArgs> = {}>(args?: Subset<T, Project$PermissionProjectOverrideArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly projectId: FieldRef<"Project", 'String'>
    readonly title: FieldRef<"Project", 'String'>
    readonly code: FieldRef<"Project", 'String'>
    readonly status: FieldRef<"Project", 'ProjectStatus'>
    readonly stage: FieldRef<"Project", 'ProjectStage'>
    readonly projectType: FieldRef<"Project", 'ProjectType'>
    readonly structureType: FieldRef<"Project", 'StructureType'>
    readonly constructionType: FieldRef<"Project", 'ConstructionType'>
    readonly contractType: FieldRef<"Project", 'ContractType'>
    readonly health: FieldRef<"Project", 'ProjectHealth'>
    readonly clientUserId: FieldRef<"Project", 'String'>
    readonly clientCompanyId: FieldRef<"Project", 'String'>
    readonly address: FieldRef<"Project", 'String'>
    readonly cityTown: FieldRef<"Project", 'String'>
    readonly stateId: FieldRef<"Project", 'String'>
    readonly districtId: FieldRef<"Project", 'String'>
    readonly pin: FieldRef<"Project", 'String'>
    readonly latitude: FieldRef<"Project", 'Decimal'>
    readonly longitude: FieldRef<"Project", 'Decimal'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly plannedCompletionDate: FieldRef<"Project", 'DateTime'>
    readonly currency: FieldRef<"Project", 'CurrencyCode'>
    readonly contractValue: FieldRef<"Project", 'Decimal'>
    readonly areaUnit: FieldRef<"Project", 'AreaUnit'>
    readonly plotArea: FieldRef<"Project", 'Decimal'>
    readonly builtUpArea: FieldRef<"Project", 'Decimal'>
    readonly floors: FieldRef<"Project", 'Int'>
    readonly description: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.clientUser
   */
  export type Project$clientUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Project.clientCompany
   */
  export type Project$clientCompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * Project.state
   */
  export type Project$stateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State
     */
    select?: StateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StateInclude<ExtArgs> | null
    where?: StateWhereInput
  }

  /**
   * Project.district
   */
  export type Project$districtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the District
     */
    select?: DistrictSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistrictInclude<ExtArgs> | null
    where?: DistrictWhereInput
  }

  /**
   * Project.projectTags
   */
  export type Project$projectTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    where?: ProjectTagWhereInput
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    cursor?: ProjectTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * Project.userProjects
   */
  export type Project$userProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    where?: UserProjectWhereInput
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    cursor?: UserProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * Project.userRoleMemberships
   */
  export type Project$userRoleMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    where?: UserRoleMembershipWhereInput
    orderBy?: UserRoleMembershipOrderByWithRelationInput | UserRoleMembershipOrderByWithRelationInput[]
    cursor?: UserRoleMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleMembershipScalarFieldEnum | UserRoleMembershipScalarFieldEnum[]
  }

  /**
   * Project.PermissionProjectOverride
   */
  export type Project$PermissionProjectOverrideArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    where?: PermissionProjectOverrideWhereInput
    orderBy?: PermissionProjectOverrideOrderByWithRelationInput | PermissionProjectOverrideOrderByWithRelationInput[]
    cursor?: PermissionProjectOverrideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionProjectOverrideScalarFieldEnum | PermissionProjectOverrideScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model RefProjectTag
   */

  export type AggregateRefProjectTag = {
    _count: RefProjectTagCountAggregateOutputType | null
    _min: RefProjectTagMinAggregateOutputType | null
    _max: RefProjectTagMaxAggregateOutputType | null
  }

  export type RefProjectTagMinAggregateOutputType = {
    tagCode: string | null
    label: string | null
  }

  export type RefProjectTagMaxAggregateOutputType = {
    tagCode: string | null
    label: string | null
  }

  export type RefProjectTagCountAggregateOutputType = {
    tagCode: number
    label: number
    _all: number
  }


  export type RefProjectTagMinAggregateInputType = {
    tagCode?: true
    label?: true
  }

  export type RefProjectTagMaxAggregateInputType = {
    tagCode?: true
    label?: true
  }

  export type RefProjectTagCountAggregateInputType = {
    tagCode?: true
    label?: true
    _all?: true
  }

  export type RefProjectTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefProjectTag to aggregate.
     */
    where?: RefProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefProjectTags to fetch.
     */
    orderBy?: RefProjectTagOrderByWithRelationInput | RefProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefProjectTags
    **/
    _count?: true | RefProjectTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefProjectTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefProjectTagMaxAggregateInputType
  }

  export type GetRefProjectTagAggregateType<T extends RefProjectTagAggregateArgs> = {
        [P in keyof T & keyof AggregateRefProjectTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefProjectTag[P]>
      : GetScalarType<T[P], AggregateRefProjectTag[P]>
  }




  export type RefProjectTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefProjectTagWhereInput
    orderBy?: RefProjectTagOrderByWithAggregationInput | RefProjectTagOrderByWithAggregationInput[]
    by: RefProjectTagScalarFieldEnum[] | RefProjectTagScalarFieldEnum
    having?: RefProjectTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefProjectTagCountAggregateInputType | true
    _min?: RefProjectTagMinAggregateInputType
    _max?: RefProjectTagMaxAggregateInputType
  }

  export type RefProjectTagGroupByOutputType = {
    tagCode: string
    label: string
    _count: RefProjectTagCountAggregateOutputType | null
    _min: RefProjectTagMinAggregateOutputType | null
    _max: RefProjectTagMaxAggregateOutputType | null
  }

  type GetRefProjectTagGroupByPayload<T extends RefProjectTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefProjectTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefProjectTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefProjectTagGroupByOutputType[P]>
            : GetScalarType<T[P], RefProjectTagGroupByOutputType[P]>
        }
      >
    >


  export type RefProjectTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagCode?: boolean
    label?: boolean
    tags?: boolean | RefProjectTag$tagsArgs<ExtArgs>
    _count?: boolean | RefProjectTagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refProjectTag"]>

  export type RefProjectTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagCode?: boolean
    label?: boolean
  }, ExtArgs["result"]["refProjectTag"]>

  export type RefProjectTagSelectScalar = {
    tagCode?: boolean
    label?: boolean
  }

  export type RefProjectTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | RefProjectTag$tagsArgs<ExtArgs>
    _count?: boolean | RefProjectTagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RefProjectTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RefProjectTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefProjectTag"
    objects: {
      tags: Prisma.$ProjectTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      tagCode: string
      label: string
    }, ExtArgs["result"]["refProjectTag"]>
    composites: {}
  }

  type RefProjectTagGetPayload<S extends boolean | null | undefined | RefProjectTagDefaultArgs> = $Result.GetResult<Prisma.$RefProjectTagPayload, S>

  type RefProjectTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefProjectTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefProjectTagCountAggregateInputType | true
    }

  export interface RefProjectTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefProjectTag'], meta: { name: 'RefProjectTag' } }
    /**
     * Find zero or one RefProjectTag that matches the filter.
     * @param {RefProjectTagFindUniqueArgs} args - Arguments to find a RefProjectTag
     * @example
     * // Get one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefProjectTagFindUniqueArgs>(args: SelectSubset<T, RefProjectTagFindUniqueArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefProjectTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefProjectTagFindUniqueOrThrowArgs} args - Arguments to find a RefProjectTag
     * @example
     * // Get one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefProjectTagFindUniqueOrThrowArgs>(args: SelectSubset<T, RefProjectTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefProjectTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagFindFirstArgs} args - Arguments to find a RefProjectTag
     * @example
     * // Get one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefProjectTagFindFirstArgs>(args?: SelectSubset<T, RefProjectTagFindFirstArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefProjectTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagFindFirstOrThrowArgs} args - Arguments to find a RefProjectTag
     * @example
     * // Get one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefProjectTagFindFirstOrThrowArgs>(args?: SelectSubset<T, RefProjectTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefProjectTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefProjectTags
     * const refProjectTags = await prisma.refProjectTag.findMany()
     * 
     * // Get first 10 RefProjectTags
     * const refProjectTags = await prisma.refProjectTag.findMany({ take: 10 })
     * 
     * // Only select the `tagCode`
     * const refProjectTagWithTagCodeOnly = await prisma.refProjectTag.findMany({ select: { tagCode: true } })
     * 
     */
    findMany<T extends RefProjectTagFindManyArgs>(args?: SelectSubset<T, RefProjectTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefProjectTag.
     * @param {RefProjectTagCreateArgs} args - Arguments to create a RefProjectTag.
     * @example
     * // Create one RefProjectTag
     * const RefProjectTag = await prisma.refProjectTag.create({
     *   data: {
     *     // ... data to create a RefProjectTag
     *   }
     * })
     * 
     */
    create<T extends RefProjectTagCreateArgs>(args: SelectSubset<T, RefProjectTagCreateArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefProjectTags.
     * @param {RefProjectTagCreateManyArgs} args - Arguments to create many RefProjectTags.
     * @example
     * // Create many RefProjectTags
     * const refProjectTag = await prisma.refProjectTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefProjectTagCreateManyArgs>(args?: SelectSubset<T, RefProjectTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefProjectTags and returns the data saved in the database.
     * @param {RefProjectTagCreateManyAndReturnArgs} args - Arguments to create many RefProjectTags.
     * @example
     * // Create many RefProjectTags
     * const refProjectTag = await prisma.refProjectTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefProjectTags and only return the `tagCode`
     * const refProjectTagWithTagCodeOnly = await prisma.refProjectTag.createManyAndReturn({ 
     *   select: { tagCode: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefProjectTagCreateManyAndReturnArgs>(args?: SelectSubset<T, RefProjectTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefProjectTag.
     * @param {RefProjectTagDeleteArgs} args - Arguments to delete one RefProjectTag.
     * @example
     * // Delete one RefProjectTag
     * const RefProjectTag = await prisma.refProjectTag.delete({
     *   where: {
     *     // ... filter to delete one RefProjectTag
     *   }
     * })
     * 
     */
    delete<T extends RefProjectTagDeleteArgs>(args: SelectSubset<T, RefProjectTagDeleteArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefProjectTag.
     * @param {RefProjectTagUpdateArgs} args - Arguments to update one RefProjectTag.
     * @example
     * // Update one RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefProjectTagUpdateArgs>(args: SelectSubset<T, RefProjectTagUpdateArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefProjectTags.
     * @param {RefProjectTagDeleteManyArgs} args - Arguments to filter RefProjectTags to delete.
     * @example
     * // Delete a few RefProjectTags
     * const { count } = await prisma.refProjectTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefProjectTagDeleteManyArgs>(args?: SelectSubset<T, RefProjectTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefProjectTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefProjectTags
     * const refProjectTag = await prisma.refProjectTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefProjectTagUpdateManyArgs>(args: SelectSubset<T, RefProjectTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefProjectTag.
     * @param {RefProjectTagUpsertArgs} args - Arguments to update or create a RefProjectTag.
     * @example
     * // Update or create a RefProjectTag
     * const refProjectTag = await prisma.refProjectTag.upsert({
     *   create: {
     *     // ... data to create a RefProjectTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefProjectTag we want to update
     *   }
     * })
     */
    upsert<T extends RefProjectTagUpsertArgs>(args: SelectSubset<T, RefProjectTagUpsertArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefProjectTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagCountArgs} args - Arguments to filter RefProjectTags to count.
     * @example
     * // Count the number of RefProjectTags
     * const count = await prisma.refProjectTag.count({
     *   where: {
     *     // ... the filter for the RefProjectTags we want to count
     *   }
     * })
    **/
    count<T extends RefProjectTagCountArgs>(
      args?: Subset<T, RefProjectTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefProjectTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefProjectTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefProjectTagAggregateArgs>(args: Subset<T, RefProjectTagAggregateArgs>): Prisma.PrismaPromise<GetRefProjectTagAggregateType<T>>

    /**
     * Group by RefProjectTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefProjectTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefProjectTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefProjectTagGroupByArgs['orderBy'] }
        : { orderBy?: RefProjectTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefProjectTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefProjectTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefProjectTag model
   */
  readonly fields: RefProjectTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefProjectTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefProjectTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tags<T extends RefProjectTag$tagsArgs<ExtArgs> = {}>(args?: Subset<T, RefProjectTag$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefProjectTag model
   */ 
  interface RefProjectTagFieldRefs {
    readonly tagCode: FieldRef<"RefProjectTag", 'String'>
    readonly label: FieldRef<"RefProjectTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RefProjectTag findUnique
   */
  export type RefProjectTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTag to fetch.
     */
    where: RefProjectTagWhereUniqueInput
  }

  /**
   * RefProjectTag findUniqueOrThrow
   */
  export type RefProjectTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTag to fetch.
     */
    where: RefProjectTagWhereUniqueInput
  }

  /**
   * RefProjectTag findFirst
   */
  export type RefProjectTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTag to fetch.
     */
    where?: RefProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefProjectTags to fetch.
     */
    orderBy?: RefProjectTagOrderByWithRelationInput | RefProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefProjectTags.
     */
    cursor?: RefProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefProjectTags.
     */
    distinct?: RefProjectTagScalarFieldEnum | RefProjectTagScalarFieldEnum[]
  }

  /**
   * RefProjectTag findFirstOrThrow
   */
  export type RefProjectTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTag to fetch.
     */
    where?: RefProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefProjectTags to fetch.
     */
    orderBy?: RefProjectTagOrderByWithRelationInput | RefProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefProjectTags.
     */
    cursor?: RefProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefProjectTags.
     */
    distinct?: RefProjectTagScalarFieldEnum | RefProjectTagScalarFieldEnum[]
  }

  /**
   * RefProjectTag findMany
   */
  export type RefProjectTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which RefProjectTags to fetch.
     */
    where?: RefProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefProjectTags to fetch.
     */
    orderBy?: RefProjectTagOrderByWithRelationInput | RefProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefProjectTags.
     */
    cursor?: RefProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefProjectTags.
     */
    skip?: number
    distinct?: RefProjectTagScalarFieldEnum | RefProjectTagScalarFieldEnum[]
  }

  /**
   * RefProjectTag create
   */
  export type RefProjectTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * The data needed to create a RefProjectTag.
     */
    data: XOR<RefProjectTagCreateInput, RefProjectTagUncheckedCreateInput>
  }

  /**
   * RefProjectTag createMany
   */
  export type RefProjectTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefProjectTags.
     */
    data: RefProjectTagCreateManyInput | RefProjectTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefProjectTag createManyAndReturn
   */
  export type RefProjectTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefProjectTags.
     */
    data: RefProjectTagCreateManyInput | RefProjectTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefProjectTag update
   */
  export type RefProjectTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * The data needed to update a RefProjectTag.
     */
    data: XOR<RefProjectTagUpdateInput, RefProjectTagUncheckedUpdateInput>
    /**
     * Choose, which RefProjectTag to update.
     */
    where: RefProjectTagWhereUniqueInput
  }

  /**
   * RefProjectTag updateMany
   */
  export type RefProjectTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefProjectTags.
     */
    data: XOR<RefProjectTagUpdateManyMutationInput, RefProjectTagUncheckedUpdateManyInput>
    /**
     * Filter which RefProjectTags to update
     */
    where?: RefProjectTagWhereInput
  }

  /**
   * RefProjectTag upsert
   */
  export type RefProjectTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * The filter to search for the RefProjectTag to update in case it exists.
     */
    where: RefProjectTagWhereUniqueInput
    /**
     * In case the RefProjectTag found by the `where` argument doesn't exist, create a new RefProjectTag with this data.
     */
    create: XOR<RefProjectTagCreateInput, RefProjectTagUncheckedCreateInput>
    /**
     * In case the RefProjectTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefProjectTagUpdateInput, RefProjectTagUncheckedUpdateInput>
  }

  /**
   * RefProjectTag delete
   */
  export type RefProjectTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
    /**
     * Filter which RefProjectTag to delete.
     */
    where: RefProjectTagWhereUniqueInput
  }

  /**
   * RefProjectTag deleteMany
   */
  export type RefProjectTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefProjectTags to delete
     */
    where?: RefProjectTagWhereInput
  }

  /**
   * RefProjectTag.tags
   */
  export type RefProjectTag$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    where?: ProjectTagWhereInput
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    cursor?: ProjectTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * RefProjectTag without action
   */
  export type RefProjectTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefProjectTag
     */
    select?: RefProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefProjectTagInclude<ExtArgs> | null
  }


  /**
   * Model ProjectTag
   */

  export type AggregateProjectTag = {
    _count: ProjectTagCountAggregateOutputType | null
    _min: ProjectTagMinAggregateOutputType | null
    _max: ProjectTagMaxAggregateOutputType | null
  }

  export type ProjectTagMinAggregateOutputType = {
    projectId: string | null
    tagCode: string | null
  }

  export type ProjectTagMaxAggregateOutputType = {
    projectId: string | null
    tagCode: string | null
  }

  export type ProjectTagCountAggregateOutputType = {
    projectId: number
    tagCode: number
    _all: number
  }


  export type ProjectTagMinAggregateInputType = {
    projectId?: true
    tagCode?: true
  }

  export type ProjectTagMaxAggregateInputType = {
    projectId?: true
    tagCode?: true
  }

  export type ProjectTagCountAggregateInputType = {
    projectId?: true
    tagCode?: true
    _all?: true
  }

  export type ProjectTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectTag to aggregate.
     */
    where?: ProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTags to fetch.
     */
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectTags
    **/
    _count?: true | ProjectTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectTagMaxAggregateInputType
  }

  export type GetProjectTagAggregateType<T extends ProjectTagAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectTag[P]>
      : GetScalarType<T[P], AggregateProjectTag[P]>
  }




  export type ProjectTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectTagWhereInput
    orderBy?: ProjectTagOrderByWithAggregationInput | ProjectTagOrderByWithAggregationInput[]
    by: ProjectTagScalarFieldEnum[] | ProjectTagScalarFieldEnum
    having?: ProjectTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectTagCountAggregateInputType | true
    _min?: ProjectTagMinAggregateInputType
    _max?: ProjectTagMaxAggregateInputType
  }

  export type ProjectTagGroupByOutputType = {
    projectId: string
    tagCode: string
    _count: ProjectTagCountAggregateOutputType | null
    _min: ProjectTagMinAggregateOutputType | null
    _max: ProjectTagMaxAggregateOutputType | null
  }

  type GetProjectTagGroupByPayload<T extends ProjectTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectTagGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectTagGroupByOutputType[P]>
        }
      >
    >


  export type ProjectTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    tagCode?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tag?: boolean | RefProjectTagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectTag"]>

  export type ProjectTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    projectId?: boolean
    tagCode?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tag?: boolean | RefProjectTagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectTag"]>

  export type ProjectTagSelectScalar = {
    projectId?: boolean
    tagCode?: boolean
  }

  export type ProjectTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tag?: boolean | RefProjectTagDefaultArgs<ExtArgs>
  }
  export type ProjectTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tag?: boolean | RefProjectTagDefaultArgs<ExtArgs>
  }

  export type $ProjectTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectTag"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      tag: Prisma.$RefProjectTagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      projectId: string
      tagCode: string
    }, ExtArgs["result"]["projectTag"]>
    composites: {}
  }

  type ProjectTagGetPayload<S extends boolean | null | undefined | ProjectTagDefaultArgs> = $Result.GetResult<Prisma.$ProjectTagPayload, S>

  type ProjectTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectTagCountAggregateInputType | true
    }

  export interface ProjectTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectTag'], meta: { name: 'ProjectTag' } }
    /**
     * Find zero or one ProjectTag that matches the filter.
     * @param {ProjectTagFindUniqueArgs} args - Arguments to find a ProjectTag
     * @example
     * // Get one ProjectTag
     * const projectTag = await prisma.projectTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectTagFindUniqueArgs>(args: SelectSubset<T, ProjectTagFindUniqueArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectTagFindUniqueOrThrowArgs} args - Arguments to find a ProjectTag
     * @example
     * // Get one ProjectTag
     * const projectTag = await prisma.projectTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectTagFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagFindFirstArgs} args - Arguments to find a ProjectTag
     * @example
     * // Get one ProjectTag
     * const projectTag = await prisma.projectTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectTagFindFirstArgs>(args?: SelectSubset<T, ProjectTagFindFirstArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagFindFirstOrThrowArgs} args - Arguments to find a ProjectTag
     * @example
     * // Get one ProjectTag
     * const projectTag = await prisma.projectTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectTagFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectTags
     * const projectTags = await prisma.projectTag.findMany()
     * 
     * // Get first 10 ProjectTags
     * const projectTags = await prisma.projectTag.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const projectTagWithProjectIdOnly = await prisma.projectTag.findMany({ select: { projectId: true } })
     * 
     */
    findMany<T extends ProjectTagFindManyArgs>(args?: SelectSubset<T, ProjectTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectTag.
     * @param {ProjectTagCreateArgs} args - Arguments to create a ProjectTag.
     * @example
     * // Create one ProjectTag
     * const ProjectTag = await prisma.projectTag.create({
     *   data: {
     *     // ... data to create a ProjectTag
     *   }
     * })
     * 
     */
    create<T extends ProjectTagCreateArgs>(args: SelectSubset<T, ProjectTagCreateArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectTags.
     * @param {ProjectTagCreateManyArgs} args - Arguments to create many ProjectTags.
     * @example
     * // Create many ProjectTags
     * const projectTag = await prisma.projectTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectTagCreateManyArgs>(args?: SelectSubset<T, ProjectTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectTags and returns the data saved in the database.
     * @param {ProjectTagCreateManyAndReturnArgs} args - Arguments to create many ProjectTags.
     * @example
     * // Create many ProjectTags
     * const projectTag = await prisma.projectTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectTags and only return the `projectId`
     * const projectTagWithProjectIdOnly = await prisma.projectTag.createManyAndReturn({ 
     *   select: { projectId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectTagCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectTag.
     * @param {ProjectTagDeleteArgs} args - Arguments to delete one ProjectTag.
     * @example
     * // Delete one ProjectTag
     * const ProjectTag = await prisma.projectTag.delete({
     *   where: {
     *     // ... filter to delete one ProjectTag
     *   }
     * })
     * 
     */
    delete<T extends ProjectTagDeleteArgs>(args: SelectSubset<T, ProjectTagDeleteArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectTag.
     * @param {ProjectTagUpdateArgs} args - Arguments to update one ProjectTag.
     * @example
     * // Update one ProjectTag
     * const projectTag = await prisma.projectTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectTagUpdateArgs>(args: SelectSubset<T, ProjectTagUpdateArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectTags.
     * @param {ProjectTagDeleteManyArgs} args - Arguments to filter ProjectTags to delete.
     * @example
     * // Delete a few ProjectTags
     * const { count } = await prisma.projectTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectTagDeleteManyArgs>(args?: SelectSubset<T, ProjectTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectTags
     * const projectTag = await prisma.projectTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectTagUpdateManyArgs>(args: SelectSubset<T, ProjectTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectTag.
     * @param {ProjectTagUpsertArgs} args - Arguments to update or create a ProjectTag.
     * @example
     * // Update or create a ProjectTag
     * const projectTag = await prisma.projectTag.upsert({
     *   create: {
     *     // ... data to create a ProjectTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectTag we want to update
     *   }
     * })
     */
    upsert<T extends ProjectTagUpsertArgs>(args: SelectSubset<T, ProjectTagUpsertArgs<ExtArgs>>): Prisma__ProjectTagClient<$Result.GetResult<Prisma.$ProjectTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagCountArgs} args - Arguments to filter ProjectTags to count.
     * @example
     * // Count the number of ProjectTags
     * const count = await prisma.projectTag.count({
     *   where: {
     *     // ... the filter for the ProjectTags we want to count
     *   }
     * })
    **/
    count<T extends ProjectTagCountArgs>(
      args?: Subset<T, ProjectTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectTagAggregateArgs>(args: Subset<T, ProjectTagAggregateArgs>): Prisma.PrismaPromise<GetProjectTagAggregateType<T>>

    /**
     * Group by ProjectTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectTagGroupByArgs['orderBy'] }
        : { orderBy?: ProjectTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectTag model
   */
  readonly fields: ProjectTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends RefProjectTagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RefProjectTagDefaultArgs<ExtArgs>>): Prisma__RefProjectTagClient<$Result.GetResult<Prisma.$RefProjectTagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectTag model
   */ 
  interface ProjectTagFieldRefs {
    readonly projectId: FieldRef<"ProjectTag", 'String'>
    readonly tagCode: FieldRef<"ProjectTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectTag findUnique
   */
  export type ProjectTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTag to fetch.
     */
    where: ProjectTagWhereUniqueInput
  }

  /**
   * ProjectTag findUniqueOrThrow
   */
  export type ProjectTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTag to fetch.
     */
    where: ProjectTagWhereUniqueInput
  }

  /**
   * ProjectTag findFirst
   */
  export type ProjectTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTag to fetch.
     */
    where?: ProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTags to fetch.
     */
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectTags.
     */
    cursor?: ProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectTags.
     */
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * ProjectTag findFirstOrThrow
   */
  export type ProjectTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTag to fetch.
     */
    where?: ProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTags to fetch.
     */
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectTags.
     */
    cursor?: ProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectTags.
     */
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * ProjectTag findMany
   */
  export type ProjectTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTags to fetch.
     */
    where?: ProjectTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTags to fetch.
     */
    orderBy?: ProjectTagOrderByWithRelationInput | ProjectTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectTags.
     */
    cursor?: ProjectTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTags.
     */
    skip?: number
    distinct?: ProjectTagScalarFieldEnum | ProjectTagScalarFieldEnum[]
  }

  /**
   * ProjectTag create
   */
  export type ProjectTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectTag.
     */
    data: XOR<ProjectTagCreateInput, ProjectTagUncheckedCreateInput>
  }

  /**
   * ProjectTag createMany
   */
  export type ProjectTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectTags.
     */
    data: ProjectTagCreateManyInput | ProjectTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectTag createManyAndReturn
   */
  export type ProjectTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectTags.
     */
    data: ProjectTagCreateManyInput | ProjectTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectTag update
   */
  export type ProjectTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectTag.
     */
    data: XOR<ProjectTagUpdateInput, ProjectTagUncheckedUpdateInput>
    /**
     * Choose, which ProjectTag to update.
     */
    where: ProjectTagWhereUniqueInput
  }

  /**
   * ProjectTag updateMany
   */
  export type ProjectTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectTags.
     */
    data: XOR<ProjectTagUpdateManyMutationInput, ProjectTagUncheckedUpdateManyInput>
    /**
     * Filter which ProjectTags to update
     */
    where?: ProjectTagWhereInput
  }

  /**
   * ProjectTag upsert
   */
  export type ProjectTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectTag to update in case it exists.
     */
    where: ProjectTagWhereUniqueInput
    /**
     * In case the ProjectTag found by the `where` argument doesn't exist, create a new ProjectTag with this data.
     */
    create: XOR<ProjectTagCreateInput, ProjectTagUncheckedCreateInput>
    /**
     * In case the ProjectTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectTagUpdateInput, ProjectTagUncheckedUpdateInput>
  }

  /**
   * ProjectTag delete
   */
  export type ProjectTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
    /**
     * Filter which ProjectTag to delete.
     */
    where: ProjectTagWhereUniqueInput
  }

  /**
   * ProjectTag deleteMany
   */
  export type ProjectTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectTags to delete
     */
    where?: ProjectTagWhereInput
  }

  /**
   * ProjectTag without action
   */
  export type ProjectTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTag
     */
    select?: ProjectTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTagInclude<ExtArgs> | null
  }


  /**
   * Model UserProject
   */

  export type AggregateUserProject = {
    _count: UserProjectCountAggregateOutputType | null
    _min: UserProjectMinAggregateOutputType | null
    _max: UserProjectMaxAggregateOutputType | null
  }

  export type UserProjectMinAggregateOutputType = {
    userId: string | null
    projectId: string | null
    createdAt: Date | null
  }

  export type UserProjectMaxAggregateOutputType = {
    userId: string | null
    projectId: string | null
    createdAt: Date | null
  }

  export type UserProjectCountAggregateOutputType = {
    userId: number
    projectId: number
    createdAt: number
    _all: number
  }


  export type UserProjectMinAggregateInputType = {
    userId?: true
    projectId?: true
    createdAt?: true
  }

  export type UserProjectMaxAggregateInputType = {
    userId?: true
    projectId?: true
    createdAt?: true
  }

  export type UserProjectCountAggregateInputType = {
    userId?: true
    projectId?: true
    createdAt?: true
    _all?: true
  }

  export type UserProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProject to aggregate.
     */
    where?: UserProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProjects
    **/
    _count?: true | UserProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProjectMaxAggregateInputType
  }

  export type GetUserProjectAggregateType<T extends UserProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProject[P]>
      : GetScalarType<T[P], AggregateUserProject[P]>
  }




  export type UserProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectWhereInput
    orderBy?: UserProjectOrderByWithAggregationInput | UserProjectOrderByWithAggregationInput[]
    by: UserProjectScalarFieldEnum[] | UserProjectScalarFieldEnum
    having?: UserProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProjectCountAggregateInputType | true
    _min?: UserProjectMinAggregateInputType
    _max?: UserProjectMaxAggregateInputType
  }

  export type UserProjectGroupByOutputType = {
    userId: string
    projectId: string
    createdAt: Date
    _count: UserProjectCountAggregateOutputType | null
    _min: UserProjectMinAggregateOutputType | null
    _max: UserProjectMaxAggregateOutputType | null
  }

  type GetUserProjectGroupByPayload<T extends UserProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProjectGroupByOutputType[P]>
            : GetScalarType<T[P], UserProjectGroupByOutputType[P]>
        }
      >
    >


  export type UserProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    projectId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProject"]>

  export type UserProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    projectId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProject"]>

  export type UserProjectSelectScalar = {
    userId?: boolean
    projectId?: boolean
    createdAt?: boolean
  }

  export type UserProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type UserProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $UserProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProject"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      projectId: string
      createdAt: Date
    }, ExtArgs["result"]["userProject"]>
    composites: {}
  }

  type UserProjectGetPayload<S extends boolean | null | undefined | UserProjectDefaultArgs> = $Result.GetResult<Prisma.$UserProjectPayload, S>

  type UserProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserProjectCountAggregateInputType | true
    }

  export interface UserProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProject'], meta: { name: 'UserProject' } }
    /**
     * Find zero or one UserProject that matches the filter.
     * @param {UserProjectFindUniqueArgs} args - Arguments to find a UserProject
     * @example
     * // Get one UserProject
     * const userProject = await prisma.userProject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProjectFindUniqueArgs>(args: SelectSubset<T, UserProjectFindUniqueArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserProject that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserProjectFindUniqueOrThrowArgs} args - Arguments to find a UserProject
     * @example
     * // Get one UserProject
     * const userProject = await prisma.userProject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserProject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectFindFirstArgs} args - Arguments to find a UserProject
     * @example
     * // Get one UserProject
     * const userProject = await prisma.userProject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProjectFindFirstArgs>(args?: SelectSubset<T, UserProjectFindFirstArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserProject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectFindFirstOrThrowArgs} args - Arguments to find a UserProject
     * @example
     * // Get one UserProject
     * const userProject = await prisma.userProject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserProjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProjects
     * const userProjects = await prisma.userProject.findMany()
     * 
     * // Get first 10 UserProjects
     * const userProjects = await prisma.userProject.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userProjectWithUserIdOnly = await prisma.userProject.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserProjectFindManyArgs>(args?: SelectSubset<T, UserProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserProject.
     * @param {UserProjectCreateArgs} args - Arguments to create a UserProject.
     * @example
     * // Create one UserProject
     * const UserProject = await prisma.userProject.create({
     *   data: {
     *     // ... data to create a UserProject
     *   }
     * })
     * 
     */
    create<T extends UserProjectCreateArgs>(args: SelectSubset<T, UserProjectCreateArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserProjects.
     * @param {UserProjectCreateManyArgs} args - Arguments to create many UserProjects.
     * @example
     * // Create many UserProjects
     * const userProject = await prisma.userProject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProjectCreateManyArgs>(args?: SelectSubset<T, UserProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProjects and returns the data saved in the database.
     * @param {UserProjectCreateManyAndReturnArgs} args - Arguments to create many UserProjects.
     * @example
     * // Create many UserProjects
     * const userProject = await prisma.userProject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProjects and only return the `userId`
     * const userProjectWithUserIdOnly = await prisma.userProject.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserProject.
     * @param {UserProjectDeleteArgs} args - Arguments to delete one UserProject.
     * @example
     * // Delete one UserProject
     * const UserProject = await prisma.userProject.delete({
     *   where: {
     *     // ... filter to delete one UserProject
     *   }
     * })
     * 
     */
    delete<T extends UserProjectDeleteArgs>(args: SelectSubset<T, UserProjectDeleteArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserProject.
     * @param {UserProjectUpdateArgs} args - Arguments to update one UserProject.
     * @example
     * // Update one UserProject
     * const userProject = await prisma.userProject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProjectUpdateArgs>(args: SelectSubset<T, UserProjectUpdateArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserProjects.
     * @param {UserProjectDeleteManyArgs} args - Arguments to filter UserProjects to delete.
     * @example
     * // Delete a few UserProjects
     * const { count } = await prisma.userProject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProjectDeleteManyArgs>(args?: SelectSubset<T, UserProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProjects
     * const userProject = await prisma.userProject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProjectUpdateManyArgs>(args: SelectSubset<T, UserProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProject.
     * @param {UserProjectUpsertArgs} args - Arguments to update or create a UserProject.
     * @example
     * // Update or create a UserProject
     * const userProject = await prisma.userProject.upsert({
     *   create: {
     *     // ... data to create a UserProject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProject we want to update
     *   }
     * })
     */
    upsert<T extends UserProjectUpsertArgs>(args: SelectSubset<T, UserProjectUpsertArgs<ExtArgs>>): Prisma__UserProjectClient<$Result.GetResult<Prisma.$UserProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectCountArgs} args - Arguments to filter UserProjects to count.
     * @example
     * // Count the number of UserProjects
     * const count = await prisma.userProject.count({
     *   where: {
     *     // ... the filter for the UserProjects we want to count
     *   }
     * })
    **/
    count<T extends UserProjectCountArgs>(
      args?: Subset<T, UserProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProjectAggregateArgs>(args: Subset<T, UserProjectAggregateArgs>): Prisma.PrismaPromise<GetUserProjectAggregateType<T>>

    /**
     * Group by UserProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProjectGroupByArgs['orderBy'] }
        : { orderBy?: UserProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProject model
   */
  readonly fields: UserProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProject model
   */ 
  interface UserProjectFieldRefs {
    readonly userId: FieldRef<"UserProject", 'String'>
    readonly projectId: FieldRef<"UserProject", 'String'>
    readonly createdAt: FieldRef<"UserProject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProject findUnique
   */
  export type UserProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProject to fetch.
     */
    where: UserProjectWhereUniqueInput
  }

  /**
   * UserProject findUniqueOrThrow
   */
  export type UserProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProject to fetch.
     */
    where: UserProjectWhereUniqueInput
  }

  /**
   * UserProject findFirst
   */
  export type UserProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProject to fetch.
     */
    where?: UserProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProjects.
     */
    cursor?: UserProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProjects.
     */
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * UserProject findFirstOrThrow
   */
  export type UserProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProject to fetch.
     */
    where?: UserProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProjects.
     */
    cursor?: UserProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProjects.
     */
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * UserProject findMany
   */
  export type UserProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter, which UserProjects to fetch.
     */
    where?: UserProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectOrderByWithRelationInput | UserProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProjects.
     */
    cursor?: UserProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    distinct?: UserProjectScalarFieldEnum | UserProjectScalarFieldEnum[]
  }

  /**
   * UserProject create
   */
  export type UserProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProject.
     */
    data: XOR<UserProjectCreateInput, UserProjectUncheckedCreateInput>
  }

  /**
   * UserProject createMany
   */
  export type UserProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProjects.
     */
    data: UserProjectCreateManyInput | UserProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProject createManyAndReturn
   */
  export type UserProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserProjects.
     */
    data: UserProjectCreateManyInput | UserProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProject update
   */
  export type UserProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProject.
     */
    data: XOR<UserProjectUpdateInput, UserProjectUncheckedUpdateInput>
    /**
     * Choose, which UserProject to update.
     */
    where: UserProjectWhereUniqueInput
  }

  /**
   * UserProject updateMany
   */
  export type UserProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProjects.
     */
    data: XOR<UserProjectUpdateManyMutationInput, UserProjectUncheckedUpdateManyInput>
    /**
     * Filter which UserProjects to update
     */
    where?: UserProjectWhereInput
  }

  /**
   * UserProject upsert
   */
  export type UserProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProject to update in case it exists.
     */
    where: UserProjectWhereUniqueInput
    /**
     * In case the UserProject found by the `where` argument doesn't exist, create a new UserProject with this data.
     */
    create: XOR<UserProjectCreateInput, UserProjectUncheckedCreateInput>
    /**
     * In case the UserProject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProjectUpdateInput, UserProjectUncheckedUpdateInput>
  }

  /**
   * UserProject delete
   */
  export type UserProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
    /**
     * Filter which UserProject to delete.
     */
    where: UserProjectWhereUniqueInput
  }

  /**
   * UserProject deleteMany
   */
  export type UserProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProjects to delete
     */
    where?: UserProjectWhereInput
  }

  /**
   * UserProject without action
   */
  export type UserProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProject
     */
    select?: UserProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectInclude<ExtArgs> | null
  }


  /**
   * Model UserCompany
   */

  export type AggregateUserCompany = {
    _count: UserCompanyCountAggregateOutputType | null
    _min: UserCompanyMinAggregateOutputType | null
    _max: UserCompanyMaxAggregateOutputType | null
  }

  export type UserCompanyMinAggregateOutputType = {
    userId: string | null
    companyId: string | null
    createdAt: Date | null
  }

  export type UserCompanyMaxAggregateOutputType = {
    userId: string | null
    companyId: string | null
    createdAt: Date | null
  }

  export type UserCompanyCountAggregateOutputType = {
    userId: number
    companyId: number
    createdAt: number
    _all: number
  }


  export type UserCompanyMinAggregateInputType = {
    userId?: true
    companyId?: true
    createdAt?: true
  }

  export type UserCompanyMaxAggregateInputType = {
    userId?: true
    companyId?: true
    createdAt?: true
  }

  export type UserCompanyCountAggregateInputType = {
    userId?: true
    companyId?: true
    createdAt?: true
    _all?: true
  }

  export type UserCompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCompany to aggregate.
     */
    where?: UserCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanies to fetch.
     */
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCompanies
    **/
    _count?: true | UserCompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCompanyMaxAggregateInputType
  }

  export type GetUserCompanyAggregateType<T extends UserCompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCompany[P]>
      : GetScalarType<T[P], AggregateUserCompany[P]>
  }




  export type UserCompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCompanyWhereInput
    orderBy?: UserCompanyOrderByWithAggregationInput | UserCompanyOrderByWithAggregationInput[]
    by: UserCompanyScalarFieldEnum[] | UserCompanyScalarFieldEnum
    having?: UserCompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCompanyCountAggregateInputType | true
    _min?: UserCompanyMinAggregateInputType
    _max?: UserCompanyMaxAggregateInputType
  }

  export type UserCompanyGroupByOutputType = {
    userId: string
    companyId: string
    createdAt: Date
    _count: UserCompanyCountAggregateOutputType | null
    _min: UserCompanyMinAggregateOutputType | null
    _max: UserCompanyMaxAggregateOutputType | null
  }

  type GetUserCompanyGroupByPayload<T extends UserCompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCompanyGroupByOutputType[P]>
            : GetScalarType<T[P], UserCompanyGroupByOutputType[P]>
        }
      >
    >


  export type UserCompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    companyId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCompany"]>

  export type UserCompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    companyId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCompany"]>

  export type UserCompanySelectScalar = {
    userId?: boolean
    companyId?: boolean
    createdAt?: boolean
  }

  export type UserCompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type UserCompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $UserCompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCompany"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      companyId: string
      createdAt: Date
    }, ExtArgs["result"]["userCompany"]>
    composites: {}
  }

  type UserCompanyGetPayload<S extends boolean | null | undefined | UserCompanyDefaultArgs> = $Result.GetResult<Prisma.$UserCompanyPayload, S>

  type UserCompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserCompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCompanyCountAggregateInputType | true
    }

  export interface UserCompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCompany'], meta: { name: 'UserCompany' } }
    /**
     * Find zero or one UserCompany that matches the filter.
     * @param {UserCompanyFindUniqueArgs} args - Arguments to find a UserCompany
     * @example
     * // Get one UserCompany
     * const userCompany = await prisma.userCompany.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCompanyFindUniqueArgs>(args: SelectSubset<T, UserCompanyFindUniqueArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserCompany that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserCompanyFindUniqueOrThrowArgs} args - Arguments to find a UserCompany
     * @example
     * // Get one UserCompany
     * const userCompany = await prisma.userCompany.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserCompany that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyFindFirstArgs} args - Arguments to find a UserCompany
     * @example
     * // Get one UserCompany
     * const userCompany = await prisma.userCompany.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCompanyFindFirstArgs>(args?: SelectSubset<T, UserCompanyFindFirstArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserCompany that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyFindFirstOrThrowArgs} args - Arguments to find a UserCompany
     * @example
     * // Get one UserCompany
     * const userCompany = await prisma.userCompany.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserCompanies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCompanies
     * const userCompanies = await prisma.userCompany.findMany()
     * 
     * // Get first 10 UserCompanies
     * const userCompanies = await prisma.userCompany.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userCompanyWithUserIdOnly = await prisma.userCompany.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserCompanyFindManyArgs>(args?: SelectSubset<T, UserCompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserCompany.
     * @param {UserCompanyCreateArgs} args - Arguments to create a UserCompany.
     * @example
     * // Create one UserCompany
     * const UserCompany = await prisma.userCompany.create({
     *   data: {
     *     // ... data to create a UserCompany
     *   }
     * })
     * 
     */
    create<T extends UserCompanyCreateArgs>(args: SelectSubset<T, UserCompanyCreateArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserCompanies.
     * @param {UserCompanyCreateManyArgs} args - Arguments to create many UserCompanies.
     * @example
     * // Create many UserCompanies
     * const userCompany = await prisma.userCompany.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCompanyCreateManyArgs>(args?: SelectSubset<T, UserCompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCompanies and returns the data saved in the database.
     * @param {UserCompanyCreateManyAndReturnArgs} args - Arguments to create many UserCompanies.
     * @example
     * // Create many UserCompanies
     * const userCompany = await prisma.userCompany.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCompanies and only return the `userId`
     * const userCompanyWithUserIdOnly = await prisma.userCompany.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserCompany.
     * @param {UserCompanyDeleteArgs} args - Arguments to delete one UserCompany.
     * @example
     * // Delete one UserCompany
     * const UserCompany = await prisma.userCompany.delete({
     *   where: {
     *     // ... filter to delete one UserCompany
     *   }
     * })
     * 
     */
    delete<T extends UserCompanyDeleteArgs>(args: SelectSubset<T, UserCompanyDeleteArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserCompany.
     * @param {UserCompanyUpdateArgs} args - Arguments to update one UserCompany.
     * @example
     * // Update one UserCompany
     * const userCompany = await prisma.userCompany.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCompanyUpdateArgs>(args: SelectSubset<T, UserCompanyUpdateArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserCompanies.
     * @param {UserCompanyDeleteManyArgs} args - Arguments to filter UserCompanies to delete.
     * @example
     * // Delete a few UserCompanies
     * const { count } = await prisma.userCompany.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCompanyDeleteManyArgs>(args?: SelectSubset<T, UserCompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCompanies
     * const userCompany = await prisma.userCompany.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCompanyUpdateManyArgs>(args: SelectSubset<T, UserCompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserCompany.
     * @param {UserCompanyUpsertArgs} args - Arguments to update or create a UserCompany.
     * @example
     * // Update or create a UserCompany
     * const userCompany = await prisma.userCompany.upsert({
     *   create: {
     *     // ... data to create a UserCompany
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCompany we want to update
     *   }
     * })
     */
    upsert<T extends UserCompanyUpsertArgs>(args: SelectSubset<T, UserCompanyUpsertArgs<ExtArgs>>): Prisma__UserCompanyClient<$Result.GetResult<Prisma.$UserCompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserCompanies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyCountArgs} args - Arguments to filter UserCompanies to count.
     * @example
     * // Count the number of UserCompanies
     * const count = await prisma.userCompany.count({
     *   where: {
     *     // ... the filter for the UserCompanies we want to count
     *   }
     * })
    **/
    count<T extends UserCompanyCountArgs>(
      args?: Subset<T, UserCompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCompany.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCompanyAggregateArgs>(args: Subset<T, UserCompanyAggregateArgs>): Prisma.PrismaPromise<GetUserCompanyAggregateType<T>>

    /**
     * Group by UserCompany.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCompanyGroupByArgs['orderBy'] }
        : { orderBy?: UserCompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCompany model
   */
  readonly fields: UserCompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCompany.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCompany model
   */ 
  interface UserCompanyFieldRefs {
    readonly userId: FieldRef<"UserCompany", 'String'>
    readonly companyId: FieldRef<"UserCompany", 'String'>
    readonly createdAt: FieldRef<"UserCompany", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCompany findUnique
   */
  export type UserCompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompany to fetch.
     */
    where: UserCompanyWhereUniqueInput
  }

  /**
   * UserCompany findUniqueOrThrow
   */
  export type UserCompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompany to fetch.
     */
    where: UserCompanyWhereUniqueInput
  }

  /**
   * UserCompany findFirst
   */
  export type UserCompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompany to fetch.
     */
    where?: UserCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanies to fetch.
     */
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCompanies.
     */
    cursor?: UserCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCompanies.
     */
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * UserCompany findFirstOrThrow
   */
  export type UserCompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompany to fetch.
     */
    where?: UserCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanies to fetch.
     */
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCompanies.
     */
    cursor?: UserCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCompanies.
     */
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * UserCompany findMany
   */
  export type UserCompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter, which UserCompanies to fetch.
     */
    where?: UserCompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCompanies to fetch.
     */
    orderBy?: UserCompanyOrderByWithRelationInput | UserCompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCompanies.
     */
    cursor?: UserCompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCompanies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCompanies.
     */
    skip?: number
    distinct?: UserCompanyScalarFieldEnum | UserCompanyScalarFieldEnum[]
  }

  /**
   * UserCompany create
   */
  export type UserCompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCompany.
     */
    data: XOR<UserCompanyCreateInput, UserCompanyUncheckedCreateInput>
  }

  /**
   * UserCompany createMany
   */
  export type UserCompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCompanies.
     */
    data: UserCompanyCreateManyInput | UserCompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCompany createManyAndReturn
   */
  export type UserCompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserCompanies.
     */
    data: UserCompanyCreateManyInput | UserCompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCompany update
   */
  export type UserCompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCompany.
     */
    data: XOR<UserCompanyUpdateInput, UserCompanyUncheckedUpdateInput>
    /**
     * Choose, which UserCompany to update.
     */
    where: UserCompanyWhereUniqueInput
  }

  /**
   * UserCompany updateMany
   */
  export type UserCompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCompanies.
     */
    data: XOR<UserCompanyUpdateManyMutationInput, UserCompanyUncheckedUpdateManyInput>
    /**
     * Filter which UserCompanies to update
     */
    where?: UserCompanyWhereInput
  }

  /**
   * UserCompany upsert
   */
  export type UserCompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCompany to update in case it exists.
     */
    where: UserCompanyWhereUniqueInput
    /**
     * In case the UserCompany found by the `where` argument doesn't exist, create a new UserCompany with this data.
     */
    create: XOR<UserCompanyCreateInput, UserCompanyUncheckedCreateInput>
    /**
     * In case the UserCompany was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCompanyUpdateInput, UserCompanyUncheckedUpdateInput>
  }

  /**
   * UserCompany delete
   */
  export type UserCompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
    /**
     * Filter which UserCompany to delete.
     */
    where: UserCompanyWhereUniqueInput
  }

  /**
   * UserCompany deleteMany
   */
  export type UserCompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCompanies to delete
     */
    where?: UserCompanyWhereInput
  }

  /**
   * UserCompany without action
   */
  export type UserCompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCompany
     */
    select?: UserCompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCompanyInclude<ExtArgs> | null
  }


  /**
   * Model UserRoleMembership
   */

  export type AggregateUserRoleMembership = {
    _count: UserRoleMembershipCountAggregateOutputType | null
    _min: UserRoleMembershipMinAggregateOutputType | null
    _max: UserRoleMembershipMaxAggregateOutputType | null
  }

  export type UserRoleMembershipMinAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.UserRole | null
    scopeType: $Enums.RoleScope | null
    companyId: string | null
    projectId: string | null
    isDefault: boolean | null
    canApprove: boolean | null
    validFrom: Date | null
    validTo: Date | null
    createdBy: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRoleMembershipMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.UserRole | null
    scopeType: $Enums.RoleScope | null
    companyId: string | null
    projectId: string | null
    isDefault: boolean | null
    canApprove: boolean | null
    validFrom: Date | null
    validTo: Date | null
    createdBy: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRoleMembershipCountAggregateOutputType = {
    id: number
    userId: number
    role: number
    scopeType: number
    companyId: number
    projectId: number
    isDefault: number
    canApprove: number
    validFrom: number
    validTo: number
    createdBy: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserRoleMembershipMinAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    scopeType?: true
    companyId?: true
    projectId?: true
    isDefault?: true
    canApprove?: true
    validFrom?: true
    validTo?: true
    createdBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRoleMembershipMaxAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    scopeType?: true
    companyId?: true
    projectId?: true
    isDefault?: true
    canApprove?: true
    validFrom?: true
    validTo?: true
    createdBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRoleMembershipCountAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    scopeType?: true
    companyId?: true
    projectId?: true
    isDefault?: true
    canApprove?: true
    validFrom?: true
    validTo?: true
    createdBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserRoleMembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoleMembership to aggregate.
     */
    where?: UserRoleMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoleMemberships to fetch.
     */
    orderBy?: UserRoleMembershipOrderByWithRelationInput | UserRoleMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoleMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoleMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoleMemberships
    **/
    _count?: true | UserRoleMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMembershipMaxAggregateInputType
  }

  export type GetUserRoleMembershipAggregateType<T extends UserRoleMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRoleMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRoleMembership[P]>
      : GetScalarType<T[P], AggregateUserRoleMembership[P]>
  }




  export type UserRoleMembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleMembershipWhereInput
    orderBy?: UserRoleMembershipOrderByWithAggregationInput | UserRoleMembershipOrderByWithAggregationInput[]
    by: UserRoleMembershipScalarFieldEnum[] | UserRoleMembershipScalarFieldEnum
    having?: UserRoleMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleMembershipCountAggregateInputType | true
    _min?: UserRoleMembershipMinAggregateInputType
    _max?: UserRoleMembershipMaxAggregateInputType
  }

  export type UserRoleMembershipGroupByOutputType = {
    id: string
    userId: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    companyId: string | null
    projectId: string | null
    isDefault: boolean
    canApprove: boolean
    validFrom: Date | null
    validTo: Date | null
    createdBy: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserRoleMembershipCountAggregateOutputType | null
    _min: UserRoleMembershipMinAggregateOutputType | null
    _max: UserRoleMembershipMaxAggregateOutputType | null
  }

  type GetUserRoleMembershipGroupByPayload<T extends UserRoleMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleMembershipGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleMembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    scopeType?: boolean
    companyId?: boolean
    projectId?: boolean
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: boolean
    validTo?: boolean
    createdBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | UserRoleMembership$companyArgs<ExtArgs>
    project?: boolean | UserRoleMembership$projectArgs<ExtArgs>
  }, ExtArgs["result"]["userRoleMembership"]>

  export type UserRoleMembershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    scopeType?: boolean
    companyId?: boolean
    projectId?: boolean
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: boolean
    validTo?: boolean
    createdBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | UserRoleMembership$companyArgs<ExtArgs>
    project?: boolean | UserRoleMembership$projectArgs<ExtArgs>
  }, ExtArgs["result"]["userRoleMembership"]>

  export type UserRoleMembershipSelectScalar = {
    id?: boolean
    userId?: boolean
    role?: boolean
    scopeType?: boolean
    companyId?: boolean
    projectId?: boolean
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: boolean
    validTo?: boolean
    createdBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserRoleMembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | UserRoleMembership$companyArgs<ExtArgs>
    project?: boolean | UserRoleMembership$projectArgs<ExtArgs>
  }
  export type UserRoleMembershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | UserRoleMembership$companyArgs<ExtArgs>
    project?: boolean | UserRoleMembership$projectArgs<ExtArgs>
  }

  export type $UserRoleMembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRoleMembership"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      role: $Enums.UserRole
      scopeType: $Enums.RoleScope
      companyId: string | null
      projectId: string | null
      isDefault: boolean
      /**
       * NEW — matches the Explorer’s concept of “Authorised to Approve”
       */
      canApprove: boolean
      validFrom: Date | null
      validTo: Date | null
      createdBy: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userRoleMembership"]>
    composites: {}
  }

  type UserRoleMembershipGetPayload<S extends boolean | null | undefined | UserRoleMembershipDefaultArgs> = $Result.GetResult<Prisma.$UserRoleMembershipPayload, S>

  type UserRoleMembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRoleMembershipFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRoleMembershipCountAggregateInputType | true
    }

  export interface UserRoleMembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRoleMembership'], meta: { name: 'UserRoleMembership' } }
    /**
     * Find zero or one UserRoleMembership that matches the filter.
     * @param {UserRoleMembershipFindUniqueArgs} args - Arguments to find a UserRoleMembership
     * @example
     * // Get one UserRoleMembership
     * const userRoleMembership = await prisma.userRoleMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleMembershipFindUniqueArgs>(args: SelectSubset<T, UserRoleMembershipFindUniqueArgs<ExtArgs>>): Prisma__UserRoleMembershipClient<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRoleMembership that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRoleMembershipFindUniqueOrThrowArgs} args - Arguments to find a UserRoleMembership
     * @example
     * // Get one UserRoleMembership
     * const userRoleMembership = await prisma.userRoleMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleMembershipFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleMembershipClient<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRoleMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleMembershipFindFirstArgs} args - Arguments to find a UserRoleMembership
     * @example
     * // Get one UserRoleMembership
     * const userRoleMembership = await prisma.userRoleMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleMembershipFindFirstArgs>(args?: SelectSubset<T, UserRoleMembershipFindFirstArgs<ExtArgs>>): Prisma__UserRoleMembershipClient<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRoleMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleMembershipFindFirstOrThrowArgs} args - Arguments to find a UserRoleMembership
     * @example
     * // Get one UserRoleMembership
     * const userRoleMembership = await prisma.userRoleMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleMembershipFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleMembershipClient<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRoleMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoleMemberships
     * const userRoleMemberships = await prisma.userRoleMembership.findMany()
     * 
     * // Get first 10 UserRoleMemberships
     * const userRoleMemberships = await prisma.userRoleMembership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleMembershipWithIdOnly = await prisma.userRoleMembership.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRoleMembershipFindManyArgs>(args?: SelectSubset<T, UserRoleMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRoleMembership.
     * @param {UserRoleMembershipCreateArgs} args - Arguments to create a UserRoleMembership.
     * @example
     * // Create one UserRoleMembership
     * const UserRoleMembership = await prisma.userRoleMembership.create({
     *   data: {
     *     // ... data to create a UserRoleMembership
     *   }
     * })
     * 
     */
    create<T extends UserRoleMembershipCreateArgs>(args: SelectSubset<T, UserRoleMembershipCreateArgs<ExtArgs>>): Prisma__UserRoleMembershipClient<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRoleMemberships.
     * @param {UserRoleMembershipCreateManyArgs} args - Arguments to create many UserRoleMemberships.
     * @example
     * // Create many UserRoleMemberships
     * const userRoleMembership = await prisma.userRoleMembership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleMembershipCreateManyArgs>(args?: SelectSubset<T, UserRoleMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoleMemberships and returns the data saved in the database.
     * @param {UserRoleMembershipCreateManyAndReturnArgs} args - Arguments to create many UserRoleMemberships.
     * @example
     * // Create many UserRoleMemberships
     * const userRoleMembership = await prisma.userRoleMembership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoleMemberships and only return the `id`
     * const userRoleMembershipWithIdOnly = await prisma.userRoleMembership.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleMembershipCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserRoleMembership.
     * @param {UserRoleMembershipDeleteArgs} args - Arguments to delete one UserRoleMembership.
     * @example
     * // Delete one UserRoleMembership
     * const UserRoleMembership = await prisma.userRoleMembership.delete({
     *   where: {
     *     // ... filter to delete one UserRoleMembership
     *   }
     * })
     * 
     */
    delete<T extends UserRoleMembershipDeleteArgs>(args: SelectSubset<T, UserRoleMembershipDeleteArgs<ExtArgs>>): Prisma__UserRoleMembershipClient<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRoleMembership.
     * @param {UserRoleMembershipUpdateArgs} args - Arguments to update one UserRoleMembership.
     * @example
     * // Update one UserRoleMembership
     * const userRoleMembership = await prisma.userRoleMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleMembershipUpdateArgs>(args: SelectSubset<T, UserRoleMembershipUpdateArgs<ExtArgs>>): Prisma__UserRoleMembershipClient<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRoleMemberships.
     * @param {UserRoleMembershipDeleteManyArgs} args - Arguments to filter UserRoleMemberships to delete.
     * @example
     * // Delete a few UserRoleMemberships
     * const { count } = await prisma.userRoleMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleMembershipDeleteManyArgs>(args?: SelectSubset<T, UserRoleMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoleMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoleMemberships
     * const userRoleMembership = await prisma.userRoleMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleMembershipUpdateManyArgs>(args: SelectSubset<T, UserRoleMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRoleMembership.
     * @param {UserRoleMembershipUpsertArgs} args - Arguments to update or create a UserRoleMembership.
     * @example
     * // Update or create a UserRoleMembership
     * const userRoleMembership = await prisma.userRoleMembership.upsert({
     *   create: {
     *     // ... data to create a UserRoleMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRoleMembership we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleMembershipUpsertArgs>(args: SelectSubset<T, UserRoleMembershipUpsertArgs<ExtArgs>>): Prisma__UserRoleMembershipClient<$Result.GetResult<Prisma.$UserRoleMembershipPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRoleMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleMembershipCountArgs} args - Arguments to filter UserRoleMemberships to count.
     * @example
     * // Count the number of UserRoleMemberships
     * const count = await prisma.userRoleMembership.count({
     *   where: {
     *     // ... the filter for the UserRoleMemberships we want to count
     *   }
     * })
    **/
    count<T extends UserRoleMembershipCountArgs>(
      args?: Subset<T, UserRoleMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRoleMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleMembershipAggregateArgs>(args: Subset<T, UserRoleMembershipAggregateArgs>): Prisma.PrismaPromise<GetUserRoleMembershipAggregateType<T>>

    /**
     * Group by UserRoleMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleMembershipGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRoleMembership model
   */
  readonly fields: UserRoleMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRoleMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleMembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    company<T extends UserRoleMembership$companyArgs<ExtArgs> = {}>(args?: Subset<T, UserRoleMembership$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends UserRoleMembership$projectArgs<ExtArgs> = {}>(args?: Subset<T, UserRoleMembership$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRoleMembership model
   */ 
  interface UserRoleMembershipFieldRefs {
    readonly id: FieldRef<"UserRoleMembership", 'String'>
    readonly userId: FieldRef<"UserRoleMembership", 'String'>
    readonly role: FieldRef<"UserRoleMembership", 'UserRole'>
    readonly scopeType: FieldRef<"UserRoleMembership", 'RoleScope'>
    readonly companyId: FieldRef<"UserRoleMembership", 'String'>
    readonly projectId: FieldRef<"UserRoleMembership", 'String'>
    readonly isDefault: FieldRef<"UserRoleMembership", 'Boolean'>
    readonly canApprove: FieldRef<"UserRoleMembership", 'Boolean'>
    readonly validFrom: FieldRef<"UserRoleMembership", 'DateTime'>
    readonly validTo: FieldRef<"UserRoleMembership", 'DateTime'>
    readonly createdBy: FieldRef<"UserRoleMembership", 'String'>
    readonly notes: FieldRef<"UserRoleMembership", 'String'>
    readonly createdAt: FieldRef<"UserRoleMembership", 'DateTime'>
    readonly updatedAt: FieldRef<"UserRoleMembership", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserRoleMembership findUnique
   */
  export type UserRoleMembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * Filter, which UserRoleMembership to fetch.
     */
    where: UserRoleMembershipWhereUniqueInput
  }

  /**
   * UserRoleMembership findUniqueOrThrow
   */
  export type UserRoleMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * Filter, which UserRoleMembership to fetch.
     */
    where: UserRoleMembershipWhereUniqueInput
  }

  /**
   * UserRoleMembership findFirst
   */
  export type UserRoleMembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * Filter, which UserRoleMembership to fetch.
     */
    where?: UserRoleMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoleMemberships to fetch.
     */
    orderBy?: UserRoleMembershipOrderByWithRelationInput | UserRoleMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoleMemberships.
     */
    cursor?: UserRoleMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoleMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoleMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoleMemberships.
     */
    distinct?: UserRoleMembershipScalarFieldEnum | UserRoleMembershipScalarFieldEnum[]
  }

  /**
   * UserRoleMembership findFirstOrThrow
   */
  export type UserRoleMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * Filter, which UserRoleMembership to fetch.
     */
    where?: UserRoleMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoleMemberships to fetch.
     */
    orderBy?: UserRoleMembershipOrderByWithRelationInput | UserRoleMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoleMemberships.
     */
    cursor?: UserRoleMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoleMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoleMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoleMemberships.
     */
    distinct?: UserRoleMembershipScalarFieldEnum | UserRoleMembershipScalarFieldEnum[]
  }

  /**
   * UserRoleMembership findMany
   */
  export type UserRoleMembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * Filter, which UserRoleMemberships to fetch.
     */
    where?: UserRoleMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoleMemberships to fetch.
     */
    orderBy?: UserRoleMembershipOrderByWithRelationInput | UserRoleMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoleMemberships.
     */
    cursor?: UserRoleMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoleMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoleMemberships.
     */
    skip?: number
    distinct?: UserRoleMembershipScalarFieldEnum | UserRoleMembershipScalarFieldEnum[]
  }

  /**
   * UserRoleMembership create
   */
  export type UserRoleMembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRoleMembership.
     */
    data: XOR<UserRoleMembershipCreateInput, UserRoleMembershipUncheckedCreateInput>
  }

  /**
   * UserRoleMembership createMany
   */
  export type UserRoleMembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoleMemberships.
     */
    data: UserRoleMembershipCreateManyInput | UserRoleMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRoleMembership createManyAndReturn
   */
  export type UserRoleMembershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserRoleMemberships.
     */
    data: UserRoleMembershipCreateManyInput | UserRoleMembershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRoleMembership update
   */
  export type UserRoleMembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRoleMembership.
     */
    data: XOR<UserRoleMembershipUpdateInput, UserRoleMembershipUncheckedUpdateInput>
    /**
     * Choose, which UserRoleMembership to update.
     */
    where: UserRoleMembershipWhereUniqueInput
  }

  /**
   * UserRoleMembership updateMany
   */
  export type UserRoleMembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoleMemberships.
     */
    data: XOR<UserRoleMembershipUpdateManyMutationInput, UserRoleMembershipUncheckedUpdateManyInput>
    /**
     * Filter which UserRoleMemberships to update
     */
    where?: UserRoleMembershipWhereInput
  }

  /**
   * UserRoleMembership upsert
   */
  export type UserRoleMembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRoleMembership to update in case it exists.
     */
    where: UserRoleMembershipWhereUniqueInput
    /**
     * In case the UserRoleMembership found by the `where` argument doesn't exist, create a new UserRoleMembership with this data.
     */
    create: XOR<UserRoleMembershipCreateInput, UserRoleMembershipUncheckedCreateInput>
    /**
     * In case the UserRoleMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleMembershipUpdateInput, UserRoleMembershipUncheckedUpdateInput>
  }

  /**
   * UserRoleMembership delete
   */
  export type UserRoleMembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
    /**
     * Filter which UserRoleMembership to delete.
     */
    where: UserRoleMembershipWhereUniqueInput
  }

  /**
   * UserRoleMembership deleteMany
   */
  export type UserRoleMembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoleMemberships to delete
     */
    where?: UserRoleMembershipWhereInput
  }

  /**
   * UserRoleMembership.company
   */
  export type UserRoleMembership$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * UserRoleMembership.project
   */
  export type UserRoleMembership$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * UserRoleMembership without action
   */
  export type UserRoleMembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleMembership
     */
    select?: UserRoleMembershipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleMembershipInclude<ExtArgs> | null
  }


  /**
   * Model PermissionTemplate
   */

  export type AggregatePermissionTemplate = {
    _count: PermissionTemplateCountAggregateOutputType | null
    _min: PermissionTemplateMinAggregateOutputType | null
    _max: PermissionTemplateMaxAggregateOutputType | null
  }

  export type PermissionTemplateMinAggregateOutputType = {
    id: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionTemplateMaxAggregateOutputType = {
    id: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionTemplateCountAggregateOutputType = {
    id: number
    role: number
    matrix: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PermissionTemplateMinAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionTemplateMaxAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionTemplateCountAggregateInputType = {
    id?: true
    role?: true
    matrix?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PermissionTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionTemplate to aggregate.
     */
    where?: PermissionTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionTemplates to fetch.
     */
    orderBy?: PermissionTemplateOrderByWithRelationInput | PermissionTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PermissionTemplates
    **/
    _count?: true | PermissionTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionTemplateMaxAggregateInputType
  }

  export type GetPermissionTemplateAggregateType<T extends PermissionTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissionTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissionTemplate[P]>
      : GetScalarType<T[P], AggregatePermissionTemplate[P]>
  }




  export type PermissionTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionTemplateWhereInput
    orderBy?: PermissionTemplateOrderByWithAggregationInput | PermissionTemplateOrderByWithAggregationInput[]
    by: PermissionTemplateScalarFieldEnum[] | PermissionTemplateScalarFieldEnum
    having?: PermissionTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionTemplateCountAggregateInputType | true
    _min?: PermissionTemplateMinAggregateInputType
    _max?: PermissionTemplateMaxAggregateInputType
  }

  export type PermissionTemplateGroupByOutputType = {
    id: string
    role: $Enums.UserRole
    matrix: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: PermissionTemplateCountAggregateOutputType | null
    _min: PermissionTemplateMinAggregateOutputType | null
    _max: PermissionTemplateMaxAggregateOutputType | null
  }

  type GetPermissionTemplateGroupByPayload<T extends PermissionTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionTemplateGroupByOutputType[P]>
        }
      >
    >


  export type PermissionTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["permissionTemplate"]>

  export type PermissionTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["permissionTemplate"]>

  export type PermissionTemplateSelectScalar = {
    id?: boolean
    role?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $PermissionTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PermissionTemplate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.UserRole
      matrix: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["permissionTemplate"]>
    composites: {}
  }

  type PermissionTemplateGetPayload<S extends boolean | null | undefined | PermissionTemplateDefaultArgs> = $Result.GetResult<Prisma.$PermissionTemplatePayload, S>

  type PermissionTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionTemplateCountAggregateInputType | true
    }

  export interface PermissionTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PermissionTemplate'], meta: { name: 'PermissionTemplate' } }
    /**
     * Find zero or one PermissionTemplate that matches the filter.
     * @param {PermissionTemplateFindUniqueArgs} args - Arguments to find a PermissionTemplate
     * @example
     * // Get one PermissionTemplate
     * const permissionTemplate = await prisma.permissionTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionTemplateFindUniqueArgs>(args: SelectSubset<T, PermissionTemplateFindUniqueArgs<ExtArgs>>): Prisma__PermissionTemplateClient<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PermissionTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionTemplateFindUniqueOrThrowArgs} args - Arguments to find a PermissionTemplate
     * @example
     * // Get one PermissionTemplate
     * const permissionTemplate = await prisma.permissionTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionTemplateClient<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PermissionTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionTemplateFindFirstArgs} args - Arguments to find a PermissionTemplate
     * @example
     * // Get one PermissionTemplate
     * const permissionTemplate = await prisma.permissionTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionTemplateFindFirstArgs>(args?: SelectSubset<T, PermissionTemplateFindFirstArgs<ExtArgs>>): Prisma__PermissionTemplateClient<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PermissionTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionTemplateFindFirstOrThrowArgs} args - Arguments to find a PermissionTemplate
     * @example
     * // Get one PermissionTemplate
     * const permissionTemplate = await prisma.permissionTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionTemplateClient<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PermissionTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PermissionTemplates
     * const permissionTemplates = await prisma.permissionTemplate.findMany()
     * 
     * // Get first 10 PermissionTemplates
     * const permissionTemplates = await prisma.permissionTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionTemplateWithIdOnly = await prisma.permissionTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionTemplateFindManyArgs>(args?: SelectSubset<T, PermissionTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PermissionTemplate.
     * @param {PermissionTemplateCreateArgs} args - Arguments to create a PermissionTemplate.
     * @example
     * // Create one PermissionTemplate
     * const PermissionTemplate = await prisma.permissionTemplate.create({
     *   data: {
     *     // ... data to create a PermissionTemplate
     *   }
     * })
     * 
     */
    create<T extends PermissionTemplateCreateArgs>(args: SelectSubset<T, PermissionTemplateCreateArgs<ExtArgs>>): Prisma__PermissionTemplateClient<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PermissionTemplates.
     * @param {PermissionTemplateCreateManyArgs} args - Arguments to create many PermissionTemplates.
     * @example
     * // Create many PermissionTemplates
     * const permissionTemplate = await prisma.permissionTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionTemplateCreateManyArgs>(args?: SelectSubset<T, PermissionTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PermissionTemplates and returns the data saved in the database.
     * @param {PermissionTemplateCreateManyAndReturnArgs} args - Arguments to create many PermissionTemplates.
     * @example
     * // Create many PermissionTemplates
     * const permissionTemplate = await prisma.permissionTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PermissionTemplates and only return the `id`
     * const permissionTemplateWithIdOnly = await prisma.permissionTemplate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PermissionTemplate.
     * @param {PermissionTemplateDeleteArgs} args - Arguments to delete one PermissionTemplate.
     * @example
     * // Delete one PermissionTemplate
     * const PermissionTemplate = await prisma.permissionTemplate.delete({
     *   where: {
     *     // ... filter to delete one PermissionTemplate
     *   }
     * })
     * 
     */
    delete<T extends PermissionTemplateDeleteArgs>(args: SelectSubset<T, PermissionTemplateDeleteArgs<ExtArgs>>): Prisma__PermissionTemplateClient<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PermissionTemplate.
     * @param {PermissionTemplateUpdateArgs} args - Arguments to update one PermissionTemplate.
     * @example
     * // Update one PermissionTemplate
     * const permissionTemplate = await prisma.permissionTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionTemplateUpdateArgs>(args: SelectSubset<T, PermissionTemplateUpdateArgs<ExtArgs>>): Prisma__PermissionTemplateClient<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PermissionTemplates.
     * @param {PermissionTemplateDeleteManyArgs} args - Arguments to filter PermissionTemplates to delete.
     * @example
     * // Delete a few PermissionTemplates
     * const { count } = await prisma.permissionTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionTemplateDeleteManyArgs>(args?: SelectSubset<T, PermissionTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PermissionTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PermissionTemplates
     * const permissionTemplate = await prisma.permissionTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionTemplateUpdateManyArgs>(args: SelectSubset<T, PermissionTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PermissionTemplate.
     * @param {PermissionTemplateUpsertArgs} args - Arguments to update or create a PermissionTemplate.
     * @example
     * // Update or create a PermissionTemplate
     * const permissionTemplate = await prisma.permissionTemplate.upsert({
     *   create: {
     *     // ... data to create a PermissionTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PermissionTemplate we want to update
     *   }
     * })
     */
    upsert<T extends PermissionTemplateUpsertArgs>(args: SelectSubset<T, PermissionTemplateUpsertArgs<ExtArgs>>): Prisma__PermissionTemplateClient<$Result.GetResult<Prisma.$PermissionTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PermissionTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionTemplateCountArgs} args - Arguments to filter PermissionTemplates to count.
     * @example
     * // Count the number of PermissionTemplates
     * const count = await prisma.permissionTemplate.count({
     *   where: {
     *     // ... the filter for the PermissionTemplates we want to count
     *   }
     * })
    **/
    count<T extends PermissionTemplateCountArgs>(
      args?: Subset<T, PermissionTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PermissionTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionTemplateAggregateArgs>(args: Subset<T, PermissionTemplateAggregateArgs>): Prisma.PrismaPromise<GetPermissionTemplateAggregateType<T>>

    /**
     * Group by PermissionTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionTemplateGroupByArgs['orderBy'] }
        : { orderBy?: PermissionTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PermissionTemplate model
   */
  readonly fields: PermissionTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PermissionTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PermissionTemplate model
   */ 
  interface PermissionTemplateFieldRefs {
    readonly id: FieldRef<"PermissionTemplate", 'String'>
    readonly role: FieldRef<"PermissionTemplate", 'UserRole'>
    readonly matrix: FieldRef<"PermissionTemplate", 'Json'>
    readonly createdAt: FieldRef<"PermissionTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"PermissionTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PermissionTemplate findUnique
   */
  export type PermissionTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * Filter, which PermissionTemplate to fetch.
     */
    where: PermissionTemplateWhereUniqueInput
  }

  /**
   * PermissionTemplate findUniqueOrThrow
   */
  export type PermissionTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * Filter, which PermissionTemplate to fetch.
     */
    where: PermissionTemplateWhereUniqueInput
  }

  /**
   * PermissionTemplate findFirst
   */
  export type PermissionTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * Filter, which PermissionTemplate to fetch.
     */
    where?: PermissionTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionTemplates to fetch.
     */
    orderBy?: PermissionTemplateOrderByWithRelationInput | PermissionTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionTemplates.
     */
    cursor?: PermissionTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionTemplates.
     */
    distinct?: PermissionTemplateScalarFieldEnum | PermissionTemplateScalarFieldEnum[]
  }

  /**
   * PermissionTemplate findFirstOrThrow
   */
  export type PermissionTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * Filter, which PermissionTemplate to fetch.
     */
    where?: PermissionTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionTemplates to fetch.
     */
    orderBy?: PermissionTemplateOrderByWithRelationInput | PermissionTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionTemplates.
     */
    cursor?: PermissionTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionTemplates.
     */
    distinct?: PermissionTemplateScalarFieldEnum | PermissionTemplateScalarFieldEnum[]
  }

  /**
   * PermissionTemplate findMany
   */
  export type PermissionTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * Filter, which PermissionTemplates to fetch.
     */
    where?: PermissionTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionTemplates to fetch.
     */
    orderBy?: PermissionTemplateOrderByWithRelationInput | PermissionTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PermissionTemplates.
     */
    cursor?: PermissionTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionTemplates.
     */
    skip?: number
    distinct?: PermissionTemplateScalarFieldEnum | PermissionTemplateScalarFieldEnum[]
  }

  /**
   * PermissionTemplate create
   */
  export type PermissionTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * The data needed to create a PermissionTemplate.
     */
    data: XOR<PermissionTemplateCreateInput, PermissionTemplateUncheckedCreateInput>
  }

  /**
   * PermissionTemplate createMany
   */
  export type PermissionTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PermissionTemplates.
     */
    data: PermissionTemplateCreateManyInput | PermissionTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PermissionTemplate createManyAndReturn
   */
  export type PermissionTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PermissionTemplates.
     */
    data: PermissionTemplateCreateManyInput | PermissionTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PermissionTemplate update
   */
  export type PermissionTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * The data needed to update a PermissionTemplate.
     */
    data: XOR<PermissionTemplateUpdateInput, PermissionTemplateUncheckedUpdateInput>
    /**
     * Choose, which PermissionTemplate to update.
     */
    where: PermissionTemplateWhereUniqueInput
  }

  /**
   * PermissionTemplate updateMany
   */
  export type PermissionTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PermissionTemplates.
     */
    data: XOR<PermissionTemplateUpdateManyMutationInput, PermissionTemplateUncheckedUpdateManyInput>
    /**
     * Filter which PermissionTemplates to update
     */
    where?: PermissionTemplateWhereInput
  }

  /**
   * PermissionTemplate upsert
   */
  export type PermissionTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * The filter to search for the PermissionTemplate to update in case it exists.
     */
    where: PermissionTemplateWhereUniqueInput
    /**
     * In case the PermissionTemplate found by the `where` argument doesn't exist, create a new PermissionTemplate with this data.
     */
    create: XOR<PermissionTemplateCreateInput, PermissionTemplateUncheckedCreateInput>
    /**
     * In case the PermissionTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionTemplateUpdateInput, PermissionTemplateUncheckedUpdateInput>
  }

  /**
   * PermissionTemplate delete
   */
  export type PermissionTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
    /**
     * Filter which PermissionTemplate to delete.
     */
    where: PermissionTemplateWhereUniqueInput
  }

  /**
   * PermissionTemplate deleteMany
   */
  export type PermissionTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionTemplates to delete
     */
    where?: PermissionTemplateWhereInput
  }

  /**
   * PermissionTemplate without action
   */
  export type PermissionTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionTemplate
     */
    select?: PermissionTemplateSelect<ExtArgs> | null
  }


  /**
   * Model PermissionProjectOverride
   */

  export type AggregatePermissionProjectOverride = {
    _count: PermissionProjectOverrideCountAggregateOutputType | null
    _min: PermissionProjectOverrideMinAggregateOutputType | null
    _max: PermissionProjectOverrideMaxAggregateOutputType | null
  }

  export type PermissionProjectOverrideMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionProjectOverrideMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionProjectOverrideCountAggregateOutputType = {
    id: number
    projectId: number
    role: number
    matrix: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PermissionProjectOverrideMinAggregateInputType = {
    id?: true
    projectId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionProjectOverrideMaxAggregateInputType = {
    id?: true
    projectId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionProjectOverrideCountAggregateInputType = {
    id?: true
    projectId?: true
    role?: true
    matrix?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PermissionProjectOverrideAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionProjectOverride to aggregate.
     */
    where?: PermissionProjectOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionProjectOverrides to fetch.
     */
    orderBy?: PermissionProjectOverrideOrderByWithRelationInput | PermissionProjectOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionProjectOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionProjectOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionProjectOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PermissionProjectOverrides
    **/
    _count?: true | PermissionProjectOverrideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionProjectOverrideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionProjectOverrideMaxAggregateInputType
  }

  export type GetPermissionProjectOverrideAggregateType<T extends PermissionProjectOverrideAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissionProjectOverride]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissionProjectOverride[P]>
      : GetScalarType<T[P], AggregatePermissionProjectOverride[P]>
  }




  export type PermissionProjectOverrideGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionProjectOverrideWhereInput
    orderBy?: PermissionProjectOverrideOrderByWithAggregationInput | PermissionProjectOverrideOrderByWithAggregationInput[]
    by: PermissionProjectOverrideScalarFieldEnum[] | PermissionProjectOverrideScalarFieldEnum
    having?: PermissionProjectOverrideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionProjectOverrideCountAggregateInputType | true
    _min?: PermissionProjectOverrideMinAggregateInputType
    _max?: PermissionProjectOverrideMaxAggregateInputType
  }

  export type PermissionProjectOverrideGroupByOutputType = {
    id: string
    projectId: string
    role: $Enums.UserRole
    matrix: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: PermissionProjectOverrideCountAggregateOutputType | null
    _min: PermissionProjectOverrideMinAggregateOutputType | null
    _max: PermissionProjectOverrideMaxAggregateOutputType | null
  }

  type GetPermissionProjectOverrideGroupByPayload<T extends PermissionProjectOverrideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionProjectOverrideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionProjectOverrideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionProjectOverrideGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionProjectOverrideGroupByOutputType[P]>
        }
      >
    >


  export type PermissionProjectOverrideSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    role?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permissionProjectOverride"]>

  export type PermissionProjectOverrideSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    role?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permissionProjectOverride"]>

  export type PermissionProjectOverrideSelectScalar = {
    id?: boolean
    projectId?: boolean
    role?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PermissionProjectOverrideInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type PermissionProjectOverrideIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $PermissionProjectOverridePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PermissionProjectOverride"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      role: $Enums.UserRole
      matrix: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["permissionProjectOverride"]>
    composites: {}
  }

  type PermissionProjectOverrideGetPayload<S extends boolean | null | undefined | PermissionProjectOverrideDefaultArgs> = $Result.GetResult<Prisma.$PermissionProjectOverridePayload, S>

  type PermissionProjectOverrideCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionProjectOverrideFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionProjectOverrideCountAggregateInputType | true
    }

  export interface PermissionProjectOverrideDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PermissionProjectOverride'], meta: { name: 'PermissionProjectOverride' } }
    /**
     * Find zero or one PermissionProjectOverride that matches the filter.
     * @param {PermissionProjectOverrideFindUniqueArgs} args - Arguments to find a PermissionProjectOverride
     * @example
     * // Get one PermissionProjectOverride
     * const permissionProjectOverride = await prisma.permissionProjectOverride.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionProjectOverrideFindUniqueArgs>(args: SelectSubset<T, PermissionProjectOverrideFindUniqueArgs<ExtArgs>>): Prisma__PermissionProjectOverrideClient<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PermissionProjectOverride that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionProjectOverrideFindUniqueOrThrowArgs} args - Arguments to find a PermissionProjectOverride
     * @example
     * // Get one PermissionProjectOverride
     * const permissionProjectOverride = await prisma.permissionProjectOverride.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionProjectOverrideFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionProjectOverrideFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionProjectOverrideClient<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PermissionProjectOverride that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionProjectOverrideFindFirstArgs} args - Arguments to find a PermissionProjectOverride
     * @example
     * // Get one PermissionProjectOverride
     * const permissionProjectOverride = await prisma.permissionProjectOverride.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionProjectOverrideFindFirstArgs>(args?: SelectSubset<T, PermissionProjectOverrideFindFirstArgs<ExtArgs>>): Prisma__PermissionProjectOverrideClient<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PermissionProjectOverride that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionProjectOverrideFindFirstOrThrowArgs} args - Arguments to find a PermissionProjectOverride
     * @example
     * // Get one PermissionProjectOverride
     * const permissionProjectOverride = await prisma.permissionProjectOverride.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionProjectOverrideFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionProjectOverrideFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionProjectOverrideClient<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PermissionProjectOverrides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionProjectOverrideFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PermissionProjectOverrides
     * const permissionProjectOverrides = await prisma.permissionProjectOverride.findMany()
     * 
     * // Get first 10 PermissionProjectOverrides
     * const permissionProjectOverrides = await prisma.permissionProjectOverride.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionProjectOverrideWithIdOnly = await prisma.permissionProjectOverride.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionProjectOverrideFindManyArgs>(args?: SelectSubset<T, PermissionProjectOverrideFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PermissionProjectOverride.
     * @param {PermissionProjectOverrideCreateArgs} args - Arguments to create a PermissionProjectOverride.
     * @example
     * // Create one PermissionProjectOverride
     * const PermissionProjectOverride = await prisma.permissionProjectOverride.create({
     *   data: {
     *     // ... data to create a PermissionProjectOverride
     *   }
     * })
     * 
     */
    create<T extends PermissionProjectOverrideCreateArgs>(args: SelectSubset<T, PermissionProjectOverrideCreateArgs<ExtArgs>>): Prisma__PermissionProjectOverrideClient<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PermissionProjectOverrides.
     * @param {PermissionProjectOverrideCreateManyArgs} args - Arguments to create many PermissionProjectOverrides.
     * @example
     * // Create many PermissionProjectOverrides
     * const permissionProjectOverride = await prisma.permissionProjectOverride.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionProjectOverrideCreateManyArgs>(args?: SelectSubset<T, PermissionProjectOverrideCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PermissionProjectOverrides and returns the data saved in the database.
     * @param {PermissionProjectOverrideCreateManyAndReturnArgs} args - Arguments to create many PermissionProjectOverrides.
     * @example
     * // Create many PermissionProjectOverrides
     * const permissionProjectOverride = await prisma.permissionProjectOverride.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PermissionProjectOverrides and only return the `id`
     * const permissionProjectOverrideWithIdOnly = await prisma.permissionProjectOverride.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionProjectOverrideCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionProjectOverrideCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PermissionProjectOverride.
     * @param {PermissionProjectOverrideDeleteArgs} args - Arguments to delete one PermissionProjectOverride.
     * @example
     * // Delete one PermissionProjectOverride
     * const PermissionProjectOverride = await prisma.permissionProjectOverride.delete({
     *   where: {
     *     // ... filter to delete one PermissionProjectOverride
     *   }
     * })
     * 
     */
    delete<T extends PermissionProjectOverrideDeleteArgs>(args: SelectSubset<T, PermissionProjectOverrideDeleteArgs<ExtArgs>>): Prisma__PermissionProjectOverrideClient<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PermissionProjectOverride.
     * @param {PermissionProjectOverrideUpdateArgs} args - Arguments to update one PermissionProjectOverride.
     * @example
     * // Update one PermissionProjectOverride
     * const permissionProjectOverride = await prisma.permissionProjectOverride.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionProjectOverrideUpdateArgs>(args: SelectSubset<T, PermissionProjectOverrideUpdateArgs<ExtArgs>>): Prisma__PermissionProjectOverrideClient<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PermissionProjectOverrides.
     * @param {PermissionProjectOverrideDeleteManyArgs} args - Arguments to filter PermissionProjectOverrides to delete.
     * @example
     * // Delete a few PermissionProjectOverrides
     * const { count } = await prisma.permissionProjectOverride.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionProjectOverrideDeleteManyArgs>(args?: SelectSubset<T, PermissionProjectOverrideDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PermissionProjectOverrides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionProjectOverrideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PermissionProjectOverrides
     * const permissionProjectOverride = await prisma.permissionProjectOverride.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionProjectOverrideUpdateManyArgs>(args: SelectSubset<T, PermissionProjectOverrideUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PermissionProjectOverride.
     * @param {PermissionProjectOverrideUpsertArgs} args - Arguments to update or create a PermissionProjectOverride.
     * @example
     * // Update or create a PermissionProjectOverride
     * const permissionProjectOverride = await prisma.permissionProjectOverride.upsert({
     *   create: {
     *     // ... data to create a PermissionProjectOverride
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PermissionProjectOverride we want to update
     *   }
     * })
     */
    upsert<T extends PermissionProjectOverrideUpsertArgs>(args: SelectSubset<T, PermissionProjectOverrideUpsertArgs<ExtArgs>>): Prisma__PermissionProjectOverrideClient<$Result.GetResult<Prisma.$PermissionProjectOverridePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PermissionProjectOverrides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionProjectOverrideCountArgs} args - Arguments to filter PermissionProjectOverrides to count.
     * @example
     * // Count the number of PermissionProjectOverrides
     * const count = await prisma.permissionProjectOverride.count({
     *   where: {
     *     // ... the filter for the PermissionProjectOverrides we want to count
     *   }
     * })
    **/
    count<T extends PermissionProjectOverrideCountArgs>(
      args?: Subset<T, PermissionProjectOverrideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionProjectOverrideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PermissionProjectOverride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionProjectOverrideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionProjectOverrideAggregateArgs>(args: Subset<T, PermissionProjectOverrideAggregateArgs>): Prisma.PrismaPromise<GetPermissionProjectOverrideAggregateType<T>>

    /**
     * Group by PermissionProjectOverride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionProjectOverrideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionProjectOverrideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionProjectOverrideGroupByArgs['orderBy'] }
        : { orderBy?: PermissionProjectOverrideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionProjectOverrideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionProjectOverrideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PermissionProjectOverride model
   */
  readonly fields: PermissionProjectOverrideFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PermissionProjectOverride.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionProjectOverrideClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PermissionProjectOverride model
   */ 
  interface PermissionProjectOverrideFieldRefs {
    readonly id: FieldRef<"PermissionProjectOverride", 'String'>
    readonly projectId: FieldRef<"PermissionProjectOverride", 'String'>
    readonly role: FieldRef<"PermissionProjectOverride", 'UserRole'>
    readonly matrix: FieldRef<"PermissionProjectOverride", 'Json'>
    readonly createdAt: FieldRef<"PermissionProjectOverride", 'DateTime'>
    readonly updatedAt: FieldRef<"PermissionProjectOverride", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PermissionProjectOverride findUnique
   */
  export type PermissionProjectOverrideFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * Filter, which PermissionProjectOverride to fetch.
     */
    where: PermissionProjectOverrideWhereUniqueInput
  }

  /**
   * PermissionProjectOverride findUniqueOrThrow
   */
  export type PermissionProjectOverrideFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * Filter, which PermissionProjectOverride to fetch.
     */
    where: PermissionProjectOverrideWhereUniqueInput
  }

  /**
   * PermissionProjectOverride findFirst
   */
  export type PermissionProjectOverrideFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * Filter, which PermissionProjectOverride to fetch.
     */
    where?: PermissionProjectOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionProjectOverrides to fetch.
     */
    orderBy?: PermissionProjectOverrideOrderByWithRelationInput | PermissionProjectOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionProjectOverrides.
     */
    cursor?: PermissionProjectOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionProjectOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionProjectOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionProjectOverrides.
     */
    distinct?: PermissionProjectOverrideScalarFieldEnum | PermissionProjectOverrideScalarFieldEnum[]
  }

  /**
   * PermissionProjectOverride findFirstOrThrow
   */
  export type PermissionProjectOverrideFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * Filter, which PermissionProjectOverride to fetch.
     */
    where?: PermissionProjectOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionProjectOverrides to fetch.
     */
    orderBy?: PermissionProjectOverrideOrderByWithRelationInput | PermissionProjectOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionProjectOverrides.
     */
    cursor?: PermissionProjectOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionProjectOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionProjectOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionProjectOverrides.
     */
    distinct?: PermissionProjectOverrideScalarFieldEnum | PermissionProjectOverrideScalarFieldEnum[]
  }

  /**
   * PermissionProjectOverride findMany
   */
  export type PermissionProjectOverrideFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * Filter, which PermissionProjectOverrides to fetch.
     */
    where?: PermissionProjectOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionProjectOverrides to fetch.
     */
    orderBy?: PermissionProjectOverrideOrderByWithRelationInput | PermissionProjectOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PermissionProjectOverrides.
     */
    cursor?: PermissionProjectOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionProjectOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionProjectOverrides.
     */
    skip?: number
    distinct?: PermissionProjectOverrideScalarFieldEnum | PermissionProjectOverrideScalarFieldEnum[]
  }

  /**
   * PermissionProjectOverride create
   */
  export type PermissionProjectOverrideCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * The data needed to create a PermissionProjectOverride.
     */
    data: XOR<PermissionProjectOverrideCreateInput, PermissionProjectOverrideUncheckedCreateInput>
  }

  /**
   * PermissionProjectOverride createMany
   */
  export type PermissionProjectOverrideCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PermissionProjectOverrides.
     */
    data: PermissionProjectOverrideCreateManyInput | PermissionProjectOverrideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PermissionProjectOverride createManyAndReturn
   */
  export type PermissionProjectOverrideCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PermissionProjectOverrides.
     */
    data: PermissionProjectOverrideCreateManyInput | PermissionProjectOverrideCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PermissionProjectOverride update
   */
  export type PermissionProjectOverrideUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * The data needed to update a PermissionProjectOverride.
     */
    data: XOR<PermissionProjectOverrideUpdateInput, PermissionProjectOverrideUncheckedUpdateInput>
    /**
     * Choose, which PermissionProjectOverride to update.
     */
    where: PermissionProjectOverrideWhereUniqueInput
  }

  /**
   * PermissionProjectOverride updateMany
   */
  export type PermissionProjectOverrideUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PermissionProjectOverrides.
     */
    data: XOR<PermissionProjectOverrideUpdateManyMutationInput, PermissionProjectOverrideUncheckedUpdateManyInput>
    /**
     * Filter which PermissionProjectOverrides to update
     */
    where?: PermissionProjectOverrideWhereInput
  }

  /**
   * PermissionProjectOverride upsert
   */
  export type PermissionProjectOverrideUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * The filter to search for the PermissionProjectOverride to update in case it exists.
     */
    where: PermissionProjectOverrideWhereUniqueInput
    /**
     * In case the PermissionProjectOverride found by the `where` argument doesn't exist, create a new PermissionProjectOverride with this data.
     */
    create: XOR<PermissionProjectOverrideCreateInput, PermissionProjectOverrideUncheckedCreateInput>
    /**
     * In case the PermissionProjectOverride was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionProjectOverrideUpdateInput, PermissionProjectOverrideUncheckedUpdateInput>
  }

  /**
   * PermissionProjectOverride delete
   */
  export type PermissionProjectOverrideDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
    /**
     * Filter which PermissionProjectOverride to delete.
     */
    where: PermissionProjectOverrideWhereUniqueInput
  }

  /**
   * PermissionProjectOverride deleteMany
   */
  export type PermissionProjectOverrideDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionProjectOverrides to delete
     */
    where?: PermissionProjectOverrideWhereInput
  }

  /**
   * PermissionProjectOverride without action
   */
  export type PermissionProjectOverrideDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionProjectOverride
     */
    select?: PermissionProjectOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionProjectOverrideInclude<ExtArgs> | null
  }


  /**
   * Model PermissionUserOverride
   */

  export type AggregatePermissionUserOverride = {
    _count: PermissionUserOverrideCountAggregateOutputType | null
    _min: PermissionUserOverrideMinAggregateOutputType | null
    _max: PermissionUserOverrideMaxAggregateOutputType | null
  }

  export type PermissionUserOverrideMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionUserOverrideMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionUserOverrideCountAggregateOutputType = {
    id: number
    projectId: number
    userId: number
    matrix: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PermissionUserOverrideMinAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionUserOverrideMaxAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionUserOverrideCountAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    matrix?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PermissionUserOverrideAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionUserOverride to aggregate.
     */
    where?: PermissionUserOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionUserOverrides to fetch.
     */
    orderBy?: PermissionUserOverrideOrderByWithRelationInput | PermissionUserOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionUserOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionUserOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionUserOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PermissionUserOverrides
    **/
    _count?: true | PermissionUserOverrideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionUserOverrideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionUserOverrideMaxAggregateInputType
  }

  export type GetPermissionUserOverrideAggregateType<T extends PermissionUserOverrideAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissionUserOverride]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissionUserOverride[P]>
      : GetScalarType<T[P], AggregatePermissionUserOverride[P]>
  }




  export type PermissionUserOverrideGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionUserOverrideWhereInput
    orderBy?: PermissionUserOverrideOrderByWithAggregationInput | PermissionUserOverrideOrderByWithAggregationInput[]
    by: PermissionUserOverrideScalarFieldEnum[] | PermissionUserOverrideScalarFieldEnum
    having?: PermissionUserOverrideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionUserOverrideCountAggregateInputType | true
    _min?: PermissionUserOverrideMinAggregateInputType
    _max?: PermissionUserOverrideMaxAggregateInputType
  }

  export type PermissionUserOverrideGroupByOutputType = {
    id: string
    projectId: string
    userId: string
    matrix: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: PermissionUserOverrideCountAggregateOutputType | null
    _min: PermissionUserOverrideMinAggregateOutputType | null
    _max: PermissionUserOverrideMaxAggregateOutputType | null
  }

  type GetPermissionUserOverrideGroupByPayload<T extends PermissionUserOverrideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionUserOverrideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionUserOverrideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionUserOverrideGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionUserOverrideGroupByOutputType[P]>
        }
      >
    >


  export type PermissionUserOverrideSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    userId?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["permissionUserOverride"]>

  export type PermissionUserOverrideSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    userId?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["permissionUserOverride"]>

  export type PermissionUserOverrideSelectScalar = {
    id?: boolean
    projectId?: boolean
    userId?: boolean
    matrix?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $PermissionUserOverridePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PermissionUserOverride"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      userId: string
      /**
       * shape: { [moduleCode]: { view?: "inherit"|"deny", raise?:..., review?:..., approve?:..., close?:... } }
       */
      matrix: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["permissionUserOverride"]>
    composites: {}
  }

  type PermissionUserOverrideGetPayload<S extends boolean | null | undefined | PermissionUserOverrideDefaultArgs> = $Result.GetResult<Prisma.$PermissionUserOverridePayload, S>

  type PermissionUserOverrideCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionUserOverrideFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionUserOverrideCountAggregateInputType | true
    }

  export interface PermissionUserOverrideDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PermissionUserOverride'], meta: { name: 'PermissionUserOverride' } }
    /**
     * Find zero or one PermissionUserOverride that matches the filter.
     * @param {PermissionUserOverrideFindUniqueArgs} args - Arguments to find a PermissionUserOverride
     * @example
     * // Get one PermissionUserOverride
     * const permissionUserOverride = await prisma.permissionUserOverride.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionUserOverrideFindUniqueArgs>(args: SelectSubset<T, PermissionUserOverrideFindUniqueArgs<ExtArgs>>): Prisma__PermissionUserOverrideClient<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PermissionUserOverride that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionUserOverrideFindUniqueOrThrowArgs} args - Arguments to find a PermissionUserOverride
     * @example
     * // Get one PermissionUserOverride
     * const permissionUserOverride = await prisma.permissionUserOverride.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionUserOverrideFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionUserOverrideFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionUserOverrideClient<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PermissionUserOverride that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUserOverrideFindFirstArgs} args - Arguments to find a PermissionUserOverride
     * @example
     * // Get one PermissionUserOverride
     * const permissionUserOverride = await prisma.permissionUserOverride.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionUserOverrideFindFirstArgs>(args?: SelectSubset<T, PermissionUserOverrideFindFirstArgs<ExtArgs>>): Prisma__PermissionUserOverrideClient<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PermissionUserOverride that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUserOverrideFindFirstOrThrowArgs} args - Arguments to find a PermissionUserOverride
     * @example
     * // Get one PermissionUserOverride
     * const permissionUserOverride = await prisma.permissionUserOverride.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionUserOverrideFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionUserOverrideFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionUserOverrideClient<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PermissionUserOverrides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUserOverrideFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PermissionUserOverrides
     * const permissionUserOverrides = await prisma.permissionUserOverride.findMany()
     * 
     * // Get first 10 PermissionUserOverrides
     * const permissionUserOverrides = await prisma.permissionUserOverride.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionUserOverrideWithIdOnly = await prisma.permissionUserOverride.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionUserOverrideFindManyArgs>(args?: SelectSubset<T, PermissionUserOverrideFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PermissionUserOverride.
     * @param {PermissionUserOverrideCreateArgs} args - Arguments to create a PermissionUserOverride.
     * @example
     * // Create one PermissionUserOverride
     * const PermissionUserOverride = await prisma.permissionUserOverride.create({
     *   data: {
     *     // ... data to create a PermissionUserOverride
     *   }
     * })
     * 
     */
    create<T extends PermissionUserOverrideCreateArgs>(args: SelectSubset<T, PermissionUserOverrideCreateArgs<ExtArgs>>): Prisma__PermissionUserOverrideClient<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PermissionUserOverrides.
     * @param {PermissionUserOverrideCreateManyArgs} args - Arguments to create many PermissionUserOverrides.
     * @example
     * // Create many PermissionUserOverrides
     * const permissionUserOverride = await prisma.permissionUserOverride.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionUserOverrideCreateManyArgs>(args?: SelectSubset<T, PermissionUserOverrideCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PermissionUserOverrides and returns the data saved in the database.
     * @param {PermissionUserOverrideCreateManyAndReturnArgs} args - Arguments to create many PermissionUserOverrides.
     * @example
     * // Create many PermissionUserOverrides
     * const permissionUserOverride = await prisma.permissionUserOverride.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PermissionUserOverrides and only return the `id`
     * const permissionUserOverrideWithIdOnly = await prisma.permissionUserOverride.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionUserOverrideCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionUserOverrideCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PermissionUserOverride.
     * @param {PermissionUserOverrideDeleteArgs} args - Arguments to delete one PermissionUserOverride.
     * @example
     * // Delete one PermissionUserOverride
     * const PermissionUserOverride = await prisma.permissionUserOverride.delete({
     *   where: {
     *     // ... filter to delete one PermissionUserOverride
     *   }
     * })
     * 
     */
    delete<T extends PermissionUserOverrideDeleteArgs>(args: SelectSubset<T, PermissionUserOverrideDeleteArgs<ExtArgs>>): Prisma__PermissionUserOverrideClient<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PermissionUserOverride.
     * @param {PermissionUserOverrideUpdateArgs} args - Arguments to update one PermissionUserOverride.
     * @example
     * // Update one PermissionUserOverride
     * const permissionUserOverride = await prisma.permissionUserOverride.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUserOverrideUpdateArgs>(args: SelectSubset<T, PermissionUserOverrideUpdateArgs<ExtArgs>>): Prisma__PermissionUserOverrideClient<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PermissionUserOverrides.
     * @param {PermissionUserOverrideDeleteManyArgs} args - Arguments to filter PermissionUserOverrides to delete.
     * @example
     * // Delete a few PermissionUserOverrides
     * const { count } = await prisma.permissionUserOverride.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionUserOverrideDeleteManyArgs>(args?: SelectSubset<T, PermissionUserOverrideDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PermissionUserOverrides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUserOverrideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PermissionUserOverrides
     * const permissionUserOverride = await prisma.permissionUserOverride.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUserOverrideUpdateManyArgs>(args: SelectSubset<T, PermissionUserOverrideUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PermissionUserOverride.
     * @param {PermissionUserOverrideUpsertArgs} args - Arguments to update or create a PermissionUserOverride.
     * @example
     * // Update or create a PermissionUserOverride
     * const permissionUserOverride = await prisma.permissionUserOverride.upsert({
     *   create: {
     *     // ... data to create a PermissionUserOverride
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PermissionUserOverride we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUserOverrideUpsertArgs>(args: SelectSubset<T, PermissionUserOverrideUpsertArgs<ExtArgs>>): Prisma__PermissionUserOverrideClient<$Result.GetResult<Prisma.$PermissionUserOverridePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PermissionUserOverrides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUserOverrideCountArgs} args - Arguments to filter PermissionUserOverrides to count.
     * @example
     * // Count the number of PermissionUserOverrides
     * const count = await prisma.permissionUserOverride.count({
     *   where: {
     *     // ... the filter for the PermissionUserOverrides we want to count
     *   }
     * })
    **/
    count<T extends PermissionUserOverrideCountArgs>(
      args?: Subset<T, PermissionUserOverrideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionUserOverrideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PermissionUserOverride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUserOverrideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionUserOverrideAggregateArgs>(args: Subset<T, PermissionUserOverrideAggregateArgs>): Prisma.PrismaPromise<GetPermissionUserOverrideAggregateType<T>>

    /**
     * Group by PermissionUserOverride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUserOverrideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionUserOverrideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionUserOverrideGroupByArgs['orderBy'] }
        : { orderBy?: PermissionUserOverrideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionUserOverrideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionUserOverrideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PermissionUserOverride model
   */
  readonly fields: PermissionUserOverrideFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PermissionUserOverride.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionUserOverrideClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PermissionUserOverride model
   */ 
  interface PermissionUserOverrideFieldRefs {
    readonly id: FieldRef<"PermissionUserOverride", 'String'>
    readonly projectId: FieldRef<"PermissionUserOverride", 'String'>
    readonly userId: FieldRef<"PermissionUserOverride", 'String'>
    readonly matrix: FieldRef<"PermissionUserOverride", 'Json'>
    readonly createdAt: FieldRef<"PermissionUserOverride", 'DateTime'>
    readonly updatedAt: FieldRef<"PermissionUserOverride", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PermissionUserOverride findUnique
   */
  export type PermissionUserOverrideFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * Filter, which PermissionUserOverride to fetch.
     */
    where: PermissionUserOverrideWhereUniqueInput
  }

  /**
   * PermissionUserOverride findUniqueOrThrow
   */
  export type PermissionUserOverrideFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * Filter, which PermissionUserOverride to fetch.
     */
    where: PermissionUserOverrideWhereUniqueInput
  }

  /**
   * PermissionUserOverride findFirst
   */
  export type PermissionUserOverrideFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * Filter, which PermissionUserOverride to fetch.
     */
    where?: PermissionUserOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionUserOverrides to fetch.
     */
    orderBy?: PermissionUserOverrideOrderByWithRelationInput | PermissionUserOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionUserOverrides.
     */
    cursor?: PermissionUserOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionUserOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionUserOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionUserOverrides.
     */
    distinct?: PermissionUserOverrideScalarFieldEnum | PermissionUserOverrideScalarFieldEnum[]
  }

  /**
   * PermissionUserOverride findFirstOrThrow
   */
  export type PermissionUserOverrideFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * Filter, which PermissionUserOverride to fetch.
     */
    where?: PermissionUserOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionUserOverrides to fetch.
     */
    orderBy?: PermissionUserOverrideOrderByWithRelationInput | PermissionUserOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionUserOverrides.
     */
    cursor?: PermissionUserOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionUserOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionUserOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionUserOverrides.
     */
    distinct?: PermissionUserOverrideScalarFieldEnum | PermissionUserOverrideScalarFieldEnum[]
  }

  /**
   * PermissionUserOverride findMany
   */
  export type PermissionUserOverrideFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * Filter, which PermissionUserOverrides to fetch.
     */
    where?: PermissionUserOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionUserOverrides to fetch.
     */
    orderBy?: PermissionUserOverrideOrderByWithRelationInput | PermissionUserOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PermissionUserOverrides.
     */
    cursor?: PermissionUserOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionUserOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionUserOverrides.
     */
    skip?: number
    distinct?: PermissionUserOverrideScalarFieldEnum | PermissionUserOverrideScalarFieldEnum[]
  }

  /**
   * PermissionUserOverride create
   */
  export type PermissionUserOverrideCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * The data needed to create a PermissionUserOverride.
     */
    data: XOR<PermissionUserOverrideCreateInput, PermissionUserOverrideUncheckedCreateInput>
  }

  /**
   * PermissionUserOverride createMany
   */
  export type PermissionUserOverrideCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PermissionUserOverrides.
     */
    data: PermissionUserOverrideCreateManyInput | PermissionUserOverrideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PermissionUserOverride createManyAndReturn
   */
  export type PermissionUserOverrideCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PermissionUserOverrides.
     */
    data: PermissionUserOverrideCreateManyInput | PermissionUserOverrideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PermissionUserOverride update
   */
  export type PermissionUserOverrideUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * The data needed to update a PermissionUserOverride.
     */
    data: XOR<PermissionUserOverrideUpdateInput, PermissionUserOverrideUncheckedUpdateInput>
    /**
     * Choose, which PermissionUserOverride to update.
     */
    where: PermissionUserOverrideWhereUniqueInput
  }

  /**
   * PermissionUserOverride updateMany
   */
  export type PermissionUserOverrideUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PermissionUserOverrides.
     */
    data: XOR<PermissionUserOverrideUpdateManyMutationInput, PermissionUserOverrideUncheckedUpdateManyInput>
    /**
     * Filter which PermissionUserOverrides to update
     */
    where?: PermissionUserOverrideWhereInput
  }

  /**
   * PermissionUserOverride upsert
   */
  export type PermissionUserOverrideUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * The filter to search for the PermissionUserOverride to update in case it exists.
     */
    where: PermissionUserOverrideWhereUniqueInput
    /**
     * In case the PermissionUserOverride found by the `where` argument doesn't exist, create a new PermissionUserOverride with this data.
     */
    create: XOR<PermissionUserOverrideCreateInput, PermissionUserOverrideUncheckedCreateInput>
    /**
     * In case the PermissionUserOverride was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUserOverrideUpdateInput, PermissionUserOverrideUncheckedUpdateInput>
  }

  /**
   * PermissionUserOverride delete
   */
  export type PermissionUserOverrideDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
    /**
     * Filter which PermissionUserOverride to delete.
     */
    where: PermissionUserOverrideWhereUniqueInput
  }

  /**
   * PermissionUserOverride deleteMany
   */
  export type PermissionUserOverrideDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionUserOverrides to delete
     */
    where?: PermissionUserOverrideWhereInput
  }

  /**
   * PermissionUserOverride without action
   */
  export type PermissionUserOverrideDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionUserOverride
     */
    select?: PermissionUserOverrideSelect<ExtArgs> | null
  }


  /**
   * Model RefChecklist
   */

  export type AggregateRefChecklist = {
    _count: RefChecklistCountAggregateOutputType | null
    _avg: RefChecklistAvgAggregateOutputType | null
    _sum: RefChecklistSumAggregateOutputType | null
    _min: RefChecklistMinAggregateOutputType | null
    _max: RefChecklistMaxAggregateOutputType | null
  }

  export type RefChecklistAvgAggregateOutputType = {
    version: number | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
  }

  export type RefChecklistSumAggregateOutputType = {
    version: number | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
  }

  export type RefChecklistMinAggregateOutputType = {
    id: string | null
    code: string | null
    title: string | null
    discipline: $Enums.Discipline | null
    stageLabel: string | null
    status: string | null
    version: number | null
    versionLabel: string | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
    aiDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RefChecklistMaxAggregateOutputType = {
    id: string | null
    code: string | null
    title: string | null
    discipline: $Enums.Discipline | null
    stageLabel: string | null
    status: string | null
    version: number | null
    versionLabel: string | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
    aiDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RefChecklistCountAggregateOutputType = {
    id: number
    code: number
    title: number
    discipline: number
    stageLabel: number
    tags: number
    status: number
    version: number
    versionLabel: number
    versionMajor: number
    versionMinor: number
    versionPatch: number
    aiDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RefChecklistAvgAggregateInputType = {
    version?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
  }

  export type RefChecklistSumAggregateInputType = {
    version?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
  }

  export type RefChecklistMinAggregateInputType = {
    id?: true
    code?: true
    title?: true
    discipline?: true
    stageLabel?: true
    status?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    aiDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RefChecklistMaxAggregateInputType = {
    id?: true
    code?: true
    title?: true
    discipline?: true
    stageLabel?: true
    status?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    aiDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RefChecklistCountAggregateInputType = {
    id?: true
    code?: true
    title?: true
    discipline?: true
    stageLabel?: true
    tags?: true
    status?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    aiDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RefChecklistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefChecklist to aggregate.
     */
    where?: RefChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklists to fetch.
     */
    orderBy?: RefChecklistOrderByWithRelationInput | RefChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefChecklists
    **/
    _count?: true | RefChecklistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefChecklistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefChecklistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefChecklistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefChecklistMaxAggregateInputType
  }

  export type GetRefChecklistAggregateType<T extends RefChecklistAggregateArgs> = {
        [P in keyof T & keyof AggregateRefChecklist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefChecklist[P]>
      : GetScalarType<T[P], AggregateRefChecklist[P]>
  }




  export type RefChecklistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistWhereInput
    orderBy?: RefChecklistOrderByWithAggregationInput | RefChecklistOrderByWithAggregationInput[]
    by: RefChecklistScalarFieldEnum[] | RefChecklistScalarFieldEnum
    having?: RefChecklistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefChecklistCountAggregateInputType | true
    _avg?: RefChecklistAvgAggregateInputType
    _sum?: RefChecklistSumAggregateInputType
    _min?: RefChecklistMinAggregateInputType
    _max?: RefChecklistMaxAggregateInputType
  }

  export type RefChecklistGroupByOutputType = {
    id: string
    code: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel: string | null
    tags: string[]
    status: string
    version: number
    versionLabel: string | null
    versionMajor: number
    versionMinor: number
    versionPatch: number
    aiDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: RefChecklistCountAggregateOutputType | null
    _avg: RefChecklistAvgAggregateOutputType | null
    _sum: RefChecklistSumAggregateOutputType | null
    _min: RefChecklistMinAggregateOutputType | null
    _max: RefChecklistMaxAggregateOutputType | null
  }

  type GetRefChecklistGroupByPayload<T extends RefChecklistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefChecklistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefChecklistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefChecklistGroupByOutputType[P]>
            : GetScalarType<T[P], RefChecklistGroupByOutputType[P]>
        }
      >
    >


  export type RefChecklistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    discipline?: boolean
    stageLabel?: boolean
    tags?: boolean
    status?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    aiDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | RefChecklist$itemsArgs<ExtArgs>
    _count?: boolean | RefChecklistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refChecklist"]>

  export type RefChecklistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    discipline?: boolean
    stageLabel?: boolean
    tags?: boolean
    status?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    aiDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["refChecklist"]>

  export type RefChecklistSelectScalar = {
    id?: boolean
    code?: boolean
    title?: boolean
    discipline?: boolean
    stageLabel?: boolean
    tags?: boolean
    status?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    aiDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RefChecklistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | RefChecklist$itemsArgs<ExtArgs>
    _count?: boolean | RefChecklistCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RefChecklistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RefChecklistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefChecklist"
    objects: {
      items: Prisma.$RefChecklistItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string | null
      title: string
      discipline: $Enums.Discipline
      stageLabel: string | null
      tags: string[]
      status: string
      version: number
      versionLabel: string | null
      versionMajor: number
      versionMinor: number
      versionPatch: number
      aiDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["refChecklist"]>
    composites: {}
  }

  type RefChecklistGetPayload<S extends boolean | null | undefined | RefChecklistDefaultArgs> = $Result.GetResult<Prisma.$RefChecklistPayload, S>

  type RefChecklistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefChecklistFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefChecklistCountAggregateInputType | true
    }

  export interface RefChecklistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefChecklist'], meta: { name: 'RefChecklist' } }
    /**
     * Find zero or one RefChecklist that matches the filter.
     * @param {RefChecklistFindUniqueArgs} args - Arguments to find a RefChecklist
     * @example
     * // Get one RefChecklist
     * const refChecklist = await prisma.refChecklist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefChecklistFindUniqueArgs>(args: SelectSubset<T, RefChecklistFindUniqueArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefChecklist that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefChecklistFindUniqueOrThrowArgs} args - Arguments to find a RefChecklist
     * @example
     * // Get one RefChecklist
     * const refChecklist = await prisma.refChecklist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefChecklistFindUniqueOrThrowArgs>(args: SelectSubset<T, RefChecklistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefChecklist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistFindFirstArgs} args - Arguments to find a RefChecklist
     * @example
     * // Get one RefChecklist
     * const refChecklist = await prisma.refChecklist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefChecklistFindFirstArgs>(args?: SelectSubset<T, RefChecklistFindFirstArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefChecklist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistFindFirstOrThrowArgs} args - Arguments to find a RefChecklist
     * @example
     * // Get one RefChecklist
     * const refChecklist = await prisma.refChecklist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefChecklistFindFirstOrThrowArgs>(args?: SelectSubset<T, RefChecklistFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefChecklists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefChecklists
     * const refChecklists = await prisma.refChecklist.findMany()
     * 
     * // Get first 10 RefChecklists
     * const refChecklists = await prisma.refChecklist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refChecklistWithIdOnly = await prisma.refChecklist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefChecklistFindManyArgs>(args?: SelectSubset<T, RefChecklistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefChecklist.
     * @param {RefChecklistCreateArgs} args - Arguments to create a RefChecklist.
     * @example
     * // Create one RefChecklist
     * const RefChecklist = await prisma.refChecklist.create({
     *   data: {
     *     // ... data to create a RefChecklist
     *   }
     * })
     * 
     */
    create<T extends RefChecklistCreateArgs>(args: SelectSubset<T, RefChecklistCreateArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefChecklists.
     * @param {RefChecklistCreateManyArgs} args - Arguments to create many RefChecklists.
     * @example
     * // Create many RefChecklists
     * const refChecklist = await prisma.refChecklist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefChecklistCreateManyArgs>(args?: SelectSubset<T, RefChecklistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefChecklists and returns the data saved in the database.
     * @param {RefChecklistCreateManyAndReturnArgs} args - Arguments to create many RefChecklists.
     * @example
     * // Create many RefChecklists
     * const refChecklist = await prisma.refChecklist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefChecklists and only return the `id`
     * const refChecklistWithIdOnly = await prisma.refChecklist.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefChecklistCreateManyAndReturnArgs>(args?: SelectSubset<T, RefChecklistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefChecklist.
     * @param {RefChecklistDeleteArgs} args - Arguments to delete one RefChecklist.
     * @example
     * // Delete one RefChecklist
     * const RefChecklist = await prisma.refChecklist.delete({
     *   where: {
     *     // ... filter to delete one RefChecklist
     *   }
     * })
     * 
     */
    delete<T extends RefChecklistDeleteArgs>(args: SelectSubset<T, RefChecklistDeleteArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefChecklist.
     * @param {RefChecklistUpdateArgs} args - Arguments to update one RefChecklist.
     * @example
     * // Update one RefChecklist
     * const refChecklist = await prisma.refChecklist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefChecklistUpdateArgs>(args: SelectSubset<T, RefChecklistUpdateArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefChecklists.
     * @param {RefChecklistDeleteManyArgs} args - Arguments to filter RefChecklists to delete.
     * @example
     * // Delete a few RefChecklists
     * const { count } = await prisma.refChecklist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefChecklistDeleteManyArgs>(args?: SelectSubset<T, RefChecklistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefChecklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefChecklists
     * const refChecklist = await prisma.refChecklist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefChecklistUpdateManyArgs>(args: SelectSubset<T, RefChecklistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefChecklist.
     * @param {RefChecklistUpsertArgs} args - Arguments to update or create a RefChecklist.
     * @example
     * // Update or create a RefChecklist
     * const refChecklist = await prisma.refChecklist.upsert({
     *   create: {
     *     // ... data to create a RefChecklist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefChecklist we want to update
     *   }
     * })
     */
    upsert<T extends RefChecklistUpsertArgs>(args: SelectSubset<T, RefChecklistUpsertArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefChecklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistCountArgs} args - Arguments to filter RefChecklists to count.
     * @example
     * // Count the number of RefChecklists
     * const count = await prisma.refChecklist.count({
     *   where: {
     *     // ... the filter for the RefChecklists we want to count
     *   }
     * })
    **/
    count<T extends RefChecklistCountArgs>(
      args?: Subset<T, RefChecklistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefChecklistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefChecklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefChecklistAggregateArgs>(args: Subset<T, RefChecklistAggregateArgs>): Prisma.PrismaPromise<GetRefChecklistAggregateType<T>>

    /**
     * Group by RefChecklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefChecklistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefChecklistGroupByArgs['orderBy'] }
        : { orderBy?: RefChecklistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefChecklistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefChecklistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefChecklist model
   */
  readonly fields: RefChecklistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefChecklist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefChecklistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends RefChecklist$itemsArgs<ExtArgs> = {}>(args?: Subset<T, RefChecklist$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefChecklist model
   */ 
  interface RefChecklistFieldRefs {
    readonly id: FieldRef<"RefChecklist", 'String'>
    readonly code: FieldRef<"RefChecklist", 'String'>
    readonly title: FieldRef<"RefChecklist", 'String'>
    readonly discipline: FieldRef<"RefChecklist", 'Discipline'>
    readonly stageLabel: FieldRef<"RefChecklist", 'String'>
    readonly tags: FieldRef<"RefChecklist", 'String[]'>
    readonly status: FieldRef<"RefChecklist", 'String'>
    readonly version: FieldRef<"RefChecklist", 'Int'>
    readonly versionLabel: FieldRef<"RefChecklist", 'String'>
    readonly versionMajor: FieldRef<"RefChecklist", 'Int'>
    readonly versionMinor: FieldRef<"RefChecklist", 'Int'>
    readonly versionPatch: FieldRef<"RefChecklist", 'Int'>
    readonly aiDefault: FieldRef<"RefChecklist", 'Boolean'>
    readonly createdAt: FieldRef<"RefChecklist", 'DateTime'>
    readonly updatedAt: FieldRef<"RefChecklist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefChecklist findUnique
   */
  export type RefChecklistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklist to fetch.
     */
    where: RefChecklistWhereUniqueInput
  }

  /**
   * RefChecklist findUniqueOrThrow
   */
  export type RefChecklistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklist to fetch.
     */
    where: RefChecklistWhereUniqueInput
  }

  /**
   * RefChecklist findFirst
   */
  export type RefChecklistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklist to fetch.
     */
    where?: RefChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklists to fetch.
     */
    orderBy?: RefChecklistOrderByWithRelationInput | RefChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefChecklists.
     */
    cursor?: RefChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefChecklists.
     */
    distinct?: RefChecklistScalarFieldEnum | RefChecklistScalarFieldEnum[]
  }

  /**
   * RefChecklist findFirstOrThrow
   */
  export type RefChecklistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklist to fetch.
     */
    where?: RefChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklists to fetch.
     */
    orderBy?: RefChecklistOrderByWithRelationInput | RefChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefChecklists.
     */
    cursor?: RefChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefChecklists.
     */
    distinct?: RefChecklistScalarFieldEnum | RefChecklistScalarFieldEnum[]
  }

  /**
   * RefChecklist findMany
   */
  export type RefChecklistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklists to fetch.
     */
    where?: RefChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklists to fetch.
     */
    orderBy?: RefChecklistOrderByWithRelationInput | RefChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefChecklists.
     */
    cursor?: RefChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklists.
     */
    skip?: number
    distinct?: RefChecklistScalarFieldEnum | RefChecklistScalarFieldEnum[]
  }

  /**
   * RefChecklist create
   */
  export type RefChecklistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * The data needed to create a RefChecklist.
     */
    data: XOR<RefChecklistCreateInput, RefChecklistUncheckedCreateInput>
  }

  /**
   * RefChecklist createMany
   */
  export type RefChecklistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefChecklists.
     */
    data: RefChecklistCreateManyInput | RefChecklistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefChecklist createManyAndReturn
   */
  export type RefChecklistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefChecklists.
     */
    data: RefChecklistCreateManyInput | RefChecklistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefChecklist update
   */
  export type RefChecklistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * The data needed to update a RefChecklist.
     */
    data: XOR<RefChecklistUpdateInput, RefChecklistUncheckedUpdateInput>
    /**
     * Choose, which RefChecklist to update.
     */
    where: RefChecklistWhereUniqueInput
  }

  /**
   * RefChecklist updateMany
   */
  export type RefChecklistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefChecklists.
     */
    data: XOR<RefChecklistUpdateManyMutationInput, RefChecklistUncheckedUpdateManyInput>
    /**
     * Filter which RefChecklists to update
     */
    where?: RefChecklistWhereInput
  }

  /**
   * RefChecklist upsert
   */
  export type RefChecklistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * The filter to search for the RefChecklist to update in case it exists.
     */
    where: RefChecklistWhereUniqueInput
    /**
     * In case the RefChecklist found by the `where` argument doesn't exist, create a new RefChecklist with this data.
     */
    create: XOR<RefChecklistCreateInput, RefChecklistUncheckedCreateInput>
    /**
     * In case the RefChecklist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefChecklistUpdateInput, RefChecklistUncheckedUpdateInput>
  }

  /**
   * RefChecklist delete
   */
  export type RefChecklistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
    /**
     * Filter which RefChecklist to delete.
     */
    where: RefChecklistWhereUniqueInput
  }

  /**
   * RefChecklist deleteMany
   */
  export type RefChecklistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefChecklists to delete
     */
    where?: RefChecklistWhereInput
  }

  /**
   * RefChecklist.items
   */
  export type RefChecklist$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    where?: RefChecklistItemWhereInput
    orderBy?: RefChecklistItemOrderByWithRelationInput | RefChecklistItemOrderByWithRelationInput[]
    cursor?: RefChecklistItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefChecklistItemScalarFieldEnum | RefChecklistItemScalarFieldEnum[]
  }

  /**
   * RefChecklist without action
   */
  export type RefChecklistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklist
     */
    select?: RefChecklistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistInclude<ExtArgs> | null
  }


  /**
   * Model RefChecklistItem
   */

  export type AggregateRefChecklistItem = {
    _count: RefChecklistItemCountAggregateOutputType | null
    _avg: RefChecklistItemAvgAggregateOutputType | null
    _sum: RefChecklistItemSumAggregateOutputType | null
    _min: RefChecklistItemMinAggregateOutputType | null
    _max: RefChecklistItemMaxAggregateOutputType | null
  }

  export type RefChecklistItemAvgAggregateOutputType = {
    seq: number | null
    aiConfidence: Decimal | null
    base: Decimal | null
    plus: Decimal | null
    minus: Decimal | null
  }

  export type RefChecklistItemSumAggregateOutputType = {
    seq: number | null
    aiConfidence: Decimal | null
    base: Decimal | null
    plus: Decimal | null
    minus: Decimal | null
  }

  export type RefChecklistItemMinAggregateOutputType = {
    id: string | null
    checklistId: string | null
    seq: number | null
    text: string | null
    requirement: string | null
    risk: string | null
    itemCode: string | null
    critical: boolean | null
    aiEnabled: boolean | null
    aiConfidence: Decimal | null
    units: string | null
    tolerance: string | null
    base: Decimal | null
    plus: Decimal | null
    minus: Decimal | null
  }

  export type RefChecklistItemMaxAggregateOutputType = {
    id: string | null
    checklistId: string | null
    seq: number | null
    text: string | null
    requirement: string | null
    risk: string | null
    itemCode: string | null
    critical: boolean | null
    aiEnabled: boolean | null
    aiConfidence: Decimal | null
    units: string | null
    tolerance: string | null
    base: Decimal | null
    plus: Decimal | null
    minus: Decimal | null
  }

  export type RefChecklistItemCountAggregateOutputType = {
    id: number
    checklistId: number
    seq: number
    text: number
    requirement: number
    method: number
    risk: number
    tags: number
    itemCode: number
    critical: number
    aiEnabled: number
    aiConfidence: number
    units: number
    tolerance: number
    base: number
    plus: number
    minus: number
    _all: number
  }


  export type RefChecklistItemAvgAggregateInputType = {
    seq?: true
    aiConfidence?: true
    base?: true
    plus?: true
    minus?: true
  }

  export type RefChecklistItemSumAggregateInputType = {
    seq?: true
    aiConfidence?: true
    base?: true
    plus?: true
    minus?: true
  }

  export type RefChecklistItemMinAggregateInputType = {
    id?: true
    checklistId?: true
    seq?: true
    text?: true
    requirement?: true
    risk?: true
    itemCode?: true
    critical?: true
    aiEnabled?: true
    aiConfidence?: true
    units?: true
    tolerance?: true
    base?: true
    plus?: true
    minus?: true
  }

  export type RefChecklistItemMaxAggregateInputType = {
    id?: true
    checklistId?: true
    seq?: true
    text?: true
    requirement?: true
    risk?: true
    itemCode?: true
    critical?: true
    aiEnabled?: true
    aiConfidence?: true
    units?: true
    tolerance?: true
    base?: true
    plus?: true
    minus?: true
  }

  export type RefChecklistItemCountAggregateInputType = {
    id?: true
    checklistId?: true
    seq?: true
    text?: true
    requirement?: true
    method?: true
    risk?: true
    tags?: true
    itemCode?: true
    critical?: true
    aiEnabled?: true
    aiConfidence?: true
    units?: true
    tolerance?: true
    base?: true
    plus?: true
    minus?: true
    _all?: true
  }

  export type RefChecklistItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefChecklistItem to aggregate.
     */
    where?: RefChecklistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItems to fetch.
     */
    orderBy?: RefChecklistItemOrderByWithRelationInput | RefChecklistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefChecklistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefChecklistItems
    **/
    _count?: true | RefChecklistItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefChecklistItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefChecklistItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefChecklistItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefChecklistItemMaxAggregateInputType
  }

  export type GetRefChecklistItemAggregateType<T extends RefChecklistItemAggregateArgs> = {
        [P in keyof T & keyof AggregateRefChecklistItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefChecklistItem[P]>
      : GetScalarType<T[P], AggregateRefChecklistItem[P]>
  }




  export type RefChecklistItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistItemWhereInput
    orderBy?: RefChecklistItemOrderByWithAggregationInput | RefChecklistItemOrderByWithAggregationInput[]
    by: RefChecklistItemScalarFieldEnum[] | RefChecklistItemScalarFieldEnum
    having?: RefChecklistItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefChecklistItemCountAggregateInputType | true
    _avg?: RefChecklistItemAvgAggregateInputType
    _sum?: RefChecklistItemSumAggregateInputType
    _min?: RefChecklistItemMinAggregateInputType
    _max?: RefChecklistItemMaxAggregateInputType
  }

  export type RefChecklistItemGroupByOutputType = {
    id: string
    checklistId: string
    seq: number
    text: string
    requirement: string | null
    method: string[]
    risk: string | null
    tags: string[]
    itemCode: string | null
    critical: boolean | null
    aiEnabled: boolean | null
    aiConfidence: Decimal | null
    units: string | null
    tolerance: string | null
    base: Decimal | null
    plus: Decimal | null
    minus: Decimal | null
    _count: RefChecklistItemCountAggregateOutputType | null
    _avg: RefChecklistItemAvgAggregateOutputType | null
    _sum: RefChecklistItemSumAggregateOutputType | null
    _min: RefChecklistItemMinAggregateOutputType | null
    _max: RefChecklistItemMaxAggregateOutputType | null
  }

  type GetRefChecklistItemGroupByPayload<T extends RefChecklistItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefChecklistItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefChecklistItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefChecklistItemGroupByOutputType[P]>
            : GetScalarType<T[P], RefChecklistItemGroupByOutputType[P]>
        }
      >
    >


  export type RefChecklistItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checklistId?: boolean
    seq?: boolean
    text?: boolean
    requirement?: boolean
    method?: boolean
    risk?: boolean
    tags?: boolean
    itemCode?: boolean
    critical?: boolean
    aiEnabled?: boolean
    aiConfidence?: boolean
    units?: boolean
    tolerance?: boolean
    base?: boolean
    plus?: boolean
    minus?: boolean
    checklist?: boolean | RefChecklistDefaultArgs<ExtArgs>
    suggestedActivities?: boolean | RefChecklistItem$suggestedActivitiesArgs<ExtArgs>
    suggestedMaterials?: boolean | RefChecklistItem$suggestedMaterialsArgs<ExtArgs>
    _count?: boolean | RefChecklistItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refChecklistItem"]>

  export type RefChecklistItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checklistId?: boolean
    seq?: boolean
    text?: boolean
    requirement?: boolean
    method?: boolean
    risk?: boolean
    tags?: boolean
    itemCode?: boolean
    critical?: boolean
    aiEnabled?: boolean
    aiConfidence?: boolean
    units?: boolean
    tolerance?: boolean
    base?: boolean
    plus?: boolean
    minus?: boolean
    checklist?: boolean | RefChecklistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refChecklistItem"]>

  export type RefChecklistItemSelectScalar = {
    id?: boolean
    checklistId?: boolean
    seq?: boolean
    text?: boolean
    requirement?: boolean
    method?: boolean
    risk?: boolean
    tags?: boolean
    itemCode?: boolean
    critical?: boolean
    aiEnabled?: boolean
    aiConfidence?: boolean
    units?: boolean
    tolerance?: boolean
    base?: boolean
    plus?: boolean
    minus?: boolean
  }

  export type RefChecklistItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checklist?: boolean | RefChecklistDefaultArgs<ExtArgs>
    suggestedActivities?: boolean | RefChecklistItem$suggestedActivitiesArgs<ExtArgs>
    suggestedMaterials?: boolean | RefChecklistItem$suggestedMaterialsArgs<ExtArgs>
    _count?: boolean | RefChecklistItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RefChecklistItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checklist?: boolean | RefChecklistDefaultArgs<ExtArgs>
  }

  export type $RefChecklistItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefChecklistItem"
    objects: {
      checklist: Prisma.$RefChecklistPayload<ExtArgs>
      suggestedActivities: Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>[]
      suggestedMaterials: Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      checklistId: string
      seq: number
      text: string
      requirement: string | null
      method: string[]
      risk: string | null
      tags: string[]
      itemCode: string | null
      critical: boolean | null
      aiEnabled: boolean | null
      aiConfidence: Prisma.Decimal | null
      units: string | null
      tolerance: string | null
      base: Prisma.Decimal | null
      plus: Prisma.Decimal | null
      minus: Prisma.Decimal | null
    }, ExtArgs["result"]["refChecklistItem"]>
    composites: {}
  }

  type RefChecklistItemGetPayload<S extends boolean | null | undefined | RefChecklistItemDefaultArgs> = $Result.GetResult<Prisma.$RefChecklistItemPayload, S>

  type RefChecklistItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefChecklistItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefChecklistItemCountAggregateInputType | true
    }

  export interface RefChecklistItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefChecklistItem'], meta: { name: 'RefChecklistItem' } }
    /**
     * Find zero or one RefChecklistItem that matches the filter.
     * @param {RefChecklistItemFindUniqueArgs} args - Arguments to find a RefChecklistItem
     * @example
     * // Get one RefChecklistItem
     * const refChecklistItem = await prisma.refChecklistItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefChecklistItemFindUniqueArgs>(args: SelectSubset<T, RefChecklistItemFindUniqueArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefChecklistItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefChecklistItemFindUniqueOrThrowArgs} args - Arguments to find a RefChecklistItem
     * @example
     * // Get one RefChecklistItem
     * const refChecklistItem = await prisma.refChecklistItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefChecklistItemFindUniqueOrThrowArgs>(args: SelectSubset<T, RefChecklistItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefChecklistItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemFindFirstArgs} args - Arguments to find a RefChecklistItem
     * @example
     * // Get one RefChecklistItem
     * const refChecklistItem = await prisma.refChecklistItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefChecklistItemFindFirstArgs>(args?: SelectSubset<T, RefChecklistItemFindFirstArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefChecklistItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemFindFirstOrThrowArgs} args - Arguments to find a RefChecklistItem
     * @example
     * // Get one RefChecklistItem
     * const refChecklistItem = await prisma.refChecklistItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefChecklistItemFindFirstOrThrowArgs>(args?: SelectSubset<T, RefChecklistItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefChecklistItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefChecklistItems
     * const refChecklistItems = await prisma.refChecklistItem.findMany()
     * 
     * // Get first 10 RefChecklistItems
     * const refChecklistItems = await prisma.refChecklistItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refChecklistItemWithIdOnly = await prisma.refChecklistItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefChecklistItemFindManyArgs>(args?: SelectSubset<T, RefChecklistItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefChecklistItem.
     * @param {RefChecklistItemCreateArgs} args - Arguments to create a RefChecklistItem.
     * @example
     * // Create one RefChecklistItem
     * const RefChecklistItem = await prisma.refChecklistItem.create({
     *   data: {
     *     // ... data to create a RefChecklistItem
     *   }
     * })
     * 
     */
    create<T extends RefChecklistItemCreateArgs>(args: SelectSubset<T, RefChecklistItemCreateArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefChecklistItems.
     * @param {RefChecklistItemCreateManyArgs} args - Arguments to create many RefChecklistItems.
     * @example
     * // Create many RefChecklistItems
     * const refChecklistItem = await prisma.refChecklistItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefChecklistItemCreateManyArgs>(args?: SelectSubset<T, RefChecklistItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefChecklistItems and returns the data saved in the database.
     * @param {RefChecklistItemCreateManyAndReturnArgs} args - Arguments to create many RefChecklistItems.
     * @example
     * // Create many RefChecklistItems
     * const refChecklistItem = await prisma.refChecklistItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefChecklistItems and only return the `id`
     * const refChecklistItemWithIdOnly = await prisma.refChecklistItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefChecklistItemCreateManyAndReturnArgs>(args?: SelectSubset<T, RefChecklistItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefChecklistItem.
     * @param {RefChecklistItemDeleteArgs} args - Arguments to delete one RefChecklistItem.
     * @example
     * // Delete one RefChecklistItem
     * const RefChecklistItem = await prisma.refChecklistItem.delete({
     *   where: {
     *     // ... filter to delete one RefChecklistItem
     *   }
     * })
     * 
     */
    delete<T extends RefChecklistItemDeleteArgs>(args: SelectSubset<T, RefChecklistItemDeleteArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefChecklistItem.
     * @param {RefChecklistItemUpdateArgs} args - Arguments to update one RefChecklistItem.
     * @example
     * // Update one RefChecklistItem
     * const refChecklistItem = await prisma.refChecklistItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefChecklistItemUpdateArgs>(args: SelectSubset<T, RefChecklistItemUpdateArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefChecklistItems.
     * @param {RefChecklistItemDeleteManyArgs} args - Arguments to filter RefChecklistItems to delete.
     * @example
     * // Delete a few RefChecklistItems
     * const { count } = await prisma.refChecklistItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefChecklistItemDeleteManyArgs>(args?: SelectSubset<T, RefChecklistItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefChecklistItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefChecklistItems
     * const refChecklistItem = await prisma.refChecklistItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefChecklistItemUpdateManyArgs>(args: SelectSubset<T, RefChecklistItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefChecklistItem.
     * @param {RefChecklistItemUpsertArgs} args - Arguments to update or create a RefChecklistItem.
     * @example
     * // Update or create a RefChecklistItem
     * const refChecklistItem = await prisma.refChecklistItem.upsert({
     *   create: {
     *     // ... data to create a RefChecklistItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefChecklistItem we want to update
     *   }
     * })
     */
    upsert<T extends RefChecklistItemUpsertArgs>(args: SelectSubset<T, RefChecklistItemUpsertArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefChecklistItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemCountArgs} args - Arguments to filter RefChecklistItems to count.
     * @example
     * // Count the number of RefChecklistItems
     * const count = await prisma.refChecklistItem.count({
     *   where: {
     *     // ... the filter for the RefChecklistItems we want to count
     *   }
     * })
    **/
    count<T extends RefChecklistItemCountArgs>(
      args?: Subset<T, RefChecklistItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefChecklistItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefChecklistItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefChecklistItemAggregateArgs>(args: Subset<T, RefChecklistItemAggregateArgs>): Prisma.PrismaPromise<GetRefChecklistItemAggregateType<T>>

    /**
     * Group by RefChecklistItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefChecklistItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefChecklistItemGroupByArgs['orderBy'] }
        : { orderBy?: RefChecklistItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefChecklistItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefChecklistItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefChecklistItem model
   */
  readonly fields: RefChecklistItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefChecklistItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefChecklistItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    checklist<T extends RefChecklistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RefChecklistDefaultArgs<ExtArgs>>): Prisma__RefChecklistClient<$Result.GetResult<Prisma.$RefChecklistPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    suggestedActivities<T extends RefChecklistItem$suggestedActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, RefChecklistItem$suggestedActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "findMany"> | Null>
    suggestedMaterials<T extends RefChecklistItem$suggestedMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, RefChecklistItem$suggestedMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefChecklistItem model
   */ 
  interface RefChecklistItemFieldRefs {
    readonly id: FieldRef<"RefChecklistItem", 'String'>
    readonly checklistId: FieldRef<"RefChecklistItem", 'String'>
    readonly seq: FieldRef<"RefChecklistItem", 'Int'>
    readonly text: FieldRef<"RefChecklistItem", 'String'>
    readonly requirement: FieldRef<"RefChecklistItem", 'String'>
    readonly method: FieldRef<"RefChecklistItem", 'String[]'>
    readonly risk: FieldRef<"RefChecklistItem", 'String'>
    readonly tags: FieldRef<"RefChecklistItem", 'String[]'>
    readonly itemCode: FieldRef<"RefChecklistItem", 'String'>
    readonly critical: FieldRef<"RefChecklistItem", 'Boolean'>
    readonly aiEnabled: FieldRef<"RefChecklistItem", 'Boolean'>
    readonly aiConfidence: FieldRef<"RefChecklistItem", 'Decimal'>
    readonly units: FieldRef<"RefChecklistItem", 'String'>
    readonly tolerance: FieldRef<"RefChecklistItem", 'String'>
    readonly base: FieldRef<"RefChecklistItem", 'Decimal'>
    readonly plus: FieldRef<"RefChecklistItem", 'Decimal'>
    readonly minus: FieldRef<"RefChecklistItem", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * RefChecklistItem findUnique
   */
  export type RefChecklistItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItem to fetch.
     */
    where: RefChecklistItemWhereUniqueInput
  }

  /**
   * RefChecklistItem findUniqueOrThrow
   */
  export type RefChecklistItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItem to fetch.
     */
    where: RefChecklistItemWhereUniqueInput
  }

  /**
   * RefChecklistItem findFirst
   */
  export type RefChecklistItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItem to fetch.
     */
    where?: RefChecklistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItems to fetch.
     */
    orderBy?: RefChecklistItemOrderByWithRelationInput | RefChecklistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefChecklistItems.
     */
    cursor?: RefChecklistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefChecklistItems.
     */
    distinct?: RefChecklistItemScalarFieldEnum | RefChecklistItemScalarFieldEnum[]
  }

  /**
   * RefChecklistItem findFirstOrThrow
   */
  export type RefChecklistItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItem to fetch.
     */
    where?: RefChecklistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItems to fetch.
     */
    orderBy?: RefChecklistItemOrderByWithRelationInput | RefChecklistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefChecklistItems.
     */
    cursor?: RefChecklistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefChecklistItems.
     */
    distinct?: RefChecklistItemScalarFieldEnum | RefChecklistItemScalarFieldEnum[]
  }

  /**
   * RefChecklistItem findMany
   */
  export type RefChecklistItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItems to fetch.
     */
    where?: RefChecklistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItems to fetch.
     */
    orderBy?: RefChecklistItemOrderByWithRelationInput | RefChecklistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefChecklistItems.
     */
    cursor?: RefChecklistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItems.
     */
    skip?: number
    distinct?: RefChecklistItemScalarFieldEnum | RefChecklistItemScalarFieldEnum[]
  }

  /**
   * RefChecklistItem create
   */
  export type RefChecklistItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * The data needed to create a RefChecklistItem.
     */
    data: XOR<RefChecklistItemCreateInput, RefChecklistItemUncheckedCreateInput>
  }

  /**
   * RefChecklistItem createMany
   */
  export type RefChecklistItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefChecklistItems.
     */
    data: RefChecklistItemCreateManyInput | RefChecklistItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefChecklistItem createManyAndReturn
   */
  export type RefChecklistItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefChecklistItems.
     */
    data: RefChecklistItemCreateManyInput | RefChecklistItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefChecklistItem update
   */
  export type RefChecklistItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * The data needed to update a RefChecklistItem.
     */
    data: XOR<RefChecklistItemUpdateInput, RefChecklistItemUncheckedUpdateInput>
    /**
     * Choose, which RefChecklistItem to update.
     */
    where: RefChecklistItemWhereUniqueInput
  }

  /**
   * RefChecklistItem updateMany
   */
  export type RefChecklistItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefChecklistItems.
     */
    data: XOR<RefChecklistItemUpdateManyMutationInput, RefChecklistItemUncheckedUpdateManyInput>
    /**
     * Filter which RefChecklistItems to update
     */
    where?: RefChecklistItemWhereInput
  }

  /**
   * RefChecklistItem upsert
   */
  export type RefChecklistItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * The filter to search for the RefChecklistItem to update in case it exists.
     */
    where: RefChecklistItemWhereUniqueInput
    /**
     * In case the RefChecklistItem found by the `where` argument doesn't exist, create a new RefChecklistItem with this data.
     */
    create: XOR<RefChecklistItemCreateInput, RefChecklistItemUncheckedCreateInput>
    /**
     * In case the RefChecklistItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefChecklistItemUpdateInput, RefChecklistItemUncheckedUpdateInput>
  }

  /**
   * RefChecklistItem delete
   */
  export type RefChecklistItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
    /**
     * Filter which RefChecklistItem to delete.
     */
    where: RefChecklistItemWhereUniqueInput
  }

  /**
   * RefChecklistItem deleteMany
   */
  export type RefChecklistItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefChecklistItems to delete
     */
    where?: RefChecklistItemWhereInput
  }

  /**
   * RefChecklistItem.suggestedActivities
   */
  export type RefChecklistItem$suggestedActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    where?: RefChecklistItemActivityLinkWhereInput
    orderBy?: RefChecklistItemActivityLinkOrderByWithRelationInput | RefChecklistItemActivityLinkOrderByWithRelationInput[]
    cursor?: RefChecklistItemActivityLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefChecklistItemActivityLinkScalarFieldEnum | RefChecklistItemActivityLinkScalarFieldEnum[]
  }

  /**
   * RefChecklistItem.suggestedMaterials
   */
  export type RefChecklistItem$suggestedMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    where?: RefChecklistItemMaterialLinkWhereInput
    orderBy?: RefChecklistItemMaterialLinkOrderByWithRelationInput | RefChecklistItemMaterialLinkOrderByWithRelationInput[]
    cursor?: RefChecklistItemMaterialLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefChecklistItemMaterialLinkScalarFieldEnum | RefChecklistItemMaterialLinkScalarFieldEnum[]
  }

  /**
   * RefChecklistItem without action
   */
  export type RefChecklistItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItem
     */
    select?: RefChecklistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemInclude<ExtArgs> | null
  }


  /**
   * Model RefChecklistItemActivityLink
   */

  export type AggregateRefChecklistItemActivityLink = {
    _count: RefChecklistItemActivityLinkCountAggregateOutputType | null
    _min: RefChecklistItemActivityLinkMinAggregateOutputType | null
    _max: RefChecklistItemActivityLinkMaxAggregateOutputType | null
  }

  export type RefChecklistItemActivityLinkMinAggregateOutputType = {
    id: string | null
    itemId: string | null
    activityId: string | null
    label: string | null
  }

  export type RefChecklistItemActivityLinkMaxAggregateOutputType = {
    id: string | null
    itemId: string | null
    activityId: string | null
    label: string | null
  }

  export type RefChecklistItemActivityLinkCountAggregateOutputType = {
    id: number
    itemId: number
    activityId: number
    label: number
    tags: number
    _all: number
  }


  export type RefChecklistItemActivityLinkMinAggregateInputType = {
    id?: true
    itemId?: true
    activityId?: true
    label?: true
  }

  export type RefChecklistItemActivityLinkMaxAggregateInputType = {
    id?: true
    itemId?: true
    activityId?: true
    label?: true
  }

  export type RefChecklistItemActivityLinkCountAggregateInputType = {
    id?: true
    itemId?: true
    activityId?: true
    label?: true
    tags?: true
    _all?: true
  }

  export type RefChecklistItemActivityLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefChecklistItemActivityLink to aggregate.
     */
    where?: RefChecklistItemActivityLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItemActivityLinks to fetch.
     */
    orderBy?: RefChecklistItemActivityLinkOrderByWithRelationInput | RefChecklistItemActivityLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefChecklistItemActivityLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItemActivityLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItemActivityLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefChecklistItemActivityLinks
    **/
    _count?: true | RefChecklistItemActivityLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefChecklistItemActivityLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefChecklistItemActivityLinkMaxAggregateInputType
  }

  export type GetRefChecklistItemActivityLinkAggregateType<T extends RefChecklistItemActivityLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateRefChecklistItemActivityLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefChecklistItemActivityLink[P]>
      : GetScalarType<T[P], AggregateRefChecklistItemActivityLink[P]>
  }




  export type RefChecklistItemActivityLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistItemActivityLinkWhereInput
    orderBy?: RefChecklistItemActivityLinkOrderByWithAggregationInput | RefChecklistItemActivityLinkOrderByWithAggregationInput[]
    by: RefChecklistItemActivityLinkScalarFieldEnum[] | RefChecklistItemActivityLinkScalarFieldEnum
    having?: RefChecklistItemActivityLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefChecklistItemActivityLinkCountAggregateInputType | true
    _min?: RefChecklistItemActivityLinkMinAggregateInputType
    _max?: RefChecklistItemActivityLinkMaxAggregateInputType
  }

  export type RefChecklistItemActivityLinkGroupByOutputType = {
    id: string
    itemId: string
    activityId: string | null
    label: string
    tags: string[]
    _count: RefChecklistItemActivityLinkCountAggregateOutputType | null
    _min: RefChecklistItemActivityLinkMinAggregateOutputType | null
    _max: RefChecklistItemActivityLinkMaxAggregateOutputType | null
  }

  type GetRefChecklistItemActivityLinkGroupByPayload<T extends RefChecklistItemActivityLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefChecklistItemActivityLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefChecklistItemActivityLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefChecklistItemActivityLinkGroupByOutputType[P]>
            : GetScalarType<T[P], RefChecklistItemActivityLinkGroupByOutputType[P]>
        }
      >
    >


  export type RefChecklistItemActivityLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    activityId?: boolean
    label?: boolean
    tags?: boolean
    item?: boolean | RefChecklistItemDefaultArgs<ExtArgs>
    activity?: boolean | RefChecklistItemActivityLink$activityArgs<ExtArgs>
  }, ExtArgs["result"]["refChecklistItemActivityLink"]>

  export type RefChecklistItemActivityLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    activityId?: boolean
    label?: boolean
    tags?: boolean
    item?: boolean | RefChecklistItemDefaultArgs<ExtArgs>
    activity?: boolean | RefChecklistItemActivityLink$activityArgs<ExtArgs>
  }, ExtArgs["result"]["refChecklistItemActivityLink"]>

  export type RefChecklistItemActivityLinkSelectScalar = {
    id?: boolean
    itemId?: boolean
    activityId?: boolean
    label?: boolean
    tags?: boolean
  }

  export type RefChecklistItemActivityLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | RefChecklistItemDefaultArgs<ExtArgs>
    activity?: boolean | RefChecklistItemActivityLink$activityArgs<ExtArgs>
  }
  export type RefChecklistItemActivityLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | RefChecklistItemDefaultArgs<ExtArgs>
    activity?: boolean | RefChecklistItemActivityLink$activityArgs<ExtArgs>
  }

  export type $RefChecklistItemActivityLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefChecklistItemActivityLink"
    objects: {
      item: Prisma.$RefChecklistItemPayload<ExtArgs>
      activity: Prisma.$RefActivityPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemId: string
      activityId: string | null
      label: string
      tags: string[]
    }, ExtArgs["result"]["refChecklistItemActivityLink"]>
    composites: {}
  }

  type RefChecklistItemActivityLinkGetPayload<S extends boolean | null | undefined | RefChecklistItemActivityLinkDefaultArgs> = $Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload, S>

  type RefChecklistItemActivityLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefChecklistItemActivityLinkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefChecklistItemActivityLinkCountAggregateInputType | true
    }

  export interface RefChecklistItemActivityLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefChecklistItemActivityLink'], meta: { name: 'RefChecklistItemActivityLink' } }
    /**
     * Find zero or one RefChecklistItemActivityLink that matches the filter.
     * @param {RefChecklistItemActivityLinkFindUniqueArgs} args - Arguments to find a RefChecklistItemActivityLink
     * @example
     * // Get one RefChecklistItemActivityLink
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefChecklistItemActivityLinkFindUniqueArgs>(args: SelectSubset<T, RefChecklistItemActivityLinkFindUniqueArgs<ExtArgs>>): Prisma__RefChecklistItemActivityLinkClient<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefChecklistItemActivityLink that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefChecklistItemActivityLinkFindUniqueOrThrowArgs} args - Arguments to find a RefChecklistItemActivityLink
     * @example
     * // Get one RefChecklistItemActivityLink
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefChecklistItemActivityLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, RefChecklistItemActivityLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefChecklistItemActivityLinkClient<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefChecklistItemActivityLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemActivityLinkFindFirstArgs} args - Arguments to find a RefChecklistItemActivityLink
     * @example
     * // Get one RefChecklistItemActivityLink
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefChecklistItemActivityLinkFindFirstArgs>(args?: SelectSubset<T, RefChecklistItemActivityLinkFindFirstArgs<ExtArgs>>): Prisma__RefChecklistItemActivityLinkClient<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefChecklistItemActivityLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemActivityLinkFindFirstOrThrowArgs} args - Arguments to find a RefChecklistItemActivityLink
     * @example
     * // Get one RefChecklistItemActivityLink
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefChecklistItemActivityLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, RefChecklistItemActivityLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefChecklistItemActivityLinkClient<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefChecklistItemActivityLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemActivityLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefChecklistItemActivityLinks
     * const refChecklistItemActivityLinks = await prisma.refChecklistItemActivityLink.findMany()
     * 
     * // Get first 10 RefChecklistItemActivityLinks
     * const refChecklistItemActivityLinks = await prisma.refChecklistItemActivityLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refChecklistItemActivityLinkWithIdOnly = await prisma.refChecklistItemActivityLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefChecklistItemActivityLinkFindManyArgs>(args?: SelectSubset<T, RefChecklistItemActivityLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefChecklistItemActivityLink.
     * @param {RefChecklistItemActivityLinkCreateArgs} args - Arguments to create a RefChecklistItemActivityLink.
     * @example
     * // Create one RefChecklistItemActivityLink
     * const RefChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.create({
     *   data: {
     *     // ... data to create a RefChecklistItemActivityLink
     *   }
     * })
     * 
     */
    create<T extends RefChecklistItemActivityLinkCreateArgs>(args: SelectSubset<T, RefChecklistItemActivityLinkCreateArgs<ExtArgs>>): Prisma__RefChecklistItemActivityLinkClient<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefChecklistItemActivityLinks.
     * @param {RefChecklistItemActivityLinkCreateManyArgs} args - Arguments to create many RefChecklistItemActivityLinks.
     * @example
     * // Create many RefChecklistItemActivityLinks
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefChecklistItemActivityLinkCreateManyArgs>(args?: SelectSubset<T, RefChecklistItemActivityLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefChecklistItemActivityLinks and returns the data saved in the database.
     * @param {RefChecklistItemActivityLinkCreateManyAndReturnArgs} args - Arguments to create many RefChecklistItemActivityLinks.
     * @example
     * // Create many RefChecklistItemActivityLinks
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefChecklistItemActivityLinks and only return the `id`
     * const refChecklistItemActivityLinkWithIdOnly = await prisma.refChecklistItemActivityLink.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefChecklistItemActivityLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, RefChecklistItemActivityLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefChecklistItemActivityLink.
     * @param {RefChecklistItemActivityLinkDeleteArgs} args - Arguments to delete one RefChecklistItemActivityLink.
     * @example
     * // Delete one RefChecklistItemActivityLink
     * const RefChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.delete({
     *   where: {
     *     // ... filter to delete one RefChecklistItemActivityLink
     *   }
     * })
     * 
     */
    delete<T extends RefChecklistItemActivityLinkDeleteArgs>(args: SelectSubset<T, RefChecklistItemActivityLinkDeleteArgs<ExtArgs>>): Prisma__RefChecklistItemActivityLinkClient<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefChecklistItemActivityLink.
     * @param {RefChecklistItemActivityLinkUpdateArgs} args - Arguments to update one RefChecklistItemActivityLink.
     * @example
     * // Update one RefChecklistItemActivityLink
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefChecklistItemActivityLinkUpdateArgs>(args: SelectSubset<T, RefChecklistItemActivityLinkUpdateArgs<ExtArgs>>): Prisma__RefChecklistItemActivityLinkClient<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefChecklistItemActivityLinks.
     * @param {RefChecklistItemActivityLinkDeleteManyArgs} args - Arguments to filter RefChecklistItemActivityLinks to delete.
     * @example
     * // Delete a few RefChecklistItemActivityLinks
     * const { count } = await prisma.refChecklistItemActivityLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefChecklistItemActivityLinkDeleteManyArgs>(args?: SelectSubset<T, RefChecklistItemActivityLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefChecklistItemActivityLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemActivityLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefChecklistItemActivityLinks
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefChecklistItemActivityLinkUpdateManyArgs>(args: SelectSubset<T, RefChecklistItemActivityLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefChecklistItemActivityLink.
     * @param {RefChecklistItemActivityLinkUpsertArgs} args - Arguments to update or create a RefChecklistItemActivityLink.
     * @example
     * // Update or create a RefChecklistItemActivityLink
     * const refChecklistItemActivityLink = await prisma.refChecklistItemActivityLink.upsert({
     *   create: {
     *     // ... data to create a RefChecklistItemActivityLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefChecklistItemActivityLink we want to update
     *   }
     * })
     */
    upsert<T extends RefChecklistItemActivityLinkUpsertArgs>(args: SelectSubset<T, RefChecklistItemActivityLinkUpsertArgs<ExtArgs>>): Prisma__RefChecklistItemActivityLinkClient<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefChecklistItemActivityLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemActivityLinkCountArgs} args - Arguments to filter RefChecklistItemActivityLinks to count.
     * @example
     * // Count the number of RefChecklistItemActivityLinks
     * const count = await prisma.refChecklistItemActivityLink.count({
     *   where: {
     *     // ... the filter for the RefChecklistItemActivityLinks we want to count
     *   }
     * })
    **/
    count<T extends RefChecklistItemActivityLinkCountArgs>(
      args?: Subset<T, RefChecklistItemActivityLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefChecklistItemActivityLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefChecklistItemActivityLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemActivityLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefChecklistItemActivityLinkAggregateArgs>(args: Subset<T, RefChecklistItemActivityLinkAggregateArgs>): Prisma.PrismaPromise<GetRefChecklistItemActivityLinkAggregateType<T>>

    /**
     * Group by RefChecklistItemActivityLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemActivityLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefChecklistItemActivityLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefChecklistItemActivityLinkGroupByArgs['orderBy'] }
        : { orderBy?: RefChecklistItemActivityLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefChecklistItemActivityLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefChecklistItemActivityLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefChecklistItemActivityLink model
   */
  readonly fields: RefChecklistItemActivityLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefChecklistItemActivityLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefChecklistItemActivityLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends RefChecklistItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RefChecklistItemDefaultArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    activity<T extends RefChecklistItemActivityLink$activityArgs<ExtArgs> = {}>(args?: Subset<T, RefChecklistItemActivityLink$activityArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefChecklistItemActivityLink model
   */ 
  interface RefChecklistItemActivityLinkFieldRefs {
    readonly id: FieldRef<"RefChecklistItemActivityLink", 'String'>
    readonly itemId: FieldRef<"RefChecklistItemActivityLink", 'String'>
    readonly activityId: FieldRef<"RefChecklistItemActivityLink", 'String'>
    readonly label: FieldRef<"RefChecklistItemActivityLink", 'String'>
    readonly tags: FieldRef<"RefChecklistItemActivityLink", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * RefChecklistItemActivityLink findUnique
   */
  export type RefChecklistItemActivityLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemActivityLink to fetch.
     */
    where: RefChecklistItemActivityLinkWhereUniqueInput
  }

  /**
   * RefChecklistItemActivityLink findUniqueOrThrow
   */
  export type RefChecklistItemActivityLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemActivityLink to fetch.
     */
    where: RefChecklistItemActivityLinkWhereUniqueInput
  }

  /**
   * RefChecklistItemActivityLink findFirst
   */
  export type RefChecklistItemActivityLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemActivityLink to fetch.
     */
    where?: RefChecklistItemActivityLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItemActivityLinks to fetch.
     */
    orderBy?: RefChecklistItemActivityLinkOrderByWithRelationInput | RefChecklistItemActivityLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefChecklistItemActivityLinks.
     */
    cursor?: RefChecklistItemActivityLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItemActivityLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItemActivityLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefChecklistItemActivityLinks.
     */
    distinct?: RefChecklistItemActivityLinkScalarFieldEnum | RefChecklistItemActivityLinkScalarFieldEnum[]
  }

  /**
   * RefChecklistItemActivityLink findFirstOrThrow
   */
  export type RefChecklistItemActivityLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemActivityLink to fetch.
     */
    where?: RefChecklistItemActivityLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItemActivityLinks to fetch.
     */
    orderBy?: RefChecklistItemActivityLinkOrderByWithRelationInput | RefChecklistItemActivityLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefChecklistItemActivityLinks.
     */
    cursor?: RefChecklistItemActivityLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItemActivityLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItemActivityLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefChecklistItemActivityLinks.
     */
    distinct?: RefChecklistItemActivityLinkScalarFieldEnum | RefChecklistItemActivityLinkScalarFieldEnum[]
  }

  /**
   * RefChecklistItemActivityLink findMany
   */
  export type RefChecklistItemActivityLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemActivityLinks to fetch.
     */
    where?: RefChecklistItemActivityLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItemActivityLinks to fetch.
     */
    orderBy?: RefChecklistItemActivityLinkOrderByWithRelationInput | RefChecklistItemActivityLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefChecklistItemActivityLinks.
     */
    cursor?: RefChecklistItemActivityLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItemActivityLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItemActivityLinks.
     */
    skip?: number
    distinct?: RefChecklistItemActivityLinkScalarFieldEnum | RefChecklistItemActivityLinkScalarFieldEnum[]
  }

  /**
   * RefChecklistItemActivityLink create
   */
  export type RefChecklistItemActivityLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a RefChecklistItemActivityLink.
     */
    data: XOR<RefChecklistItemActivityLinkCreateInput, RefChecklistItemActivityLinkUncheckedCreateInput>
  }

  /**
   * RefChecklistItemActivityLink createMany
   */
  export type RefChecklistItemActivityLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefChecklistItemActivityLinks.
     */
    data: RefChecklistItemActivityLinkCreateManyInput | RefChecklistItemActivityLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefChecklistItemActivityLink createManyAndReturn
   */
  export type RefChecklistItemActivityLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefChecklistItemActivityLinks.
     */
    data: RefChecklistItemActivityLinkCreateManyInput | RefChecklistItemActivityLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefChecklistItemActivityLink update
   */
  export type RefChecklistItemActivityLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a RefChecklistItemActivityLink.
     */
    data: XOR<RefChecklistItemActivityLinkUpdateInput, RefChecklistItemActivityLinkUncheckedUpdateInput>
    /**
     * Choose, which RefChecklistItemActivityLink to update.
     */
    where: RefChecklistItemActivityLinkWhereUniqueInput
  }

  /**
   * RefChecklistItemActivityLink updateMany
   */
  export type RefChecklistItemActivityLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefChecklistItemActivityLinks.
     */
    data: XOR<RefChecklistItemActivityLinkUpdateManyMutationInput, RefChecklistItemActivityLinkUncheckedUpdateManyInput>
    /**
     * Filter which RefChecklistItemActivityLinks to update
     */
    where?: RefChecklistItemActivityLinkWhereInput
  }

  /**
   * RefChecklistItemActivityLink upsert
   */
  export type RefChecklistItemActivityLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the RefChecklistItemActivityLink to update in case it exists.
     */
    where: RefChecklistItemActivityLinkWhereUniqueInput
    /**
     * In case the RefChecklistItemActivityLink found by the `where` argument doesn't exist, create a new RefChecklistItemActivityLink with this data.
     */
    create: XOR<RefChecklistItemActivityLinkCreateInput, RefChecklistItemActivityLinkUncheckedCreateInput>
    /**
     * In case the RefChecklistItemActivityLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefChecklistItemActivityLinkUpdateInput, RefChecklistItemActivityLinkUncheckedUpdateInput>
  }

  /**
   * RefChecklistItemActivityLink delete
   */
  export type RefChecklistItemActivityLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    /**
     * Filter which RefChecklistItemActivityLink to delete.
     */
    where: RefChecklistItemActivityLinkWhereUniqueInput
  }

  /**
   * RefChecklistItemActivityLink deleteMany
   */
  export type RefChecklistItemActivityLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefChecklistItemActivityLinks to delete
     */
    where?: RefChecklistItemActivityLinkWhereInput
  }

  /**
   * RefChecklistItemActivityLink.activity
   */
  export type RefChecklistItemActivityLink$activityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    where?: RefActivityWhereInput
  }

  /**
   * RefChecklistItemActivityLink without action
   */
  export type RefChecklistItemActivityLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
  }


  /**
   * Model RefChecklistItemMaterialLink
   */

  export type AggregateRefChecklistItemMaterialLink = {
    _count: RefChecklistItemMaterialLinkCountAggregateOutputType | null
    _min: RefChecklistItemMaterialLinkMinAggregateOutputType | null
    _max: RefChecklistItemMaterialLinkMaxAggregateOutputType | null
  }

  export type RefChecklistItemMaterialLinkMinAggregateOutputType = {
    id: string | null
    itemId: string | null
    materialId: string | null
    name: string | null
    category: string | null
  }

  export type RefChecklistItemMaterialLinkMaxAggregateOutputType = {
    id: string | null
    itemId: string | null
    materialId: string | null
    name: string | null
    category: string | null
  }

  export type RefChecklistItemMaterialLinkCountAggregateOutputType = {
    id: number
    itemId: number
    materialId: number
    name: number
    category: number
    properties: number
    _all: number
  }


  export type RefChecklistItemMaterialLinkMinAggregateInputType = {
    id?: true
    itemId?: true
    materialId?: true
    name?: true
    category?: true
  }

  export type RefChecklistItemMaterialLinkMaxAggregateInputType = {
    id?: true
    itemId?: true
    materialId?: true
    name?: true
    category?: true
  }

  export type RefChecklistItemMaterialLinkCountAggregateInputType = {
    id?: true
    itemId?: true
    materialId?: true
    name?: true
    category?: true
    properties?: true
    _all?: true
  }

  export type RefChecklistItemMaterialLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefChecklistItemMaterialLink to aggregate.
     */
    where?: RefChecklistItemMaterialLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItemMaterialLinks to fetch.
     */
    orderBy?: RefChecklistItemMaterialLinkOrderByWithRelationInput | RefChecklistItemMaterialLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefChecklistItemMaterialLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItemMaterialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItemMaterialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefChecklistItemMaterialLinks
    **/
    _count?: true | RefChecklistItemMaterialLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefChecklistItemMaterialLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefChecklistItemMaterialLinkMaxAggregateInputType
  }

  export type GetRefChecklistItemMaterialLinkAggregateType<T extends RefChecklistItemMaterialLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateRefChecklistItemMaterialLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefChecklistItemMaterialLink[P]>
      : GetScalarType<T[P], AggregateRefChecklistItemMaterialLink[P]>
  }




  export type RefChecklistItemMaterialLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefChecklistItemMaterialLinkWhereInput
    orderBy?: RefChecklistItemMaterialLinkOrderByWithAggregationInput | RefChecklistItemMaterialLinkOrderByWithAggregationInput[]
    by: RefChecklistItemMaterialLinkScalarFieldEnum[] | RefChecklistItemMaterialLinkScalarFieldEnum
    having?: RefChecklistItemMaterialLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefChecklistItemMaterialLinkCountAggregateInputType | true
    _min?: RefChecklistItemMaterialLinkMinAggregateInputType
    _max?: RefChecklistItemMaterialLinkMaxAggregateInputType
  }

  export type RefChecklistItemMaterialLinkGroupByOutputType = {
    id: string
    itemId: string
    materialId: string | null
    name: string
    category: string | null
    properties: JsonValue | null
    _count: RefChecklistItemMaterialLinkCountAggregateOutputType | null
    _min: RefChecklistItemMaterialLinkMinAggregateOutputType | null
    _max: RefChecklistItemMaterialLinkMaxAggregateOutputType | null
  }

  type GetRefChecklistItemMaterialLinkGroupByPayload<T extends RefChecklistItemMaterialLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefChecklistItemMaterialLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefChecklistItemMaterialLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefChecklistItemMaterialLinkGroupByOutputType[P]>
            : GetScalarType<T[P], RefChecklistItemMaterialLinkGroupByOutputType[P]>
        }
      >
    >


  export type RefChecklistItemMaterialLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    materialId?: boolean
    name?: boolean
    category?: boolean
    properties?: boolean
    item?: boolean | RefChecklistItemDefaultArgs<ExtArgs>
    material?: boolean | RefChecklistItemMaterialLink$materialArgs<ExtArgs>
  }, ExtArgs["result"]["refChecklistItemMaterialLink"]>

  export type RefChecklistItemMaterialLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    materialId?: boolean
    name?: boolean
    category?: boolean
    properties?: boolean
    item?: boolean | RefChecklistItemDefaultArgs<ExtArgs>
    material?: boolean | RefChecklistItemMaterialLink$materialArgs<ExtArgs>
  }, ExtArgs["result"]["refChecklistItemMaterialLink"]>

  export type RefChecklistItemMaterialLinkSelectScalar = {
    id?: boolean
    itemId?: boolean
    materialId?: boolean
    name?: boolean
    category?: boolean
    properties?: boolean
  }

  export type RefChecklistItemMaterialLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | RefChecklistItemDefaultArgs<ExtArgs>
    material?: boolean | RefChecklistItemMaterialLink$materialArgs<ExtArgs>
  }
  export type RefChecklistItemMaterialLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | RefChecklistItemDefaultArgs<ExtArgs>
    material?: boolean | RefChecklistItemMaterialLink$materialArgs<ExtArgs>
  }

  export type $RefChecklistItemMaterialLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefChecklistItemMaterialLink"
    objects: {
      item: Prisma.$RefChecklistItemPayload<ExtArgs>
      material: Prisma.$RefMaterialPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemId: string
      materialId: string | null
      name: string
      category: string | null
      properties: Prisma.JsonValue | null
    }, ExtArgs["result"]["refChecklistItemMaterialLink"]>
    composites: {}
  }

  type RefChecklistItemMaterialLinkGetPayload<S extends boolean | null | undefined | RefChecklistItemMaterialLinkDefaultArgs> = $Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload, S>

  type RefChecklistItemMaterialLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefChecklistItemMaterialLinkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefChecklistItemMaterialLinkCountAggregateInputType | true
    }

  export interface RefChecklistItemMaterialLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefChecklistItemMaterialLink'], meta: { name: 'RefChecklistItemMaterialLink' } }
    /**
     * Find zero or one RefChecklistItemMaterialLink that matches the filter.
     * @param {RefChecklistItemMaterialLinkFindUniqueArgs} args - Arguments to find a RefChecklistItemMaterialLink
     * @example
     * // Get one RefChecklistItemMaterialLink
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefChecklistItemMaterialLinkFindUniqueArgs>(args: SelectSubset<T, RefChecklistItemMaterialLinkFindUniqueArgs<ExtArgs>>): Prisma__RefChecklistItemMaterialLinkClient<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefChecklistItemMaterialLink that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefChecklistItemMaterialLinkFindUniqueOrThrowArgs} args - Arguments to find a RefChecklistItemMaterialLink
     * @example
     * // Get one RefChecklistItemMaterialLink
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefChecklistItemMaterialLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, RefChecklistItemMaterialLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefChecklistItemMaterialLinkClient<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefChecklistItemMaterialLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemMaterialLinkFindFirstArgs} args - Arguments to find a RefChecklistItemMaterialLink
     * @example
     * // Get one RefChecklistItemMaterialLink
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefChecklistItemMaterialLinkFindFirstArgs>(args?: SelectSubset<T, RefChecklistItemMaterialLinkFindFirstArgs<ExtArgs>>): Prisma__RefChecklistItemMaterialLinkClient<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefChecklistItemMaterialLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemMaterialLinkFindFirstOrThrowArgs} args - Arguments to find a RefChecklistItemMaterialLink
     * @example
     * // Get one RefChecklistItemMaterialLink
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefChecklistItemMaterialLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, RefChecklistItemMaterialLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefChecklistItemMaterialLinkClient<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefChecklistItemMaterialLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemMaterialLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefChecklistItemMaterialLinks
     * const refChecklistItemMaterialLinks = await prisma.refChecklistItemMaterialLink.findMany()
     * 
     * // Get first 10 RefChecklistItemMaterialLinks
     * const refChecklistItemMaterialLinks = await prisma.refChecklistItemMaterialLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refChecklistItemMaterialLinkWithIdOnly = await prisma.refChecklistItemMaterialLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefChecklistItemMaterialLinkFindManyArgs>(args?: SelectSubset<T, RefChecklistItemMaterialLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefChecklistItemMaterialLink.
     * @param {RefChecklistItemMaterialLinkCreateArgs} args - Arguments to create a RefChecklistItemMaterialLink.
     * @example
     * // Create one RefChecklistItemMaterialLink
     * const RefChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.create({
     *   data: {
     *     // ... data to create a RefChecklistItemMaterialLink
     *   }
     * })
     * 
     */
    create<T extends RefChecklistItemMaterialLinkCreateArgs>(args: SelectSubset<T, RefChecklistItemMaterialLinkCreateArgs<ExtArgs>>): Prisma__RefChecklistItemMaterialLinkClient<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefChecklistItemMaterialLinks.
     * @param {RefChecklistItemMaterialLinkCreateManyArgs} args - Arguments to create many RefChecklistItemMaterialLinks.
     * @example
     * // Create many RefChecklistItemMaterialLinks
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefChecklistItemMaterialLinkCreateManyArgs>(args?: SelectSubset<T, RefChecklistItemMaterialLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefChecklistItemMaterialLinks and returns the data saved in the database.
     * @param {RefChecklistItemMaterialLinkCreateManyAndReturnArgs} args - Arguments to create many RefChecklistItemMaterialLinks.
     * @example
     * // Create many RefChecklistItemMaterialLinks
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefChecklistItemMaterialLinks and only return the `id`
     * const refChecklistItemMaterialLinkWithIdOnly = await prisma.refChecklistItemMaterialLink.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefChecklistItemMaterialLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, RefChecklistItemMaterialLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefChecklistItemMaterialLink.
     * @param {RefChecklistItemMaterialLinkDeleteArgs} args - Arguments to delete one RefChecklistItemMaterialLink.
     * @example
     * // Delete one RefChecklistItemMaterialLink
     * const RefChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.delete({
     *   where: {
     *     // ... filter to delete one RefChecklistItemMaterialLink
     *   }
     * })
     * 
     */
    delete<T extends RefChecklistItemMaterialLinkDeleteArgs>(args: SelectSubset<T, RefChecklistItemMaterialLinkDeleteArgs<ExtArgs>>): Prisma__RefChecklistItemMaterialLinkClient<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefChecklistItemMaterialLink.
     * @param {RefChecklistItemMaterialLinkUpdateArgs} args - Arguments to update one RefChecklistItemMaterialLink.
     * @example
     * // Update one RefChecklistItemMaterialLink
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefChecklistItemMaterialLinkUpdateArgs>(args: SelectSubset<T, RefChecklistItemMaterialLinkUpdateArgs<ExtArgs>>): Prisma__RefChecklistItemMaterialLinkClient<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefChecklistItemMaterialLinks.
     * @param {RefChecklistItemMaterialLinkDeleteManyArgs} args - Arguments to filter RefChecklistItemMaterialLinks to delete.
     * @example
     * // Delete a few RefChecklistItemMaterialLinks
     * const { count } = await prisma.refChecklistItemMaterialLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefChecklistItemMaterialLinkDeleteManyArgs>(args?: SelectSubset<T, RefChecklistItemMaterialLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefChecklistItemMaterialLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemMaterialLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefChecklistItemMaterialLinks
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefChecklistItemMaterialLinkUpdateManyArgs>(args: SelectSubset<T, RefChecklistItemMaterialLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefChecklistItemMaterialLink.
     * @param {RefChecklistItemMaterialLinkUpsertArgs} args - Arguments to update or create a RefChecklistItemMaterialLink.
     * @example
     * // Update or create a RefChecklistItemMaterialLink
     * const refChecklistItemMaterialLink = await prisma.refChecklistItemMaterialLink.upsert({
     *   create: {
     *     // ... data to create a RefChecklistItemMaterialLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefChecklistItemMaterialLink we want to update
     *   }
     * })
     */
    upsert<T extends RefChecklistItemMaterialLinkUpsertArgs>(args: SelectSubset<T, RefChecklistItemMaterialLinkUpsertArgs<ExtArgs>>): Prisma__RefChecklistItemMaterialLinkClient<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefChecklistItemMaterialLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemMaterialLinkCountArgs} args - Arguments to filter RefChecklistItemMaterialLinks to count.
     * @example
     * // Count the number of RefChecklistItemMaterialLinks
     * const count = await prisma.refChecklistItemMaterialLink.count({
     *   where: {
     *     // ... the filter for the RefChecklistItemMaterialLinks we want to count
     *   }
     * })
    **/
    count<T extends RefChecklistItemMaterialLinkCountArgs>(
      args?: Subset<T, RefChecklistItemMaterialLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefChecklistItemMaterialLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefChecklistItemMaterialLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemMaterialLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefChecklistItemMaterialLinkAggregateArgs>(args: Subset<T, RefChecklistItemMaterialLinkAggregateArgs>): Prisma.PrismaPromise<GetRefChecklistItemMaterialLinkAggregateType<T>>

    /**
     * Group by RefChecklistItemMaterialLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefChecklistItemMaterialLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefChecklistItemMaterialLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefChecklistItemMaterialLinkGroupByArgs['orderBy'] }
        : { orderBy?: RefChecklistItemMaterialLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefChecklistItemMaterialLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefChecklistItemMaterialLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefChecklistItemMaterialLink model
   */
  readonly fields: RefChecklistItemMaterialLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefChecklistItemMaterialLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefChecklistItemMaterialLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends RefChecklistItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RefChecklistItemDefaultArgs<ExtArgs>>): Prisma__RefChecklistItemClient<$Result.GetResult<Prisma.$RefChecklistItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    material<T extends RefChecklistItemMaterialLink$materialArgs<ExtArgs> = {}>(args?: Subset<T, RefChecklistItemMaterialLink$materialArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefChecklistItemMaterialLink model
   */ 
  interface RefChecklistItemMaterialLinkFieldRefs {
    readonly id: FieldRef<"RefChecklistItemMaterialLink", 'String'>
    readonly itemId: FieldRef<"RefChecklistItemMaterialLink", 'String'>
    readonly materialId: FieldRef<"RefChecklistItemMaterialLink", 'String'>
    readonly name: FieldRef<"RefChecklistItemMaterialLink", 'String'>
    readonly category: FieldRef<"RefChecklistItemMaterialLink", 'String'>
    readonly properties: FieldRef<"RefChecklistItemMaterialLink", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * RefChecklistItemMaterialLink findUnique
   */
  export type RefChecklistItemMaterialLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemMaterialLink to fetch.
     */
    where: RefChecklistItemMaterialLinkWhereUniqueInput
  }

  /**
   * RefChecklistItemMaterialLink findUniqueOrThrow
   */
  export type RefChecklistItemMaterialLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemMaterialLink to fetch.
     */
    where: RefChecklistItemMaterialLinkWhereUniqueInput
  }

  /**
   * RefChecklistItemMaterialLink findFirst
   */
  export type RefChecklistItemMaterialLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemMaterialLink to fetch.
     */
    where?: RefChecklistItemMaterialLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItemMaterialLinks to fetch.
     */
    orderBy?: RefChecklistItemMaterialLinkOrderByWithRelationInput | RefChecklistItemMaterialLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefChecklistItemMaterialLinks.
     */
    cursor?: RefChecklistItemMaterialLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItemMaterialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItemMaterialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefChecklistItemMaterialLinks.
     */
    distinct?: RefChecklistItemMaterialLinkScalarFieldEnum | RefChecklistItemMaterialLinkScalarFieldEnum[]
  }

  /**
   * RefChecklistItemMaterialLink findFirstOrThrow
   */
  export type RefChecklistItemMaterialLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemMaterialLink to fetch.
     */
    where?: RefChecklistItemMaterialLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItemMaterialLinks to fetch.
     */
    orderBy?: RefChecklistItemMaterialLinkOrderByWithRelationInput | RefChecklistItemMaterialLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefChecklistItemMaterialLinks.
     */
    cursor?: RefChecklistItemMaterialLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItemMaterialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItemMaterialLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefChecklistItemMaterialLinks.
     */
    distinct?: RefChecklistItemMaterialLinkScalarFieldEnum | RefChecklistItemMaterialLinkScalarFieldEnum[]
  }

  /**
   * RefChecklistItemMaterialLink findMany
   */
  export type RefChecklistItemMaterialLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * Filter, which RefChecklistItemMaterialLinks to fetch.
     */
    where?: RefChecklistItemMaterialLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefChecklistItemMaterialLinks to fetch.
     */
    orderBy?: RefChecklistItemMaterialLinkOrderByWithRelationInput | RefChecklistItemMaterialLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefChecklistItemMaterialLinks.
     */
    cursor?: RefChecklistItemMaterialLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefChecklistItemMaterialLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefChecklistItemMaterialLinks.
     */
    skip?: number
    distinct?: RefChecklistItemMaterialLinkScalarFieldEnum | RefChecklistItemMaterialLinkScalarFieldEnum[]
  }

  /**
   * RefChecklistItemMaterialLink create
   */
  export type RefChecklistItemMaterialLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a RefChecklistItemMaterialLink.
     */
    data: XOR<RefChecklistItemMaterialLinkCreateInput, RefChecklistItemMaterialLinkUncheckedCreateInput>
  }

  /**
   * RefChecklistItemMaterialLink createMany
   */
  export type RefChecklistItemMaterialLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefChecklistItemMaterialLinks.
     */
    data: RefChecklistItemMaterialLinkCreateManyInput | RefChecklistItemMaterialLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefChecklistItemMaterialLink createManyAndReturn
   */
  export type RefChecklistItemMaterialLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefChecklistItemMaterialLinks.
     */
    data: RefChecklistItemMaterialLinkCreateManyInput | RefChecklistItemMaterialLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefChecklistItemMaterialLink update
   */
  export type RefChecklistItemMaterialLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a RefChecklistItemMaterialLink.
     */
    data: XOR<RefChecklistItemMaterialLinkUpdateInput, RefChecklistItemMaterialLinkUncheckedUpdateInput>
    /**
     * Choose, which RefChecklistItemMaterialLink to update.
     */
    where: RefChecklistItemMaterialLinkWhereUniqueInput
  }

  /**
   * RefChecklistItemMaterialLink updateMany
   */
  export type RefChecklistItemMaterialLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefChecklistItemMaterialLinks.
     */
    data: XOR<RefChecklistItemMaterialLinkUpdateManyMutationInput, RefChecklistItemMaterialLinkUncheckedUpdateManyInput>
    /**
     * Filter which RefChecklistItemMaterialLinks to update
     */
    where?: RefChecklistItemMaterialLinkWhereInput
  }

  /**
   * RefChecklistItemMaterialLink upsert
   */
  export type RefChecklistItemMaterialLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the RefChecklistItemMaterialLink to update in case it exists.
     */
    where: RefChecklistItemMaterialLinkWhereUniqueInput
    /**
     * In case the RefChecklistItemMaterialLink found by the `where` argument doesn't exist, create a new RefChecklistItemMaterialLink with this data.
     */
    create: XOR<RefChecklistItemMaterialLinkCreateInput, RefChecklistItemMaterialLinkUncheckedCreateInput>
    /**
     * In case the RefChecklistItemMaterialLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefChecklistItemMaterialLinkUpdateInput, RefChecklistItemMaterialLinkUncheckedUpdateInput>
  }

  /**
   * RefChecklistItemMaterialLink delete
   */
  export type RefChecklistItemMaterialLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    /**
     * Filter which RefChecklistItemMaterialLink to delete.
     */
    where: RefChecklistItemMaterialLinkWhereUniqueInput
  }

  /**
   * RefChecklistItemMaterialLink deleteMany
   */
  export type RefChecklistItemMaterialLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefChecklistItemMaterialLinks to delete
     */
    where?: RefChecklistItemMaterialLinkWhereInput
  }

  /**
   * RefChecklistItemMaterialLink.material
   */
  export type RefChecklistItemMaterialLink$materialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    where?: RefMaterialWhereInput
  }

  /**
   * RefChecklistItemMaterialLink without action
   */
  export type RefChecklistItemMaterialLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
  }


  /**
   * Model RefActivity
   */

  export type AggregateRefActivity = {
    _count: RefActivityCountAggregateOutputType | null
    _avg: RefActivityAvgAggregateOutputType | null
    _sum: RefActivitySumAggregateOutputType | null
    _min: RefActivityMinAggregateOutputType | null
    _max: RefActivityMaxAggregateOutputType | null
  }

  export type RefActivityAvgAggregateOutputType = {
    version: number | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
  }

  export type RefActivitySumAggregateOutputType = {
    version: number | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
  }

  export type RefActivityMinAggregateOutputType = {
    id: string | null
    code: string | null
    title: string | null
    discipline: $Enums.Discipline | null
    stageLabel: string | null
    status: string | null
    version: number | null
    versionLabel: string | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RefActivityMaxAggregateOutputType = {
    id: string | null
    code: string | null
    title: string | null
    discipline: $Enums.Discipline | null
    stageLabel: string | null
    status: string | null
    version: number | null
    versionLabel: string | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RefActivityCountAggregateOutputType = {
    id: number
    code: number
    title: number
    discipline: number
    stageLabel: number
    phase: number
    element: number
    system: number
    nature: number
    method: number
    status: number
    version: number
    versionLabel: number
    versionMajor: number
    versionMinor: number
    versionPatch: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RefActivityAvgAggregateInputType = {
    version?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
  }

  export type RefActivitySumAggregateInputType = {
    version?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
  }

  export type RefActivityMinAggregateInputType = {
    id?: true
    code?: true
    title?: true
    discipline?: true
    stageLabel?: true
    status?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RefActivityMaxAggregateInputType = {
    id?: true
    code?: true
    title?: true
    discipline?: true
    stageLabel?: true
    status?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RefActivityCountAggregateInputType = {
    id?: true
    code?: true
    title?: true
    discipline?: true
    stageLabel?: true
    phase?: true
    element?: true
    system?: true
    nature?: true
    method?: true
    status?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RefActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefActivity to aggregate.
     */
    where?: RefActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefActivities to fetch.
     */
    orderBy?: RefActivityOrderByWithRelationInput | RefActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefActivities
    **/
    _count?: true | RefActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefActivityMaxAggregateInputType
  }

  export type GetRefActivityAggregateType<T extends RefActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateRefActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefActivity[P]>
      : GetScalarType<T[P], AggregateRefActivity[P]>
  }




  export type RefActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefActivityWhereInput
    orderBy?: RefActivityOrderByWithAggregationInput | RefActivityOrderByWithAggregationInput[]
    by: RefActivityScalarFieldEnum[] | RefActivityScalarFieldEnum
    having?: RefActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefActivityCountAggregateInputType | true
    _avg?: RefActivityAvgAggregateInputType
    _sum?: RefActivitySumAggregateInputType
    _min?: RefActivityMinAggregateInputType
    _max?: RefActivityMaxAggregateInputType
  }

  export type RefActivityGroupByOutputType = {
    id: string
    code: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel: string | null
    phase: string[]
    element: string[]
    system: string[]
    nature: string[]
    method: string[]
    status: string
    version: number
    versionLabel: string | null
    versionMajor: number
    versionMinor: number
    versionPatch: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: RefActivityCountAggregateOutputType | null
    _avg: RefActivityAvgAggregateOutputType | null
    _sum: RefActivitySumAggregateOutputType | null
    _min: RefActivityMinAggregateOutputType | null
    _max: RefActivityMaxAggregateOutputType | null
  }

  type GetRefActivityGroupByPayload<T extends RefActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefActivityGroupByOutputType[P]>
            : GetScalarType<T[P], RefActivityGroupByOutputType[P]>
        }
      >
    >


  export type RefActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    discipline?: boolean
    stageLabel?: boolean
    phase?: boolean
    element?: boolean
    system?: boolean
    nature?: boolean
    method?: boolean
    status?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    materials?: boolean | RefActivity$materialsArgs<ExtArgs>
    RefChecklistItemActivityLink?: boolean | RefActivity$RefChecklistItemActivityLinkArgs<ExtArgs>
    _count?: boolean | RefActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refActivity"]>

  export type RefActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    discipline?: boolean
    stageLabel?: boolean
    phase?: boolean
    element?: boolean
    system?: boolean
    nature?: boolean
    method?: boolean
    status?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["refActivity"]>

  export type RefActivitySelectScalar = {
    id?: boolean
    code?: boolean
    title?: boolean
    discipline?: boolean
    stageLabel?: boolean
    phase?: boolean
    element?: boolean
    system?: boolean
    nature?: boolean
    method?: boolean
    status?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RefActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    materials?: boolean | RefActivity$materialsArgs<ExtArgs>
    RefChecklistItemActivityLink?: boolean | RefActivity$RefChecklistItemActivityLinkArgs<ExtArgs>
    _count?: boolean | RefActivityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RefActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RefActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefActivity"
    objects: {
      materials: Prisma.$RefActivityMaterialPayload<ExtArgs>[]
      RefChecklistItemActivityLink: Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string | null
      title: string
      discipline: $Enums.Discipline
      stageLabel: string | null
      phase: string[]
      element: string[]
      system: string[]
      nature: string[]
      method: string[]
      status: string
      version: number
      versionLabel: string | null
      versionMajor: number
      versionMinor: number
      versionPatch: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["refActivity"]>
    composites: {}
  }

  type RefActivityGetPayload<S extends boolean | null | undefined | RefActivityDefaultArgs> = $Result.GetResult<Prisma.$RefActivityPayload, S>

  type RefActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefActivityCountAggregateInputType | true
    }

  export interface RefActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefActivity'], meta: { name: 'RefActivity' } }
    /**
     * Find zero or one RefActivity that matches the filter.
     * @param {RefActivityFindUniqueArgs} args - Arguments to find a RefActivity
     * @example
     * // Get one RefActivity
     * const refActivity = await prisma.refActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefActivityFindUniqueArgs>(args: SelectSubset<T, RefActivityFindUniqueArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefActivity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefActivityFindUniqueOrThrowArgs} args - Arguments to find a RefActivity
     * @example
     * // Get one RefActivity
     * const refActivity = await prisma.refActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, RefActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityFindFirstArgs} args - Arguments to find a RefActivity
     * @example
     * // Get one RefActivity
     * const refActivity = await prisma.refActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefActivityFindFirstArgs>(args?: SelectSubset<T, RefActivityFindFirstArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityFindFirstOrThrowArgs} args - Arguments to find a RefActivity
     * @example
     * // Get one RefActivity
     * const refActivity = await prisma.refActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, RefActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefActivities
     * const refActivities = await prisma.refActivity.findMany()
     * 
     * // Get first 10 RefActivities
     * const refActivities = await prisma.refActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refActivityWithIdOnly = await prisma.refActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefActivityFindManyArgs>(args?: SelectSubset<T, RefActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefActivity.
     * @param {RefActivityCreateArgs} args - Arguments to create a RefActivity.
     * @example
     * // Create one RefActivity
     * const RefActivity = await prisma.refActivity.create({
     *   data: {
     *     // ... data to create a RefActivity
     *   }
     * })
     * 
     */
    create<T extends RefActivityCreateArgs>(args: SelectSubset<T, RefActivityCreateArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefActivities.
     * @param {RefActivityCreateManyArgs} args - Arguments to create many RefActivities.
     * @example
     * // Create many RefActivities
     * const refActivity = await prisma.refActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefActivityCreateManyArgs>(args?: SelectSubset<T, RefActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefActivities and returns the data saved in the database.
     * @param {RefActivityCreateManyAndReturnArgs} args - Arguments to create many RefActivities.
     * @example
     * // Create many RefActivities
     * const refActivity = await prisma.refActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefActivities and only return the `id`
     * const refActivityWithIdOnly = await prisma.refActivity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, RefActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefActivity.
     * @param {RefActivityDeleteArgs} args - Arguments to delete one RefActivity.
     * @example
     * // Delete one RefActivity
     * const RefActivity = await prisma.refActivity.delete({
     *   where: {
     *     // ... filter to delete one RefActivity
     *   }
     * })
     * 
     */
    delete<T extends RefActivityDeleteArgs>(args: SelectSubset<T, RefActivityDeleteArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefActivity.
     * @param {RefActivityUpdateArgs} args - Arguments to update one RefActivity.
     * @example
     * // Update one RefActivity
     * const refActivity = await prisma.refActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefActivityUpdateArgs>(args: SelectSubset<T, RefActivityUpdateArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefActivities.
     * @param {RefActivityDeleteManyArgs} args - Arguments to filter RefActivities to delete.
     * @example
     * // Delete a few RefActivities
     * const { count } = await prisma.refActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefActivityDeleteManyArgs>(args?: SelectSubset<T, RefActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefActivities
     * const refActivity = await prisma.refActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefActivityUpdateManyArgs>(args: SelectSubset<T, RefActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefActivity.
     * @param {RefActivityUpsertArgs} args - Arguments to update or create a RefActivity.
     * @example
     * // Update or create a RefActivity
     * const refActivity = await prisma.refActivity.upsert({
     *   create: {
     *     // ... data to create a RefActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefActivity we want to update
     *   }
     * })
     */
    upsert<T extends RefActivityUpsertArgs>(args: SelectSubset<T, RefActivityUpsertArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityCountArgs} args - Arguments to filter RefActivities to count.
     * @example
     * // Count the number of RefActivities
     * const count = await prisma.refActivity.count({
     *   where: {
     *     // ... the filter for the RefActivities we want to count
     *   }
     * })
    **/
    count<T extends RefActivityCountArgs>(
      args?: Subset<T, RefActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefActivityAggregateArgs>(args: Subset<T, RefActivityAggregateArgs>): Prisma.PrismaPromise<GetRefActivityAggregateType<T>>

    /**
     * Group by RefActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefActivityGroupByArgs['orderBy'] }
        : { orderBy?: RefActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefActivity model
   */
  readonly fields: RefActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    materials<T extends RefActivity$materialsArgs<ExtArgs> = {}>(args?: Subset<T, RefActivity$materialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "findMany"> | Null>
    RefChecklistItemActivityLink<T extends RefActivity$RefChecklistItemActivityLinkArgs<ExtArgs> = {}>(args?: Subset<T, RefActivity$RefChecklistItemActivityLinkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemActivityLinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefActivity model
   */ 
  interface RefActivityFieldRefs {
    readonly id: FieldRef<"RefActivity", 'String'>
    readonly code: FieldRef<"RefActivity", 'String'>
    readonly title: FieldRef<"RefActivity", 'String'>
    readonly discipline: FieldRef<"RefActivity", 'Discipline'>
    readonly stageLabel: FieldRef<"RefActivity", 'String'>
    readonly phase: FieldRef<"RefActivity", 'String[]'>
    readonly element: FieldRef<"RefActivity", 'String[]'>
    readonly system: FieldRef<"RefActivity", 'String[]'>
    readonly nature: FieldRef<"RefActivity", 'String[]'>
    readonly method: FieldRef<"RefActivity", 'String[]'>
    readonly status: FieldRef<"RefActivity", 'String'>
    readonly version: FieldRef<"RefActivity", 'Int'>
    readonly versionLabel: FieldRef<"RefActivity", 'String'>
    readonly versionMajor: FieldRef<"RefActivity", 'Int'>
    readonly versionMinor: FieldRef<"RefActivity", 'Int'>
    readonly versionPatch: FieldRef<"RefActivity", 'Int'>
    readonly notes: FieldRef<"RefActivity", 'String'>
    readonly createdAt: FieldRef<"RefActivity", 'DateTime'>
    readonly updatedAt: FieldRef<"RefActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefActivity findUnique
   */
  export type RefActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * Filter, which RefActivity to fetch.
     */
    where: RefActivityWhereUniqueInput
  }

  /**
   * RefActivity findUniqueOrThrow
   */
  export type RefActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * Filter, which RefActivity to fetch.
     */
    where: RefActivityWhereUniqueInput
  }

  /**
   * RefActivity findFirst
   */
  export type RefActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * Filter, which RefActivity to fetch.
     */
    where?: RefActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefActivities to fetch.
     */
    orderBy?: RefActivityOrderByWithRelationInput | RefActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefActivities.
     */
    cursor?: RefActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefActivities.
     */
    distinct?: RefActivityScalarFieldEnum | RefActivityScalarFieldEnum[]
  }

  /**
   * RefActivity findFirstOrThrow
   */
  export type RefActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * Filter, which RefActivity to fetch.
     */
    where?: RefActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefActivities to fetch.
     */
    orderBy?: RefActivityOrderByWithRelationInput | RefActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefActivities.
     */
    cursor?: RefActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefActivities.
     */
    distinct?: RefActivityScalarFieldEnum | RefActivityScalarFieldEnum[]
  }

  /**
   * RefActivity findMany
   */
  export type RefActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * Filter, which RefActivities to fetch.
     */
    where?: RefActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefActivities to fetch.
     */
    orderBy?: RefActivityOrderByWithRelationInput | RefActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefActivities.
     */
    cursor?: RefActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefActivities.
     */
    skip?: number
    distinct?: RefActivityScalarFieldEnum | RefActivityScalarFieldEnum[]
  }

  /**
   * RefActivity create
   */
  export type RefActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a RefActivity.
     */
    data: XOR<RefActivityCreateInput, RefActivityUncheckedCreateInput>
  }

  /**
   * RefActivity createMany
   */
  export type RefActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefActivities.
     */
    data: RefActivityCreateManyInput | RefActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefActivity createManyAndReturn
   */
  export type RefActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefActivities.
     */
    data: RefActivityCreateManyInput | RefActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefActivity update
   */
  export type RefActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a RefActivity.
     */
    data: XOR<RefActivityUpdateInput, RefActivityUncheckedUpdateInput>
    /**
     * Choose, which RefActivity to update.
     */
    where: RefActivityWhereUniqueInput
  }

  /**
   * RefActivity updateMany
   */
  export type RefActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefActivities.
     */
    data: XOR<RefActivityUpdateManyMutationInput, RefActivityUncheckedUpdateManyInput>
    /**
     * Filter which RefActivities to update
     */
    where?: RefActivityWhereInput
  }

  /**
   * RefActivity upsert
   */
  export type RefActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the RefActivity to update in case it exists.
     */
    where: RefActivityWhereUniqueInput
    /**
     * In case the RefActivity found by the `where` argument doesn't exist, create a new RefActivity with this data.
     */
    create: XOR<RefActivityCreateInput, RefActivityUncheckedCreateInput>
    /**
     * In case the RefActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefActivityUpdateInput, RefActivityUncheckedUpdateInput>
  }

  /**
   * RefActivity delete
   */
  export type RefActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
    /**
     * Filter which RefActivity to delete.
     */
    where: RefActivityWhereUniqueInput
  }

  /**
   * RefActivity deleteMany
   */
  export type RefActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefActivities to delete
     */
    where?: RefActivityWhereInput
  }

  /**
   * RefActivity.materials
   */
  export type RefActivity$materialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    where?: RefActivityMaterialWhereInput
    orderBy?: RefActivityMaterialOrderByWithRelationInput | RefActivityMaterialOrderByWithRelationInput[]
    cursor?: RefActivityMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefActivityMaterialScalarFieldEnum | RefActivityMaterialScalarFieldEnum[]
  }

  /**
   * RefActivity.RefChecklistItemActivityLink
   */
  export type RefActivity$RefChecklistItemActivityLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemActivityLink
     */
    select?: RefChecklistItemActivityLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemActivityLinkInclude<ExtArgs> | null
    where?: RefChecklistItemActivityLinkWhereInput
    orderBy?: RefChecklistItemActivityLinkOrderByWithRelationInput | RefChecklistItemActivityLinkOrderByWithRelationInput[]
    cursor?: RefChecklistItemActivityLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefChecklistItemActivityLinkScalarFieldEnum | RefChecklistItemActivityLinkScalarFieldEnum[]
  }

  /**
   * RefActivity without action
   */
  export type RefActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivity
     */
    select?: RefActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityInclude<ExtArgs> | null
  }


  /**
   * Model RefMaterial
   */

  export type AggregateRefMaterial = {
    _count: RefMaterialCountAggregateOutputType | null
    _avg: RefMaterialAvgAggregateOutputType | null
    _sum: RefMaterialSumAggregateOutputType | null
    _min: RefMaterialMinAggregateOutputType | null
    _max: RefMaterialMaxAggregateOutputType | null
  }

  export type RefMaterialAvgAggregateOutputType = {
    version: number | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
  }

  export type RefMaterialSumAggregateOutputType = {
    version: number | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
  }

  export type RefMaterialMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    discipline: $Enums.MaterialDiscipline | null
    category: string | null
    manufacturer: string | null
    model: string | null
    fireRating: string | null
    version: number | null
    versionLabel: string | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
    notes: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RefMaterialMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    discipline: $Enums.MaterialDiscipline | null
    category: string | null
    manufacturer: string | null
    model: string | null
    fireRating: string | null
    version: number | null
    versionLabel: string | null
    versionMajor: number | null
    versionMinor: number | null
    versionPatch: number | null
    notes: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RefMaterialCountAggregateOutputType = {
    id: number
    code: number
    name: number
    discipline: number
    category: number
    manufacturer: number
    model: number
    standards: number
    fireRating: number
    keyProps: number
    aliases: number
    properties: number
    version: number
    versionLabel: number
    versionMajor: number
    versionMinor: number
    versionPatch: number
    notes: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RefMaterialAvgAggregateInputType = {
    version?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
  }

  export type RefMaterialSumAggregateInputType = {
    version?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
  }

  export type RefMaterialMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    discipline?: true
    category?: true
    manufacturer?: true
    model?: true
    fireRating?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RefMaterialMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    discipline?: true
    category?: true
    manufacturer?: true
    model?: true
    fireRating?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RefMaterialCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    discipline?: true
    category?: true
    manufacturer?: true
    model?: true
    standards?: true
    fireRating?: true
    keyProps?: true
    aliases?: true
    properties?: true
    version?: true
    versionLabel?: true
    versionMajor?: true
    versionMinor?: true
    versionPatch?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RefMaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefMaterial to aggregate.
     */
    where?: RefMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefMaterials to fetch.
     */
    orderBy?: RefMaterialOrderByWithRelationInput | RefMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefMaterials
    **/
    _count?: true | RefMaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefMaterialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefMaterialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefMaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefMaterialMaxAggregateInputType
  }

  export type GetRefMaterialAggregateType<T extends RefMaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateRefMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefMaterial[P]>
      : GetScalarType<T[P], AggregateRefMaterial[P]>
  }




  export type RefMaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefMaterialWhereInput
    orderBy?: RefMaterialOrderByWithAggregationInput | RefMaterialOrderByWithAggregationInput[]
    by: RefMaterialScalarFieldEnum[] | RefMaterialScalarFieldEnum
    having?: RefMaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefMaterialCountAggregateInputType | true
    _avg?: RefMaterialAvgAggregateInputType
    _sum?: RefMaterialSumAggregateInputType
    _min?: RefMaterialMinAggregateInputType
    _max?: RefMaterialMaxAggregateInputType
  }

  export type RefMaterialGroupByOutputType = {
    id: string
    code: string | null
    name: string
    discipline: $Enums.MaterialDiscipline | null
    category: string | null
    manufacturer: string | null
    model: string | null
    standards: string[]
    fireRating: string | null
    keyProps: string[]
    aliases: string[]
    properties: JsonValue | null
    version: number
    versionLabel: string | null
    versionMajor: number
    versionMinor: number
    versionPatch: number
    notes: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: RefMaterialCountAggregateOutputType | null
    _avg: RefMaterialAvgAggregateOutputType | null
    _sum: RefMaterialSumAggregateOutputType | null
    _min: RefMaterialMinAggregateOutputType | null
    _max: RefMaterialMaxAggregateOutputType | null
  }

  type GetRefMaterialGroupByPayload<T extends RefMaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefMaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefMaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefMaterialGroupByOutputType[P]>
            : GetScalarType<T[P], RefMaterialGroupByOutputType[P]>
        }
      >
    >


  export type RefMaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    discipline?: boolean
    category?: boolean
    manufacturer?: boolean
    model?: boolean
    standards?: boolean
    fireRating?: boolean
    keyProps?: boolean
    aliases?: boolean
    properties?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activityUses?: boolean | RefMaterial$activityUsesArgs<ExtArgs>
    RefChecklistItemMaterialLink?: boolean | RefMaterial$RefChecklistItemMaterialLinkArgs<ExtArgs>
    _count?: boolean | RefMaterialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refMaterial"]>

  export type RefMaterialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    discipline?: boolean
    category?: boolean
    manufacturer?: boolean
    model?: boolean
    standards?: boolean
    fireRating?: boolean
    keyProps?: boolean
    aliases?: boolean
    properties?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["refMaterial"]>

  export type RefMaterialSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    discipline?: boolean
    category?: boolean
    manufacturer?: boolean
    model?: boolean
    standards?: boolean
    fireRating?: boolean
    keyProps?: boolean
    aliases?: boolean
    properties?: boolean
    version?: boolean
    versionLabel?: boolean
    versionMajor?: boolean
    versionMinor?: boolean
    versionPatch?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RefMaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityUses?: boolean | RefMaterial$activityUsesArgs<ExtArgs>
    RefChecklistItemMaterialLink?: boolean | RefMaterial$RefChecklistItemMaterialLinkArgs<ExtArgs>
    _count?: boolean | RefMaterialCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RefMaterialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RefMaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefMaterial"
    objects: {
      activityUses: Prisma.$RefActivityMaterialPayload<ExtArgs>[]
      RefChecklistItemMaterialLink: Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string | null
      name: string
      discipline: $Enums.MaterialDiscipline | null
      category: string | null
      manufacturer: string | null
      model: string | null
      standards: string[]
      fireRating: string | null
      keyProps: string[]
      aliases: string[]
      properties: Prisma.JsonValue | null
      version: number
      versionLabel: string | null
      versionMajor: number
      versionMinor: number
      versionPatch: number
      notes: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["refMaterial"]>
    composites: {}
  }

  type RefMaterialGetPayload<S extends boolean | null | undefined | RefMaterialDefaultArgs> = $Result.GetResult<Prisma.$RefMaterialPayload, S>

  type RefMaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefMaterialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefMaterialCountAggregateInputType | true
    }

  export interface RefMaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefMaterial'], meta: { name: 'RefMaterial' } }
    /**
     * Find zero or one RefMaterial that matches the filter.
     * @param {RefMaterialFindUniqueArgs} args - Arguments to find a RefMaterial
     * @example
     * // Get one RefMaterial
     * const refMaterial = await prisma.refMaterial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefMaterialFindUniqueArgs>(args: SelectSubset<T, RefMaterialFindUniqueArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefMaterial that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefMaterialFindUniqueOrThrowArgs} args - Arguments to find a RefMaterial
     * @example
     * // Get one RefMaterial
     * const refMaterial = await prisma.refMaterial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefMaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, RefMaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefMaterial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefMaterialFindFirstArgs} args - Arguments to find a RefMaterial
     * @example
     * // Get one RefMaterial
     * const refMaterial = await prisma.refMaterial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefMaterialFindFirstArgs>(args?: SelectSubset<T, RefMaterialFindFirstArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefMaterial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefMaterialFindFirstOrThrowArgs} args - Arguments to find a RefMaterial
     * @example
     * // Get one RefMaterial
     * const refMaterial = await prisma.refMaterial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefMaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, RefMaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefMaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefMaterials
     * const refMaterials = await prisma.refMaterial.findMany()
     * 
     * // Get first 10 RefMaterials
     * const refMaterials = await prisma.refMaterial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refMaterialWithIdOnly = await prisma.refMaterial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefMaterialFindManyArgs>(args?: SelectSubset<T, RefMaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefMaterial.
     * @param {RefMaterialCreateArgs} args - Arguments to create a RefMaterial.
     * @example
     * // Create one RefMaterial
     * const RefMaterial = await prisma.refMaterial.create({
     *   data: {
     *     // ... data to create a RefMaterial
     *   }
     * })
     * 
     */
    create<T extends RefMaterialCreateArgs>(args: SelectSubset<T, RefMaterialCreateArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefMaterials.
     * @param {RefMaterialCreateManyArgs} args - Arguments to create many RefMaterials.
     * @example
     * // Create many RefMaterials
     * const refMaterial = await prisma.refMaterial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefMaterialCreateManyArgs>(args?: SelectSubset<T, RefMaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefMaterials and returns the data saved in the database.
     * @param {RefMaterialCreateManyAndReturnArgs} args - Arguments to create many RefMaterials.
     * @example
     * // Create many RefMaterials
     * const refMaterial = await prisma.refMaterial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefMaterials and only return the `id`
     * const refMaterialWithIdOnly = await prisma.refMaterial.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefMaterialCreateManyAndReturnArgs>(args?: SelectSubset<T, RefMaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefMaterial.
     * @param {RefMaterialDeleteArgs} args - Arguments to delete one RefMaterial.
     * @example
     * // Delete one RefMaterial
     * const RefMaterial = await prisma.refMaterial.delete({
     *   where: {
     *     // ... filter to delete one RefMaterial
     *   }
     * })
     * 
     */
    delete<T extends RefMaterialDeleteArgs>(args: SelectSubset<T, RefMaterialDeleteArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefMaterial.
     * @param {RefMaterialUpdateArgs} args - Arguments to update one RefMaterial.
     * @example
     * // Update one RefMaterial
     * const refMaterial = await prisma.refMaterial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefMaterialUpdateArgs>(args: SelectSubset<T, RefMaterialUpdateArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefMaterials.
     * @param {RefMaterialDeleteManyArgs} args - Arguments to filter RefMaterials to delete.
     * @example
     * // Delete a few RefMaterials
     * const { count } = await prisma.refMaterial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefMaterialDeleteManyArgs>(args?: SelectSubset<T, RefMaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefMaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefMaterials
     * const refMaterial = await prisma.refMaterial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefMaterialUpdateManyArgs>(args: SelectSubset<T, RefMaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefMaterial.
     * @param {RefMaterialUpsertArgs} args - Arguments to update or create a RefMaterial.
     * @example
     * // Update or create a RefMaterial
     * const refMaterial = await prisma.refMaterial.upsert({
     *   create: {
     *     // ... data to create a RefMaterial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefMaterial we want to update
     *   }
     * })
     */
    upsert<T extends RefMaterialUpsertArgs>(args: SelectSubset<T, RefMaterialUpsertArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefMaterialCountArgs} args - Arguments to filter RefMaterials to count.
     * @example
     * // Count the number of RefMaterials
     * const count = await prisma.refMaterial.count({
     *   where: {
     *     // ... the filter for the RefMaterials we want to count
     *   }
     * })
    **/
    count<T extends RefMaterialCountArgs>(
      args?: Subset<T, RefMaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefMaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefMaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefMaterialAggregateArgs>(args: Subset<T, RefMaterialAggregateArgs>): Prisma.PrismaPromise<GetRefMaterialAggregateType<T>>

    /**
     * Group by RefMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefMaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefMaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefMaterialGroupByArgs['orderBy'] }
        : { orderBy?: RefMaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefMaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefMaterial model
   */
  readonly fields: RefMaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefMaterial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefMaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityUses<T extends RefMaterial$activityUsesArgs<ExtArgs> = {}>(args?: Subset<T, RefMaterial$activityUsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "findMany"> | Null>
    RefChecklistItemMaterialLink<T extends RefMaterial$RefChecklistItemMaterialLinkArgs<ExtArgs> = {}>(args?: Subset<T, RefMaterial$RefChecklistItemMaterialLinkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefChecklistItemMaterialLinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefMaterial model
   */ 
  interface RefMaterialFieldRefs {
    readonly id: FieldRef<"RefMaterial", 'String'>
    readonly code: FieldRef<"RefMaterial", 'String'>
    readonly name: FieldRef<"RefMaterial", 'String'>
    readonly discipline: FieldRef<"RefMaterial", 'MaterialDiscipline'>
    readonly category: FieldRef<"RefMaterial", 'String'>
    readonly manufacturer: FieldRef<"RefMaterial", 'String'>
    readonly model: FieldRef<"RefMaterial", 'String'>
    readonly standards: FieldRef<"RefMaterial", 'String[]'>
    readonly fireRating: FieldRef<"RefMaterial", 'String'>
    readonly keyProps: FieldRef<"RefMaterial", 'String[]'>
    readonly aliases: FieldRef<"RefMaterial", 'String[]'>
    readonly properties: FieldRef<"RefMaterial", 'Json'>
    readonly version: FieldRef<"RefMaterial", 'Int'>
    readonly versionLabel: FieldRef<"RefMaterial", 'String'>
    readonly versionMajor: FieldRef<"RefMaterial", 'Int'>
    readonly versionMinor: FieldRef<"RefMaterial", 'Int'>
    readonly versionPatch: FieldRef<"RefMaterial", 'Int'>
    readonly notes: FieldRef<"RefMaterial", 'String'>
    readonly status: FieldRef<"RefMaterial", 'String'>
    readonly createdAt: FieldRef<"RefMaterial", 'DateTime'>
    readonly updatedAt: FieldRef<"RefMaterial", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefMaterial findUnique
   */
  export type RefMaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefMaterial to fetch.
     */
    where: RefMaterialWhereUniqueInput
  }

  /**
   * RefMaterial findUniqueOrThrow
   */
  export type RefMaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefMaterial to fetch.
     */
    where: RefMaterialWhereUniqueInput
  }

  /**
   * RefMaterial findFirst
   */
  export type RefMaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefMaterial to fetch.
     */
    where?: RefMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefMaterials to fetch.
     */
    orderBy?: RefMaterialOrderByWithRelationInput | RefMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefMaterials.
     */
    cursor?: RefMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefMaterials.
     */
    distinct?: RefMaterialScalarFieldEnum | RefMaterialScalarFieldEnum[]
  }

  /**
   * RefMaterial findFirstOrThrow
   */
  export type RefMaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefMaterial to fetch.
     */
    where?: RefMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefMaterials to fetch.
     */
    orderBy?: RefMaterialOrderByWithRelationInput | RefMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefMaterials.
     */
    cursor?: RefMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefMaterials.
     */
    distinct?: RefMaterialScalarFieldEnum | RefMaterialScalarFieldEnum[]
  }

  /**
   * RefMaterial findMany
   */
  export type RefMaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefMaterials to fetch.
     */
    where?: RefMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefMaterials to fetch.
     */
    orderBy?: RefMaterialOrderByWithRelationInput | RefMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefMaterials.
     */
    cursor?: RefMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefMaterials.
     */
    skip?: number
    distinct?: RefMaterialScalarFieldEnum | RefMaterialScalarFieldEnum[]
  }

  /**
   * RefMaterial create
   */
  export type RefMaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a RefMaterial.
     */
    data: XOR<RefMaterialCreateInput, RefMaterialUncheckedCreateInput>
  }

  /**
   * RefMaterial createMany
   */
  export type RefMaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefMaterials.
     */
    data: RefMaterialCreateManyInput | RefMaterialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefMaterial createManyAndReturn
   */
  export type RefMaterialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefMaterials.
     */
    data: RefMaterialCreateManyInput | RefMaterialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefMaterial update
   */
  export type RefMaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a RefMaterial.
     */
    data: XOR<RefMaterialUpdateInput, RefMaterialUncheckedUpdateInput>
    /**
     * Choose, which RefMaterial to update.
     */
    where: RefMaterialWhereUniqueInput
  }

  /**
   * RefMaterial updateMany
   */
  export type RefMaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefMaterials.
     */
    data: XOR<RefMaterialUpdateManyMutationInput, RefMaterialUncheckedUpdateManyInput>
    /**
     * Filter which RefMaterials to update
     */
    where?: RefMaterialWhereInput
  }

  /**
   * RefMaterial upsert
   */
  export type RefMaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the RefMaterial to update in case it exists.
     */
    where: RefMaterialWhereUniqueInput
    /**
     * In case the RefMaterial found by the `where` argument doesn't exist, create a new RefMaterial with this data.
     */
    create: XOR<RefMaterialCreateInput, RefMaterialUncheckedCreateInput>
    /**
     * In case the RefMaterial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefMaterialUpdateInput, RefMaterialUncheckedUpdateInput>
  }

  /**
   * RefMaterial delete
   */
  export type RefMaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
    /**
     * Filter which RefMaterial to delete.
     */
    where: RefMaterialWhereUniqueInput
  }

  /**
   * RefMaterial deleteMany
   */
  export type RefMaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefMaterials to delete
     */
    where?: RefMaterialWhereInput
  }

  /**
   * RefMaterial.activityUses
   */
  export type RefMaterial$activityUsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    where?: RefActivityMaterialWhereInput
    orderBy?: RefActivityMaterialOrderByWithRelationInput | RefActivityMaterialOrderByWithRelationInput[]
    cursor?: RefActivityMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefActivityMaterialScalarFieldEnum | RefActivityMaterialScalarFieldEnum[]
  }

  /**
   * RefMaterial.RefChecklistItemMaterialLink
   */
  export type RefMaterial$RefChecklistItemMaterialLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefChecklistItemMaterialLink
     */
    select?: RefChecklistItemMaterialLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefChecklistItemMaterialLinkInclude<ExtArgs> | null
    where?: RefChecklistItemMaterialLinkWhereInput
    orderBy?: RefChecklistItemMaterialLinkOrderByWithRelationInput | RefChecklistItemMaterialLinkOrderByWithRelationInput[]
    cursor?: RefChecklistItemMaterialLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefChecklistItemMaterialLinkScalarFieldEnum | RefChecklistItemMaterialLinkScalarFieldEnum[]
  }

  /**
   * RefMaterial without action
   */
  export type RefMaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefMaterial
     */
    select?: RefMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefMaterialInclude<ExtArgs> | null
  }


  /**
   * Model RefActivityMaterial
   */

  export type AggregateRefActivityMaterial = {
    _count: RefActivityMaterialCountAggregateOutputType | null
    _min: RefActivityMaterialMinAggregateOutputType | null
    _max: RefActivityMaterialMaxAggregateOutputType | null
  }

  export type RefActivityMaterialMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    materialId: string | null
    note: string | null
  }

  export type RefActivityMaterialMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    materialId: string | null
    note: string | null
  }

  export type RefActivityMaterialCountAggregateOutputType = {
    id: number
    activityId: number
    materialId: number
    note: number
    _all: number
  }


  export type RefActivityMaterialMinAggregateInputType = {
    id?: true
    activityId?: true
    materialId?: true
    note?: true
  }

  export type RefActivityMaterialMaxAggregateInputType = {
    id?: true
    activityId?: true
    materialId?: true
    note?: true
  }

  export type RefActivityMaterialCountAggregateInputType = {
    id?: true
    activityId?: true
    materialId?: true
    note?: true
    _all?: true
  }

  export type RefActivityMaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefActivityMaterial to aggregate.
     */
    where?: RefActivityMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefActivityMaterials to fetch.
     */
    orderBy?: RefActivityMaterialOrderByWithRelationInput | RefActivityMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefActivityMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefActivityMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefActivityMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefActivityMaterials
    **/
    _count?: true | RefActivityMaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefActivityMaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefActivityMaterialMaxAggregateInputType
  }

  export type GetRefActivityMaterialAggregateType<T extends RefActivityMaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateRefActivityMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefActivityMaterial[P]>
      : GetScalarType<T[P], AggregateRefActivityMaterial[P]>
  }




  export type RefActivityMaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefActivityMaterialWhereInput
    orderBy?: RefActivityMaterialOrderByWithAggregationInput | RefActivityMaterialOrderByWithAggregationInput[]
    by: RefActivityMaterialScalarFieldEnum[] | RefActivityMaterialScalarFieldEnum
    having?: RefActivityMaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefActivityMaterialCountAggregateInputType | true
    _min?: RefActivityMaterialMinAggregateInputType
    _max?: RefActivityMaterialMaxAggregateInputType
  }

  export type RefActivityMaterialGroupByOutputType = {
    id: string
    activityId: string
    materialId: string
    note: string | null
    _count: RefActivityMaterialCountAggregateOutputType | null
    _min: RefActivityMaterialMinAggregateOutputType | null
    _max: RefActivityMaterialMaxAggregateOutputType | null
  }

  type GetRefActivityMaterialGroupByPayload<T extends RefActivityMaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefActivityMaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefActivityMaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefActivityMaterialGroupByOutputType[P]>
            : GetScalarType<T[P], RefActivityMaterialGroupByOutputType[P]>
        }
      >
    >


  export type RefActivityMaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    materialId?: boolean
    note?: boolean
    activity?: boolean | RefActivityDefaultArgs<ExtArgs>
    material?: boolean | RefMaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refActivityMaterial"]>

  export type RefActivityMaterialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    materialId?: boolean
    note?: boolean
    activity?: boolean | RefActivityDefaultArgs<ExtArgs>
    material?: boolean | RefMaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refActivityMaterial"]>

  export type RefActivityMaterialSelectScalar = {
    id?: boolean
    activityId?: boolean
    materialId?: boolean
    note?: boolean
  }

  export type RefActivityMaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | RefActivityDefaultArgs<ExtArgs>
    material?: boolean | RefMaterialDefaultArgs<ExtArgs>
  }
  export type RefActivityMaterialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | RefActivityDefaultArgs<ExtArgs>
    material?: boolean | RefMaterialDefaultArgs<ExtArgs>
  }

  export type $RefActivityMaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefActivityMaterial"
    objects: {
      activity: Prisma.$RefActivityPayload<ExtArgs>
      material: Prisma.$RefMaterialPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      materialId: string
      note: string | null
    }, ExtArgs["result"]["refActivityMaterial"]>
    composites: {}
  }

  type RefActivityMaterialGetPayload<S extends boolean | null | undefined | RefActivityMaterialDefaultArgs> = $Result.GetResult<Prisma.$RefActivityMaterialPayload, S>

  type RefActivityMaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefActivityMaterialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefActivityMaterialCountAggregateInputType | true
    }

  export interface RefActivityMaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefActivityMaterial'], meta: { name: 'RefActivityMaterial' } }
    /**
     * Find zero or one RefActivityMaterial that matches the filter.
     * @param {RefActivityMaterialFindUniqueArgs} args - Arguments to find a RefActivityMaterial
     * @example
     * // Get one RefActivityMaterial
     * const refActivityMaterial = await prisma.refActivityMaterial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefActivityMaterialFindUniqueArgs>(args: SelectSubset<T, RefActivityMaterialFindUniqueArgs<ExtArgs>>): Prisma__RefActivityMaterialClient<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefActivityMaterial that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefActivityMaterialFindUniqueOrThrowArgs} args - Arguments to find a RefActivityMaterial
     * @example
     * // Get one RefActivityMaterial
     * const refActivityMaterial = await prisma.refActivityMaterial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefActivityMaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, RefActivityMaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefActivityMaterialClient<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefActivityMaterial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityMaterialFindFirstArgs} args - Arguments to find a RefActivityMaterial
     * @example
     * // Get one RefActivityMaterial
     * const refActivityMaterial = await prisma.refActivityMaterial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefActivityMaterialFindFirstArgs>(args?: SelectSubset<T, RefActivityMaterialFindFirstArgs<ExtArgs>>): Prisma__RefActivityMaterialClient<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefActivityMaterial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityMaterialFindFirstOrThrowArgs} args - Arguments to find a RefActivityMaterial
     * @example
     * // Get one RefActivityMaterial
     * const refActivityMaterial = await prisma.refActivityMaterial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefActivityMaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, RefActivityMaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefActivityMaterialClient<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefActivityMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityMaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefActivityMaterials
     * const refActivityMaterials = await prisma.refActivityMaterial.findMany()
     * 
     * // Get first 10 RefActivityMaterials
     * const refActivityMaterials = await prisma.refActivityMaterial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refActivityMaterialWithIdOnly = await prisma.refActivityMaterial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefActivityMaterialFindManyArgs>(args?: SelectSubset<T, RefActivityMaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefActivityMaterial.
     * @param {RefActivityMaterialCreateArgs} args - Arguments to create a RefActivityMaterial.
     * @example
     * // Create one RefActivityMaterial
     * const RefActivityMaterial = await prisma.refActivityMaterial.create({
     *   data: {
     *     // ... data to create a RefActivityMaterial
     *   }
     * })
     * 
     */
    create<T extends RefActivityMaterialCreateArgs>(args: SelectSubset<T, RefActivityMaterialCreateArgs<ExtArgs>>): Prisma__RefActivityMaterialClient<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefActivityMaterials.
     * @param {RefActivityMaterialCreateManyArgs} args - Arguments to create many RefActivityMaterials.
     * @example
     * // Create many RefActivityMaterials
     * const refActivityMaterial = await prisma.refActivityMaterial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefActivityMaterialCreateManyArgs>(args?: SelectSubset<T, RefActivityMaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefActivityMaterials and returns the data saved in the database.
     * @param {RefActivityMaterialCreateManyAndReturnArgs} args - Arguments to create many RefActivityMaterials.
     * @example
     * // Create many RefActivityMaterials
     * const refActivityMaterial = await prisma.refActivityMaterial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefActivityMaterials and only return the `id`
     * const refActivityMaterialWithIdOnly = await prisma.refActivityMaterial.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefActivityMaterialCreateManyAndReturnArgs>(args?: SelectSubset<T, RefActivityMaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefActivityMaterial.
     * @param {RefActivityMaterialDeleteArgs} args - Arguments to delete one RefActivityMaterial.
     * @example
     * // Delete one RefActivityMaterial
     * const RefActivityMaterial = await prisma.refActivityMaterial.delete({
     *   where: {
     *     // ... filter to delete one RefActivityMaterial
     *   }
     * })
     * 
     */
    delete<T extends RefActivityMaterialDeleteArgs>(args: SelectSubset<T, RefActivityMaterialDeleteArgs<ExtArgs>>): Prisma__RefActivityMaterialClient<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefActivityMaterial.
     * @param {RefActivityMaterialUpdateArgs} args - Arguments to update one RefActivityMaterial.
     * @example
     * // Update one RefActivityMaterial
     * const refActivityMaterial = await prisma.refActivityMaterial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefActivityMaterialUpdateArgs>(args: SelectSubset<T, RefActivityMaterialUpdateArgs<ExtArgs>>): Prisma__RefActivityMaterialClient<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefActivityMaterials.
     * @param {RefActivityMaterialDeleteManyArgs} args - Arguments to filter RefActivityMaterials to delete.
     * @example
     * // Delete a few RefActivityMaterials
     * const { count } = await prisma.refActivityMaterial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefActivityMaterialDeleteManyArgs>(args?: SelectSubset<T, RefActivityMaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefActivityMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityMaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefActivityMaterials
     * const refActivityMaterial = await prisma.refActivityMaterial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefActivityMaterialUpdateManyArgs>(args: SelectSubset<T, RefActivityMaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefActivityMaterial.
     * @param {RefActivityMaterialUpsertArgs} args - Arguments to update or create a RefActivityMaterial.
     * @example
     * // Update or create a RefActivityMaterial
     * const refActivityMaterial = await prisma.refActivityMaterial.upsert({
     *   create: {
     *     // ... data to create a RefActivityMaterial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefActivityMaterial we want to update
     *   }
     * })
     */
    upsert<T extends RefActivityMaterialUpsertArgs>(args: SelectSubset<T, RefActivityMaterialUpsertArgs<ExtArgs>>): Prisma__RefActivityMaterialClient<$Result.GetResult<Prisma.$RefActivityMaterialPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefActivityMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityMaterialCountArgs} args - Arguments to filter RefActivityMaterials to count.
     * @example
     * // Count the number of RefActivityMaterials
     * const count = await prisma.refActivityMaterial.count({
     *   where: {
     *     // ... the filter for the RefActivityMaterials we want to count
     *   }
     * })
    **/
    count<T extends RefActivityMaterialCountArgs>(
      args?: Subset<T, RefActivityMaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefActivityMaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefActivityMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityMaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefActivityMaterialAggregateArgs>(args: Subset<T, RefActivityMaterialAggregateArgs>): Prisma.PrismaPromise<GetRefActivityMaterialAggregateType<T>>

    /**
     * Group by RefActivityMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefActivityMaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefActivityMaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefActivityMaterialGroupByArgs['orderBy'] }
        : { orderBy?: RefActivityMaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefActivityMaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefActivityMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefActivityMaterial model
   */
  readonly fields: RefActivityMaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefActivityMaterial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefActivityMaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activity<T extends RefActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RefActivityDefaultArgs<ExtArgs>>): Prisma__RefActivityClient<$Result.GetResult<Prisma.$RefActivityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    material<T extends RefMaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RefMaterialDefaultArgs<ExtArgs>>): Prisma__RefMaterialClient<$Result.GetResult<Prisma.$RefMaterialPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefActivityMaterial model
   */ 
  interface RefActivityMaterialFieldRefs {
    readonly id: FieldRef<"RefActivityMaterial", 'String'>
    readonly activityId: FieldRef<"RefActivityMaterial", 'String'>
    readonly materialId: FieldRef<"RefActivityMaterial", 'String'>
    readonly note: FieldRef<"RefActivityMaterial", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RefActivityMaterial findUnique
   */
  export type RefActivityMaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefActivityMaterial to fetch.
     */
    where: RefActivityMaterialWhereUniqueInput
  }

  /**
   * RefActivityMaterial findUniqueOrThrow
   */
  export type RefActivityMaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefActivityMaterial to fetch.
     */
    where: RefActivityMaterialWhereUniqueInput
  }

  /**
   * RefActivityMaterial findFirst
   */
  export type RefActivityMaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefActivityMaterial to fetch.
     */
    where?: RefActivityMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefActivityMaterials to fetch.
     */
    orderBy?: RefActivityMaterialOrderByWithRelationInput | RefActivityMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefActivityMaterials.
     */
    cursor?: RefActivityMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefActivityMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefActivityMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefActivityMaterials.
     */
    distinct?: RefActivityMaterialScalarFieldEnum | RefActivityMaterialScalarFieldEnum[]
  }

  /**
   * RefActivityMaterial findFirstOrThrow
   */
  export type RefActivityMaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefActivityMaterial to fetch.
     */
    where?: RefActivityMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefActivityMaterials to fetch.
     */
    orderBy?: RefActivityMaterialOrderByWithRelationInput | RefActivityMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefActivityMaterials.
     */
    cursor?: RefActivityMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefActivityMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefActivityMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefActivityMaterials.
     */
    distinct?: RefActivityMaterialScalarFieldEnum | RefActivityMaterialScalarFieldEnum[]
  }

  /**
   * RefActivityMaterial findMany
   */
  export type RefActivityMaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * Filter, which RefActivityMaterials to fetch.
     */
    where?: RefActivityMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefActivityMaterials to fetch.
     */
    orderBy?: RefActivityMaterialOrderByWithRelationInput | RefActivityMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefActivityMaterials.
     */
    cursor?: RefActivityMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefActivityMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefActivityMaterials.
     */
    skip?: number
    distinct?: RefActivityMaterialScalarFieldEnum | RefActivityMaterialScalarFieldEnum[]
  }

  /**
   * RefActivityMaterial create
   */
  export type RefActivityMaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a RefActivityMaterial.
     */
    data: XOR<RefActivityMaterialCreateInput, RefActivityMaterialUncheckedCreateInput>
  }

  /**
   * RefActivityMaterial createMany
   */
  export type RefActivityMaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefActivityMaterials.
     */
    data: RefActivityMaterialCreateManyInput | RefActivityMaterialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefActivityMaterial createManyAndReturn
   */
  export type RefActivityMaterialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefActivityMaterials.
     */
    data: RefActivityMaterialCreateManyInput | RefActivityMaterialCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefActivityMaterial update
   */
  export type RefActivityMaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a RefActivityMaterial.
     */
    data: XOR<RefActivityMaterialUpdateInput, RefActivityMaterialUncheckedUpdateInput>
    /**
     * Choose, which RefActivityMaterial to update.
     */
    where: RefActivityMaterialWhereUniqueInput
  }

  /**
   * RefActivityMaterial updateMany
   */
  export type RefActivityMaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefActivityMaterials.
     */
    data: XOR<RefActivityMaterialUpdateManyMutationInput, RefActivityMaterialUncheckedUpdateManyInput>
    /**
     * Filter which RefActivityMaterials to update
     */
    where?: RefActivityMaterialWhereInput
  }

  /**
   * RefActivityMaterial upsert
   */
  export type RefActivityMaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the RefActivityMaterial to update in case it exists.
     */
    where: RefActivityMaterialWhereUniqueInput
    /**
     * In case the RefActivityMaterial found by the `where` argument doesn't exist, create a new RefActivityMaterial with this data.
     */
    create: XOR<RefActivityMaterialCreateInput, RefActivityMaterialUncheckedCreateInput>
    /**
     * In case the RefActivityMaterial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefActivityMaterialUpdateInput, RefActivityMaterialUncheckedUpdateInput>
  }

  /**
   * RefActivityMaterial delete
   */
  export type RefActivityMaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
    /**
     * Filter which RefActivityMaterial to delete.
     */
    where: RefActivityMaterialWhereUniqueInput
  }

  /**
   * RefActivityMaterial deleteMany
   */
  export type RefActivityMaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefActivityMaterials to delete
     */
    where?: RefActivityMaterialWhereInput
  }

  /**
   * RefActivityMaterial without action
   */
  export type RefActivityMaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefActivityMaterial
     */
    select?: RefActivityMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefActivityMaterialInclude<ExtArgs> | null
  }


  /**
   * Model AdminAuditSetting
   */

  export type AggregateAdminAuditSetting = {
    _count: AdminAuditSettingCountAggregateOutputType | null
    _avg: AdminAuditSettingAvgAggregateOutputType | null
    _sum: AdminAuditSettingSumAggregateOutputType | null
    _min: AdminAuditSettingMinAggregateOutputType | null
    _max: AdminAuditSettingMaxAggregateOutputType | null
  }

  export type AdminAuditSettingAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminAuditSettingSumAggregateOutputType = {
    id: number | null
  }

  export type AdminAuditSettingMinAggregateOutputType = {
    id: number | null
    assignmentsEnabled: boolean | null
    updatedByUserId: string | null
    updatedByName: string | null
    updatedAt: Date | null
  }

  export type AdminAuditSettingMaxAggregateOutputType = {
    id: number | null
    assignmentsEnabled: boolean | null
    updatedByUserId: string | null
    updatedByName: string | null
    updatedAt: Date | null
  }

  export type AdminAuditSettingCountAggregateOutputType = {
    id: number
    assignmentsEnabled: number
    updatedByUserId: number
    updatedByName: number
    updatedAt: number
    _all: number
  }


  export type AdminAuditSettingAvgAggregateInputType = {
    id?: true
  }

  export type AdminAuditSettingSumAggregateInputType = {
    id?: true
  }

  export type AdminAuditSettingMinAggregateInputType = {
    id?: true
    assignmentsEnabled?: true
    updatedByUserId?: true
    updatedByName?: true
    updatedAt?: true
  }

  export type AdminAuditSettingMaxAggregateInputType = {
    id?: true
    assignmentsEnabled?: true
    updatedByUserId?: true
    updatedByName?: true
    updatedAt?: true
  }

  export type AdminAuditSettingCountAggregateInputType = {
    id?: true
    assignmentsEnabled?: true
    updatedByUserId?: true
    updatedByName?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAuditSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAuditSetting to aggregate.
     */
    where?: AdminAuditSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAuditSettings to fetch.
     */
    orderBy?: AdminAuditSettingOrderByWithRelationInput | AdminAuditSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminAuditSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAuditSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAuditSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminAuditSettings
    **/
    _count?: true | AdminAuditSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAuditSettingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminAuditSettingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminAuditSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminAuditSettingMaxAggregateInputType
  }

  export type GetAdminAuditSettingAggregateType<T extends AdminAuditSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminAuditSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminAuditSetting[P]>
      : GetScalarType<T[P], AggregateAdminAuditSetting[P]>
  }




  export type AdminAuditSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminAuditSettingWhereInput
    orderBy?: AdminAuditSettingOrderByWithAggregationInput | AdminAuditSettingOrderByWithAggregationInput[]
    by: AdminAuditSettingScalarFieldEnum[] | AdminAuditSettingScalarFieldEnum
    having?: AdminAuditSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminAuditSettingCountAggregateInputType | true
    _avg?: AdminAuditSettingAvgAggregateInputType
    _sum?: AdminAuditSettingSumAggregateInputType
    _min?: AdminAuditSettingMinAggregateInputType
    _max?: AdminAuditSettingMaxAggregateInputType
  }

  export type AdminAuditSettingGroupByOutputType = {
    id: number
    assignmentsEnabled: boolean
    updatedByUserId: string | null
    updatedByName: string | null
    updatedAt: Date
    _count: AdminAuditSettingCountAggregateOutputType | null
    _avg: AdminAuditSettingAvgAggregateOutputType | null
    _sum: AdminAuditSettingSumAggregateOutputType | null
    _min: AdminAuditSettingMinAggregateOutputType | null
    _max: AdminAuditSettingMaxAggregateOutputType | null
  }

  type GetAdminAuditSettingGroupByPayload<T extends AdminAuditSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminAuditSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminAuditSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminAuditSettingGroupByOutputType[P]>
            : GetScalarType<T[P], AdminAuditSettingGroupByOutputType[P]>
        }
      >
    >


  export type AdminAuditSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentsEnabled?: boolean
    updatedByUserId?: boolean
    updatedByName?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["adminAuditSetting"]>

  export type AdminAuditSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentsEnabled?: boolean
    updatedByUserId?: boolean
    updatedByName?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["adminAuditSetting"]>

  export type AdminAuditSettingSelectScalar = {
    id?: boolean
    assignmentsEnabled?: boolean
    updatedByUserId?: boolean
    updatedByName?: boolean
    updatedAt?: boolean
  }


  export type $AdminAuditSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminAuditSetting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      /**
       * When false, no assignment audit rows are written.
       */
      assignmentsEnabled: boolean
      updatedByUserId: string | null
      updatedByName: string | null
      updatedAt: Date
    }, ExtArgs["result"]["adminAuditSetting"]>
    composites: {}
  }

  type AdminAuditSettingGetPayload<S extends boolean | null | undefined | AdminAuditSettingDefaultArgs> = $Result.GetResult<Prisma.$AdminAuditSettingPayload, S>

  type AdminAuditSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminAuditSettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminAuditSettingCountAggregateInputType | true
    }

  export interface AdminAuditSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminAuditSetting'], meta: { name: 'AdminAuditSetting' } }
    /**
     * Find zero or one AdminAuditSetting that matches the filter.
     * @param {AdminAuditSettingFindUniqueArgs} args - Arguments to find a AdminAuditSetting
     * @example
     * // Get one AdminAuditSetting
     * const adminAuditSetting = await prisma.adminAuditSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminAuditSettingFindUniqueArgs>(args: SelectSubset<T, AdminAuditSettingFindUniqueArgs<ExtArgs>>): Prisma__AdminAuditSettingClient<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AdminAuditSetting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminAuditSettingFindUniqueOrThrowArgs} args - Arguments to find a AdminAuditSetting
     * @example
     * // Get one AdminAuditSetting
     * const adminAuditSetting = await prisma.adminAuditSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminAuditSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminAuditSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminAuditSettingClient<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AdminAuditSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditSettingFindFirstArgs} args - Arguments to find a AdminAuditSetting
     * @example
     * // Get one AdminAuditSetting
     * const adminAuditSetting = await prisma.adminAuditSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminAuditSettingFindFirstArgs>(args?: SelectSubset<T, AdminAuditSettingFindFirstArgs<ExtArgs>>): Prisma__AdminAuditSettingClient<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AdminAuditSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditSettingFindFirstOrThrowArgs} args - Arguments to find a AdminAuditSetting
     * @example
     * // Get one AdminAuditSetting
     * const adminAuditSetting = await prisma.adminAuditSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminAuditSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminAuditSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminAuditSettingClient<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AdminAuditSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminAuditSettings
     * const adminAuditSettings = await prisma.adminAuditSetting.findMany()
     * 
     * // Get first 10 AdminAuditSettings
     * const adminAuditSettings = await prisma.adminAuditSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminAuditSettingWithIdOnly = await prisma.adminAuditSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminAuditSettingFindManyArgs>(args?: SelectSubset<T, AdminAuditSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AdminAuditSetting.
     * @param {AdminAuditSettingCreateArgs} args - Arguments to create a AdminAuditSetting.
     * @example
     * // Create one AdminAuditSetting
     * const AdminAuditSetting = await prisma.adminAuditSetting.create({
     *   data: {
     *     // ... data to create a AdminAuditSetting
     *   }
     * })
     * 
     */
    create<T extends AdminAuditSettingCreateArgs>(args: SelectSubset<T, AdminAuditSettingCreateArgs<ExtArgs>>): Prisma__AdminAuditSettingClient<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AdminAuditSettings.
     * @param {AdminAuditSettingCreateManyArgs} args - Arguments to create many AdminAuditSettings.
     * @example
     * // Create many AdminAuditSettings
     * const adminAuditSetting = await prisma.adminAuditSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminAuditSettingCreateManyArgs>(args?: SelectSubset<T, AdminAuditSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminAuditSettings and returns the data saved in the database.
     * @param {AdminAuditSettingCreateManyAndReturnArgs} args - Arguments to create many AdminAuditSettings.
     * @example
     * // Create many AdminAuditSettings
     * const adminAuditSetting = await prisma.adminAuditSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminAuditSettings and only return the `id`
     * const adminAuditSettingWithIdOnly = await prisma.adminAuditSetting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminAuditSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminAuditSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AdminAuditSetting.
     * @param {AdminAuditSettingDeleteArgs} args - Arguments to delete one AdminAuditSetting.
     * @example
     * // Delete one AdminAuditSetting
     * const AdminAuditSetting = await prisma.adminAuditSetting.delete({
     *   where: {
     *     // ... filter to delete one AdminAuditSetting
     *   }
     * })
     * 
     */
    delete<T extends AdminAuditSettingDeleteArgs>(args: SelectSubset<T, AdminAuditSettingDeleteArgs<ExtArgs>>): Prisma__AdminAuditSettingClient<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AdminAuditSetting.
     * @param {AdminAuditSettingUpdateArgs} args - Arguments to update one AdminAuditSetting.
     * @example
     * // Update one AdminAuditSetting
     * const adminAuditSetting = await prisma.adminAuditSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminAuditSettingUpdateArgs>(args: SelectSubset<T, AdminAuditSettingUpdateArgs<ExtArgs>>): Prisma__AdminAuditSettingClient<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AdminAuditSettings.
     * @param {AdminAuditSettingDeleteManyArgs} args - Arguments to filter AdminAuditSettings to delete.
     * @example
     * // Delete a few AdminAuditSettings
     * const { count } = await prisma.adminAuditSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminAuditSettingDeleteManyArgs>(args?: SelectSubset<T, AdminAuditSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminAuditSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminAuditSettings
     * const adminAuditSetting = await prisma.adminAuditSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminAuditSettingUpdateManyArgs>(args: SelectSubset<T, AdminAuditSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminAuditSetting.
     * @param {AdminAuditSettingUpsertArgs} args - Arguments to update or create a AdminAuditSetting.
     * @example
     * // Update or create a AdminAuditSetting
     * const adminAuditSetting = await prisma.adminAuditSetting.upsert({
     *   create: {
     *     // ... data to create a AdminAuditSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminAuditSetting we want to update
     *   }
     * })
     */
    upsert<T extends AdminAuditSettingUpsertArgs>(args: SelectSubset<T, AdminAuditSettingUpsertArgs<ExtArgs>>): Prisma__AdminAuditSettingClient<$Result.GetResult<Prisma.$AdminAuditSettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AdminAuditSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditSettingCountArgs} args - Arguments to filter AdminAuditSettings to count.
     * @example
     * // Count the number of AdminAuditSettings
     * const count = await prisma.adminAuditSetting.count({
     *   where: {
     *     // ... the filter for the AdminAuditSettings we want to count
     *   }
     * })
    **/
    count<T extends AdminAuditSettingCountArgs>(
      args?: Subset<T, AdminAuditSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminAuditSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminAuditSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAuditSettingAggregateArgs>(args: Subset<T, AdminAuditSettingAggregateArgs>): Prisma.PrismaPromise<GetAdminAuditSettingAggregateType<T>>

    /**
     * Group by AdminAuditSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminAuditSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminAuditSettingGroupByArgs['orderBy'] }
        : { orderBy?: AdminAuditSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminAuditSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminAuditSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminAuditSetting model
   */
  readonly fields: AdminAuditSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminAuditSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminAuditSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminAuditSetting model
   */ 
  interface AdminAuditSettingFieldRefs {
    readonly id: FieldRef<"AdminAuditSetting", 'Int'>
    readonly assignmentsEnabled: FieldRef<"AdminAuditSetting", 'Boolean'>
    readonly updatedByUserId: FieldRef<"AdminAuditSetting", 'String'>
    readonly updatedByName: FieldRef<"AdminAuditSetting", 'String'>
    readonly updatedAt: FieldRef<"AdminAuditSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminAuditSetting findUnique
   */
  export type AdminAuditSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditSetting to fetch.
     */
    where: AdminAuditSettingWhereUniqueInput
  }

  /**
   * AdminAuditSetting findUniqueOrThrow
   */
  export type AdminAuditSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditSetting to fetch.
     */
    where: AdminAuditSettingWhereUniqueInput
  }

  /**
   * AdminAuditSetting findFirst
   */
  export type AdminAuditSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditSetting to fetch.
     */
    where?: AdminAuditSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAuditSettings to fetch.
     */
    orderBy?: AdminAuditSettingOrderByWithRelationInput | AdminAuditSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminAuditSettings.
     */
    cursor?: AdminAuditSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAuditSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAuditSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminAuditSettings.
     */
    distinct?: AdminAuditSettingScalarFieldEnum | AdminAuditSettingScalarFieldEnum[]
  }

  /**
   * AdminAuditSetting findFirstOrThrow
   */
  export type AdminAuditSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditSetting to fetch.
     */
    where?: AdminAuditSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAuditSettings to fetch.
     */
    orderBy?: AdminAuditSettingOrderByWithRelationInput | AdminAuditSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminAuditSettings.
     */
    cursor?: AdminAuditSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAuditSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAuditSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminAuditSettings.
     */
    distinct?: AdminAuditSettingScalarFieldEnum | AdminAuditSettingScalarFieldEnum[]
  }

  /**
   * AdminAuditSetting findMany
   */
  export type AdminAuditSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditSettings to fetch.
     */
    where?: AdminAuditSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAuditSettings to fetch.
     */
    orderBy?: AdminAuditSettingOrderByWithRelationInput | AdminAuditSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminAuditSettings.
     */
    cursor?: AdminAuditSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAuditSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAuditSettings.
     */
    skip?: number
    distinct?: AdminAuditSettingScalarFieldEnum | AdminAuditSettingScalarFieldEnum[]
  }

  /**
   * AdminAuditSetting create
   */
  export type AdminAuditSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * The data needed to create a AdminAuditSetting.
     */
    data: XOR<AdminAuditSettingCreateInput, AdminAuditSettingUncheckedCreateInput>
  }

  /**
   * AdminAuditSetting createMany
   */
  export type AdminAuditSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminAuditSettings.
     */
    data: AdminAuditSettingCreateManyInput | AdminAuditSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminAuditSetting createManyAndReturn
   */
  export type AdminAuditSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AdminAuditSettings.
     */
    data: AdminAuditSettingCreateManyInput | AdminAuditSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminAuditSetting update
   */
  export type AdminAuditSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * The data needed to update a AdminAuditSetting.
     */
    data: XOR<AdminAuditSettingUpdateInput, AdminAuditSettingUncheckedUpdateInput>
    /**
     * Choose, which AdminAuditSetting to update.
     */
    where: AdminAuditSettingWhereUniqueInput
  }

  /**
   * AdminAuditSetting updateMany
   */
  export type AdminAuditSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminAuditSettings.
     */
    data: XOR<AdminAuditSettingUpdateManyMutationInput, AdminAuditSettingUncheckedUpdateManyInput>
    /**
     * Filter which AdminAuditSettings to update
     */
    where?: AdminAuditSettingWhereInput
  }

  /**
   * AdminAuditSetting upsert
   */
  export type AdminAuditSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * The filter to search for the AdminAuditSetting to update in case it exists.
     */
    where: AdminAuditSettingWhereUniqueInput
    /**
     * In case the AdminAuditSetting found by the `where` argument doesn't exist, create a new AdminAuditSetting with this data.
     */
    create: XOR<AdminAuditSettingCreateInput, AdminAuditSettingUncheckedCreateInput>
    /**
     * In case the AdminAuditSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminAuditSettingUpdateInput, AdminAuditSettingUncheckedUpdateInput>
  }

  /**
   * AdminAuditSetting delete
   */
  export type AdminAuditSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
    /**
     * Filter which AdminAuditSetting to delete.
     */
    where: AdminAuditSettingWhereUniqueInput
  }

  /**
   * AdminAuditSetting deleteMany
   */
  export type AdminAuditSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAuditSettings to delete
     */
    where?: AdminAuditSettingWhereInput
  }

  /**
   * AdminAuditSetting without action
   */
  export type AdminAuditSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditSetting
     */
    select?: AdminAuditSettingSelect<ExtArgs> | null
  }


  /**
   * Model AdminAuditLog
   */

  export type AggregateAdminAuditLog = {
    _count: AdminAuditLogCountAggregateOutputType | null
    _min: AdminAuditLogMinAggregateOutputType | null
    _max: AdminAuditLogMaxAggregateOutputType | null
  }

  export type AdminAuditLogMinAggregateOutputType = {
    id: string | null
    actorUserId: string | null
    actorName: string | null
    action: $Enums.AuditAction | null
    module: string | null
    targetUserId: string | null
    role: $Enums.UserRole | null
    scopeType: $Enums.RoleScope | null
    companyId: string | null
    projectId: string | null
    ip: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AdminAuditLogMaxAggregateOutputType = {
    id: string | null
    actorUserId: string | null
    actorName: string | null
    action: $Enums.AuditAction | null
    module: string | null
    targetUserId: string | null
    role: $Enums.UserRole | null
    scopeType: $Enums.RoleScope | null
    companyId: string | null
    projectId: string | null
    ip: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AdminAuditLogCountAggregateOutputType = {
    id: number
    actorUserId: number
    actorName: number
    action: number
    module: number
    targetUserId: number
    role: number
    scopeType: number
    companyId: number
    projectId: number
    ip: number
    userAgent: number
    before: number
    after: number
    createdAt: number
    _all: number
  }


  export type AdminAuditLogMinAggregateInputType = {
    id?: true
    actorUserId?: true
    actorName?: true
    action?: true
    module?: true
    targetUserId?: true
    role?: true
    scopeType?: true
    companyId?: true
    projectId?: true
    ip?: true
    userAgent?: true
    createdAt?: true
  }

  export type AdminAuditLogMaxAggregateInputType = {
    id?: true
    actorUserId?: true
    actorName?: true
    action?: true
    module?: true
    targetUserId?: true
    role?: true
    scopeType?: true
    companyId?: true
    projectId?: true
    ip?: true
    userAgent?: true
    createdAt?: true
  }

  export type AdminAuditLogCountAggregateInputType = {
    id?: true
    actorUserId?: true
    actorName?: true
    action?: true
    module?: true
    targetUserId?: true
    role?: true
    scopeType?: true
    companyId?: true
    projectId?: true
    ip?: true
    userAgent?: true
    before?: true
    after?: true
    createdAt?: true
    _all?: true
  }

  export type AdminAuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAuditLog to aggregate.
     */
    where?: AdminAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAuditLogs to fetch.
     */
    orderBy?: AdminAuditLogOrderByWithRelationInput | AdminAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminAuditLogs
    **/
    _count?: true | AdminAuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminAuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminAuditLogMaxAggregateInputType
  }

  export type GetAdminAuditLogAggregateType<T extends AdminAuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminAuditLog[P]>
      : GetScalarType<T[P], AggregateAdminAuditLog[P]>
  }




  export type AdminAuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminAuditLogWhereInput
    orderBy?: AdminAuditLogOrderByWithAggregationInput | AdminAuditLogOrderByWithAggregationInput[]
    by: AdminAuditLogScalarFieldEnum[] | AdminAuditLogScalarFieldEnum
    having?: AdminAuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminAuditLogCountAggregateInputType | true
    _min?: AdminAuditLogMinAggregateInputType
    _max?: AdminAuditLogMaxAggregateInputType
  }

  export type AdminAuditLogGroupByOutputType = {
    id: string
    actorUserId: string
    actorName: string
    action: $Enums.AuditAction
    module: string
    targetUserId: string
    role: $Enums.UserRole | null
    scopeType: $Enums.RoleScope | null
    companyId: string | null
    projectId: string | null
    ip: string | null
    userAgent: string | null
    before: JsonValue | null
    after: JsonValue | null
    createdAt: Date
    _count: AdminAuditLogCountAggregateOutputType | null
    _min: AdminAuditLogMinAggregateOutputType | null
    _max: AdminAuditLogMaxAggregateOutputType | null
  }

  type GetAdminAuditLogGroupByPayload<T extends AdminAuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminAuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminAuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminAuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AdminAuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AdminAuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorUserId?: boolean
    actorName?: boolean
    action?: boolean
    module?: boolean
    targetUserId?: boolean
    role?: boolean
    scopeType?: boolean
    companyId?: boolean
    projectId?: boolean
    ip?: boolean
    userAgent?: boolean
    before?: boolean
    after?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["adminAuditLog"]>

  export type AdminAuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorUserId?: boolean
    actorName?: boolean
    action?: boolean
    module?: boolean
    targetUserId?: boolean
    role?: boolean
    scopeType?: boolean
    companyId?: boolean
    projectId?: boolean
    ip?: boolean
    userAgent?: boolean
    before?: boolean
    after?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["adminAuditLog"]>

  export type AdminAuditLogSelectScalar = {
    id?: boolean
    actorUserId?: boolean
    actorName?: boolean
    action?: boolean
    module?: boolean
    targetUserId?: boolean
    role?: boolean
    scopeType?: boolean
    companyId?: boolean
    projectId?: boolean
    ip?: boolean
    userAgent?: boolean
    before?: boolean
    after?: boolean
    createdAt?: boolean
  }


  export type $AdminAuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminAuditLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      actorUserId: string
      actorName: string
      action: $Enums.AuditAction
      module: string
      targetUserId: string
      role: $Enums.UserRole | null
      scopeType: $Enums.RoleScope | null
      companyId: string | null
      projectId: string | null
      ip: string | null
      userAgent: string | null
      /**
       * e.g. { id, role, scopeType, companyId, projectId }
       */
      before: Prisma.JsonValue | null
      after: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["adminAuditLog"]>
    composites: {}
  }

  type AdminAuditLogGetPayload<S extends boolean | null | undefined | AdminAuditLogDefaultArgs> = $Result.GetResult<Prisma.$AdminAuditLogPayload, S>

  type AdminAuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminAuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminAuditLogCountAggregateInputType | true
    }

  export interface AdminAuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminAuditLog'], meta: { name: 'AdminAuditLog' } }
    /**
     * Find zero or one AdminAuditLog that matches the filter.
     * @param {AdminAuditLogFindUniqueArgs} args - Arguments to find a AdminAuditLog
     * @example
     * // Get one AdminAuditLog
     * const adminAuditLog = await prisma.adminAuditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminAuditLogFindUniqueArgs>(args: SelectSubset<T, AdminAuditLogFindUniqueArgs<ExtArgs>>): Prisma__AdminAuditLogClient<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AdminAuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminAuditLogFindUniqueOrThrowArgs} args - Arguments to find a AdminAuditLog
     * @example
     * // Get one AdminAuditLog
     * const adminAuditLog = await prisma.adminAuditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminAuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminAuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminAuditLogClient<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AdminAuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditLogFindFirstArgs} args - Arguments to find a AdminAuditLog
     * @example
     * // Get one AdminAuditLog
     * const adminAuditLog = await prisma.adminAuditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminAuditLogFindFirstArgs>(args?: SelectSubset<T, AdminAuditLogFindFirstArgs<ExtArgs>>): Prisma__AdminAuditLogClient<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AdminAuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditLogFindFirstOrThrowArgs} args - Arguments to find a AdminAuditLog
     * @example
     * // Get one AdminAuditLog
     * const adminAuditLog = await prisma.adminAuditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminAuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminAuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminAuditLogClient<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AdminAuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminAuditLogs
     * const adminAuditLogs = await prisma.adminAuditLog.findMany()
     * 
     * // Get first 10 AdminAuditLogs
     * const adminAuditLogs = await prisma.adminAuditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminAuditLogWithIdOnly = await prisma.adminAuditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminAuditLogFindManyArgs>(args?: SelectSubset<T, AdminAuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AdminAuditLog.
     * @param {AdminAuditLogCreateArgs} args - Arguments to create a AdminAuditLog.
     * @example
     * // Create one AdminAuditLog
     * const AdminAuditLog = await prisma.adminAuditLog.create({
     *   data: {
     *     // ... data to create a AdminAuditLog
     *   }
     * })
     * 
     */
    create<T extends AdminAuditLogCreateArgs>(args: SelectSubset<T, AdminAuditLogCreateArgs<ExtArgs>>): Prisma__AdminAuditLogClient<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AdminAuditLogs.
     * @param {AdminAuditLogCreateManyArgs} args - Arguments to create many AdminAuditLogs.
     * @example
     * // Create many AdminAuditLogs
     * const adminAuditLog = await prisma.adminAuditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminAuditLogCreateManyArgs>(args?: SelectSubset<T, AdminAuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminAuditLogs and returns the data saved in the database.
     * @param {AdminAuditLogCreateManyAndReturnArgs} args - Arguments to create many AdminAuditLogs.
     * @example
     * // Create many AdminAuditLogs
     * const adminAuditLog = await prisma.adminAuditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminAuditLogs and only return the `id`
     * const adminAuditLogWithIdOnly = await prisma.adminAuditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminAuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminAuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AdminAuditLog.
     * @param {AdminAuditLogDeleteArgs} args - Arguments to delete one AdminAuditLog.
     * @example
     * // Delete one AdminAuditLog
     * const AdminAuditLog = await prisma.adminAuditLog.delete({
     *   where: {
     *     // ... filter to delete one AdminAuditLog
     *   }
     * })
     * 
     */
    delete<T extends AdminAuditLogDeleteArgs>(args: SelectSubset<T, AdminAuditLogDeleteArgs<ExtArgs>>): Prisma__AdminAuditLogClient<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AdminAuditLog.
     * @param {AdminAuditLogUpdateArgs} args - Arguments to update one AdminAuditLog.
     * @example
     * // Update one AdminAuditLog
     * const adminAuditLog = await prisma.adminAuditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminAuditLogUpdateArgs>(args: SelectSubset<T, AdminAuditLogUpdateArgs<ExtArgs>>): Prisma__AdminAuditLogClient<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AdminAuditLogs.
     * @param {AdminAuditLogDeleteManyArgs} args - Arguments to filter AdminAuditLogs to delete.
     * @example
     * // Delete a few AdminAuditLogs
     * const { count } = await prisma.adminAuditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminAuditLogDeleteManyArgs>(args?: SelectSubset<T, AdminAuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminAuditLogs
     * const adminAuditLog = await prisma.adminAuditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminAuditLogUpdateManyArgs>(args: SelectSubset<T, AdminAuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminAuditLog.
     * @param {AdminAuditLogUpsertArgs} args - Arguments to update or create a AdminAuditLog.
     * @example
     * // Update or create a AdminAuditLog
     * const adminAuditLog = await prisma.adminAuditLog.upsert({
     *   create: {
     *     // ... data to create a AdminAuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminAuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AdminAuditLogUpsertArgs>(args: SelectSubset<T, AdminAuditLogUpsertArgs<ExtArgs>>): Prisma__AdminAuditLogClient<$Result.GetResult<Prisma.$AdminAuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AdminAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditLogCountArgs} args - Arguments to filter AdminAuditLogs to count.
     * @example
     * // Count the number of AdminAuditLogs
     * const count = await prisma.adminAuditLog.count({
     *   where: {
     *     // ... the filter for the AdminAuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AdminAuditLogCountArgs>(
      args?: Subset<T, AdminAuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminAuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAuditLogAggregateArgs>(args: Subset<T, AdminAuditLogAggregateArgs>): Prisma.PrismaPromise<GetAdminAuditLogAggregateType<T>>

    /**
     * Group by AdminAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminAuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminAuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AdminAuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminAuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminAuditLog model
   */
  readonly fields: AdminAuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminAuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminAuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminAuditLog model
   */ 
  interface AdminAuditLogFieldRefs {
    readonly id: FieldRef<"AdminAuditLog", 'String'>
    readonly actorUserId: FieldRef<"AdminAuditLog", 'String'>
    readonly actorName: FieldRef<"AdminAuditLog", 'String'>
    readonly action: FieldRef<"AdminAuditLog", 'AuditAction'>
    readonly module: FieldRef<"AdminAuditLog", 'String'>
    readonly targetUserId: FieldRef<"AdminAuditLog", 'String'>
    readonly role: FieldRef<"AdminAuditLog", 'UserRole'>
    readonly scopeType: FieldRef<"AdminAuditLog", 'RoleScope'>
    readonly companyId: FieldRef<"AdminAuditLog", 'String'>
    readonly projectId: FieldRef<"AdminAuditLog", 'String'>
    readonly ip: FieldRef<"AdminAuditLog", 'String'>
    readonly userAgent: FieldRef<"AdminAuditLog", 'String'>
    readonly before: FieldRef<"AdminAuditLog", 'Json'>
    readonly after: FieldRef<"AdminAuditLog", 'Json'>
    readonly createdAt: FieldRef<"AdminAuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminAuditLog findUnique
   */
  export type AdminAuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditLog to fetch.
     */
    where: AdminAuditLogWhereUniqueInput
  }

  /**
   * AdminAuditLog findUniqueOrThrow
   */
  export type AdminAuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditLog to fetch.
     */
    where: AdminAuditLogWhereUniqueInput
  }

  /**
   * AdminAuditLog findFirst
   */
  export type AdminAuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditLog to fetch.
     */
    where?: AdminAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAuditLogs to fetch.
     */
    orderBy?: AdminAuditLogOrderByWithRelationInput | AdminAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminAuditLogs.
     */
    cursor?: AdminAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminAuditLogs.
     */
    distinct?: AdminAuditLogScalarFieldEnum | AdminAuditLogScalarFieldEnum[]
  }

  /**
   * AdminAuditLog findFirstOrThrow
   */
  export type AdminAuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditLog to fetch.
     */
    where?: AdminAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAuditLogs to fetch.
     */
    orderBy?: AdminAuditLogOrderByWithRelationInput | AdminAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminAuditLogs.
     */
    cursor?: AdminAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminAuditLogs.
     */
    distinct?: AdminAuditLogScalarFieldEnum | AdminAuditLogScalarFieldEnum[]
  }

  /**
   * AdminAuditLog findMany
   */
  export type AdminAuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AdminAuditLogs to fetch.
     */
    where?: AdminAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminAuditLogs to fetch.
     */
    orderBy?: AdminAuditLogOrderByWithRelationInput | AdminAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminAuditLogs.
     */
    cursor?: AdminAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminAuditLogs.
     */
    skip?: number
    distinct?: AdminAuditLogScalarFieldEnum | AdminAuditLogScalarFieldEnum[]
  }

  /**
   * AdminAuditLog create
   */
  export type AdminAuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * The data needed to create a AdminAuditLog.
     */
    data: XOR<AdminAuditLogCreateInput, AdminAuditLogUncheckedCreateInput>
  }

  /**
   * AdminAuditLog createMany
   */
  export type AdminAuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminAuditLogs.
     */
    data: AdminAuditLogCreateManyInput | AdminAuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminAuditLog createManyAndReturn
   */
  export type AdminAuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AdminAuditLogs.
     */
    data: AdminAuditLogCreateManyInput | AdminAuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminAuditLog update
   */
  export type AdminAuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * The data needed to update a AdminAuditLog.
     */
    data: XOR<AdminAuditLogUpdateInput, AdminAuditLogUncheckedUpdateInput>
    /**
     * Choose, which AdminAuditLog to update.
     */
    where: AdminAuditLogWhereUniqueInput
  }

  /**
   * AdminAuditLog updateMany
   */
  export type AdminAuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminAuditLogs.
     */
    data: XOR<AdminAuditLogUpdateManyMutationInput, AdminAuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminAuditLogs to update
     */
    where?: AdminAuditLogWhereInput
  }

  /**
   * AdminAuditLog upsert
   */
  export type AdminAuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * The filter to search for the AdminAuditLog to update in case it exists.
     */
    where: AdminAuditLogWhereUniqueInput
    /**
     * In case the AdminAuditLog found by the `where` argument doesn't exist, create a new AdminAuditLog with this data.
     */
    create: XOR<AdminAuditLogCreateInput, AdminAuditLogUncheckedCreateInput>
    /**
     * In case the AdminAuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminAuditLogUpdateInput, AdminAuditLogUncheckedUpdateInput>
  }

  /**
   * AdminAuditLog delete
   */
  export type AdminAuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
    /**
     * Filter which AdminAuditLog to delete.
     */
    where: AdminAuditLogWhereUniqueInput
  }

  /**
   * AdminAuditLog deleteMany
   */
  export type AdminAuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAuditLogs to delete
     */
    where?: AdminAuditLogWhereInput
  }

  /**
   * AdminAuditLog without action
   */
  export type AdminAuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAuditLog
     */
    select?: AdminAuditLogSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StateScalarFieldEnum: {
    stateId: 'stateId',
    code: 'code',
    name: 'name',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StateScalarFieldEnum = (typeof StateScalarFieldEnum)[keyof typeof StateScalarFieldEnum]


  export const DistrictScalarFieldEnum: {
    districtId: 'districtId',
    name: 'name',
    stateId: 'stateId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DistrictScalarFieldEnum = (typeof DistrictScalarFieldEnum)[keyof typeof DistrictScalarFieldEnum]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    code: 'code',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    countryCode: 'countryCode',
    phone: 'phone',
    email: 'email',
    preferredLanguage: 'preferredLanguage',
    profilePhoto: 'profilePhoto',
    stateId: 'stateId',
    districtId: 'districtId',
    cityTown: 'cityTown',
    pin: 'pin',
    operatingZone: 'operatingZone',
    address: 'address',
    isClient: 'isClient',
    isServiceProvider: 'isServiceProvider',
    userStatus: 'userStatus',
    passwordHash: 'passwordHash',
    isSuperAdmin: 'isSuperAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userRole: 'userRole'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    companyId: 'companyId',
    name: 'name',
    status: 'status',
    website: 'website',
    companyRole: 'companyRole',
    gstin: 'gstin',
    pan: 'pan',
    cin: 'cin',
    primaryContact: 'primaryContact',
    contactMobile: 'contactMobile',
    contactEmail: 'contactEmail',
    stateId: 'stateId',
    districtId: 'districtId',
    address: 'address',
    pin: 'pin',
    notes: 'notes',
    userId: 'userId',
    companyCode: 'companyCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    projectId: 'projectId',
    title: 'title',
    code: 'code',
    status: 'status',
    stage: 'stage',
    projectType: 'projectType',
    structureType: 'structureType',
    constructionType: 'constructionType',
    contractType: 'contractType',
    health: 'health',
    clientUserId: 'clientUserId',
    clientCompanyId: 'clientCompanyId',
    address: 'address',
    cityTown: 'cityTown',
    stateId: 'stateId',
    districtId: 'districtId',
    pin: 'pin',
    latitude: 'latitude',
    longitude: 'longitude',
    startDate: 'startDate',
    plannedCompletionDate: 'plannedCompletionDate',
    currency: 'currency',
    contractValue: 'contractValue',
    areaUnit: 'areaUnit',
    plotArea: 'plotArea',
    builtUpArea: 'builtUpArea',
    floors: 'floors',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const RefProjectTagScalarFieldEnum: {
    tagCode: 'tagCode',
    label: 'label'
  };

  export type RefProjectTagScalarFieldEnum = (typeof RefProjectTagScalarFieldEnum)[keyof typeof RefProjectTagScalarFieldEnum]


  export const ProjectTagScalarFieldEnum: {
    projectId: 'projectId',
    tagCode: 'tagCode'
  };

  export type ProjectTagScalarFieldEnum = (typeof ProjectTagScalarFieldEnum)[keyof typeof ProjectTagScalarFieldEnum]


  export const UserProjectScalarFieldEnum: {
    userId: 'userId',
    projectId: 'projectId',
    createdAt: 'createdAt'
  };

  export type UserProjectScalarFieldEnum = (typeof UserProjectScalarFieldEnum)[keyof typeof UserProjectScalarFieldEnum]


  export const UserCompanyScalarFieldEnum: {
    userId: 'userId',
    companyId: 'companyId',
    createdAt: 'createdAt'
  };

  export type UserCompanyScalarFieldEnum = (typeof UserCompanyScalarFieldEnum)[keyof typeof UserCompanyScalarFieldEnum]


  export const UserRoleMembershipScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    role: 'role',
    scopeType: 'scopeType',
    companyId: 'companyId',
    projectId: 'projectId',
    isDefault: 'isDefault',
    canApprove: 'canApprove',
    validFrom: 'validFrom',
    validTo: 'validTo',
    createdBy: 'createdBy',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserRoleMembershipScalarFieldEnum = (typeof UserRoleMembershipScalarFieldEnum)[keyof typeof UserRoleMembershipScalarFieldEnum]


  export const PermissionTemplateScalarFieldEnum: {
    id: 'id',
    role: 'role',
    matrix: 'matrix',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PermissionTemplateScalarFieldEnum = (typeof PermissionTemplateScalarFieldEnum)[keyof typeof PermissionTemplateScalarFieldEnum]


  export const PermissionProjectOverrideScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    role: 'role',
    matrix: 'matrix',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PermissionProjectOverrideScalarFieldEnum = (typeof PermissionProjectOverrideScalarFieldEnum)[keyof typeof PermissionProjectOverrideScalarFieldEnum]


  export const PermissionUserOverrideScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    userId: 'userId',
    matrix: 'matrix',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PermissionUserOverrideScalarFieldEnum = (typeof PermissionUserOverrideScalarFieldEnum)[keyof typeof PermissionUserOverrideScalarFieldEnum]


  export const RefChecklistScalarFieldEnum: {
    id: 'id',
    code: 'code',
    title: 'title',
    discipline: 'discipline',
    stageLabel: 'stageLabel',
    tags: 'tags',
    status: 'status',
    version: 'version',
    versionLabel: 'versionLabel',
    versionMajor: 'versionMajor',
    versionMinor: 'versionMinor',
    versionPatch: 'versionPatch',
    aiDefault: 'aiDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RefChecklistScalarFieldEnum = (typeof RefChecklistScalarFieldEnum)[keyof typeof RefChecklistScalarFieldEnum]


  export const RefChecklistItemScalarFieldEnum: {
    id: 'id',
    checklistId: 'checklistId',
    seq: 'seq',
    text: 'text',
    requirement: 'requirement',
    method: 'method',
    risk: 'risk',
    tags: 'tags',
    itemCode: 'itemCode',
    critical: 'critical',
    aiEnabled: 'aiEnabled',
    aiConfidence: 'aiConfidence',
    units: 'units',
    tolerance: 'tolerance',
    base: 'base',
    plus: 'plus',
    minus: 'minus'
  };

  export type RefChecklistItemScalarFieldEnum = (typeof RefChecklistItemScalarFieldEnum)[keyof typeof RefChecklistItemScalarFieldEnum]


  export const RefChecklistItemActivityLinkScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    activityId: 'activityId',
    label: 'label',
    tags: 'tags'
  };

  export type RefChecklistItemActivityLinkScalarFieldEnum = (typeof RefChecklistItemActivityLinkScalarFieldEnum)[keyof typeof RefChecklistItemActivityLinkScalarFieldEnum]


  export const RefChecklistItemMaterialLinkScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    materialId: 'materialId',
    name: 'name',
    category: 'category',
    properties: 'properties'
  };

  export type RefChecklistItemMaterialLinkScalarFieldEnum = (typeof RefChecklistItemMaterialLinkScalarFieldEnum)[keyof typeof RefChecklistItemMaterialLinkScalarFieldEnum]


  export const RefActivityScalarFieldEnum: {
    id: 'id',
    code: 'code',
    title: 'title',
    discipline: 'discipline',
    stageLabel: 'stageLabel',
    phase: 'phase',
    element: 'element',
    system: 'system',
    nature: 'nature',
    method: 'method',
    status: 'status',
    version: 'version',
    versionLabel: 'versionLabel',
    versionMajor: 'versionMajor',
    versionMinor: 'versionMinor',
    versionPatch: 'versionPatch',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RefActivityScalarFieldEnum = (typeof RefActivityScalarFieldEnum)[keyof typeof RefActivityScalarFieldEnum]


  export const RefMaterialScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    discipline: 'discipline',
    category: 'category',
    manufacturer: 'manufacturer',
    model: 'model',
    standards: 'standards',
    fireRating: 'fireRating',
    keyProps: 'keyProps',
    aliases: 'aliases',
    properties: 'properties',
    version: 'version',
    versionLabel: 'versionLabel',
    versionMajor: 'versionMajor',
    versionMinor: 'versionMinor',
    versionPatch: 'versionPatch',
    notes: 'notes',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RefMaterialScalarFieldEnum = (typeof RefMaterialScalarFieldEnum)[keyof typeof RefMaterialScalarFieldEnum]


  export const RefActivityMaterialScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    materialId: 'materialId',
    note: 'note'
  };

  export type RefActivityMaterialScalarFieldEnum = (typeof RefActivityMaterialScalarFieldEnum)[keyof typeof RefActivityMaterialScalarFieldEnum]


  export const AdminAuditSettingScalarFieldEnum: {
    id: 'id',
    assignmentsEnabled: 'assignmentsEnabled',
    updatedByUserId: 'updatedByUserId',
    updatedByName: 'updatedByName',
    updatedAt: 'updatedAt'
  };

  export type AdminAuditSettingScalarFieldEnum = (typeof AdminAuditSettingScalarFieldEnum)[keyof typeof AdminAuditSettingScalarFieldEnum]


  export const AdminAuditLogScalarFieldEnum: {
    id: 'id',
    actorUserId: 'actorUserId',
    actorName: 'actorName',
    action: 'action',
    module: 'module',
    targetUserId: 'targetUserId',
    role: 'role',
    scopeType: 'scopeType',
    companyId: 'companyId',
    projectId: 'projectId',
    ip: 'ip',
    userAgent: 'userAgent',
    before: 'before',
    after: 'after',
    createdAt: 'createdAt'
  };

  export type AdminAuditLogScalarFieldEnum = (typeof AdminAuditLogScalarFieldEnum)[keyof typeof AdminAuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'StateType'
   */
  export type EnumStateTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StateType'>
    


  /**
   * Reference to a field of type 'StateType[]'
   */
  export type ListEnumStateTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StateType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PreferredLanguage'
   */
  export type EnumPreferredLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PreferredLanguage'>
    


  /**
   * Reference to a field of type 'PreferredLanguage[]'
   */
  export type ListEnumPreferredLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PreferredLanguage[]'>
    


  /**
   * Reference to a field of type 'OperatingZone'
   */
  export type EnumOperatingZoneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OperatingZone'>
    


  /**
   * Reference to a field of type 'OperatingZone[]'
   */
  export type ListEnumOperatingZoneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OperatingZone[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'CompanyStatus'
   */
  export type EnumCompanyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyStatus'>
    


  /**
   * Reference to a field of type 'CompanyStatus[]'
   */
  export type ListEnumCompanyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyStatus[]'>
    


  /**
   * Reference to a field of type 'CompanyRole'
   */
  export type EnumCompanyRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyRole'>
    


  /**
   * Reference to a field of type 'CompanyRole[]'
   */
  export type ListEnumCompanyRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyRole[]'>
    


  /**
   * Reference to a field of type 'ProjectStatus'
   */
  export type EnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus'>
    


  /**
   * Reference to a field of type 'ProjectStatus[]'
   */
  export type ListEnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus[]'>
    


  /**
   * Reference to a field of type 'ProjectStage'
   */
  export type EnumProjectStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStage'>
    


  /**
   * Reference to a field of type 'ProjectStage[]'
   */
  export type ListEnumProjectStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStage[]'>
    


  /**
   * Reference to a field of type 'ProjectType'
   */
  export type EnumProjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectType'>
    


  /**
   * Reference to a field of type 'ProjectType[]'
   */
  export type ListEnumProjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectType[]'>
    


  /**
   * Reference to a field of type 'StructureType'
   */
  export type EnumStructureTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StructureType'>
    


  /**
   * Reference to a field of type 'StructureType[]'
   */
  export type ListEnumStructureTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StructureType[]'>
    


  /**
   * Reference to a field of type 'ConstructionType'
   */
  export type EnumConstructionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConstructionType'>
    


  /**
   * Reference to a field of type 'ConstructionType[]'
   */
  export type ListEnumConstructionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConstructionType[]'>
    


  /**
   * Reference to a field of type 'ContractType'
   */
  export type EnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType'>
    


  /**
   * Reference to a field of type 'ContractType[]'
   */
  export type ListEnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType[]'>
    


  /**
   * Reference to a field of type 'ProjectHealth'
   */
  export type EnumProjectHealthFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectHealth'>
    


  /**
   * Reference to a field of type 'ProjectHealth[]'
   */
  export type ListEnumProjectHealthFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectHealth[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'CurrencyCode'
   */
  export type EnumCurrencyCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyCode'>
    


  /**
   * Reference to a field of type 'CurrencyCode[]'
   */
  export type ListEnumCurrencyCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyCode[]'>
    


  /**
   * Reference to a field of type 'AreaUnit'
   */
  export type EnumAreaUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AreaUnit'>
    


  /**
   * Reference to a field of type 'AreaUnit[]'
   */
  export type ListEnumAreaUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AreaUnit[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'RoleScope'
   */
  export type EnumRoleScopeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleScope'>
    


  /**
   * Reference to a field of type 'RoleScope[]'
   */
  export type ListEnumRoleScopeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleScope[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Discipline'
   */
  export type EnumDisciplineFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Discipline'>
    


  /**
   * Reference to a field of type 'Discipline[]'
   */
  export type ListEnumDisciplineFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Discipline[]'>
    


  /**
   * Reference to a field of type 'MaterialDiscipline'
   */
  export type EnumMaterialDisciplineFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaterialDiscipline'>
    


  /**
   * Reference to a field of type 'MaterialDiscipline[]'
   */
  export type ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaterialDiscipline[]'>
    


  /**
   * Reference to a field of type 'AuditAction'
   */
  export type EnumAuditActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditAction'>
    


  /**
   * Reference to a field of type 'AuditAction[]'
   */
  export type ListEnumAuditActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditAction[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StateWhereInput = {
    AND?: StateWhereInput | StateWhereInput[]
    OR?: StateWhereInput[]
    NOT?: StateWhereInput | StateWhereInput[]
    stateId?: UuidFilter<"State"> | string
    code?: StringFilter<"State"> | string
    name?: StringFilter<"State"> | string
    type?: EnumStateTypeFilter<"State"> | $Enums.StateType
    createdAt?: DateTimeFilter<"State"> | Date | string
    updatedAt?: DateTimeFilter<"State"> | Date | string
    districts?: DistrictListRelationFilter
    users?: UserListRelationFilter
    companies?: CompanyListRelationFilter
    projects?: ProjectListRelationFilter
  }

  export type StateOrderByWithRelationInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    districts?: DistrictOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    companies?: CompanyOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type StateWhereUniqueInput = Prisma.AtLeast<{
    stateId?: string
    code?: string
    name?: string
    AND?: StateWhereInput | StateWhereInput[]
    OR?: StateWhereInput[]
    NOT?: StateWhereInput | StateWhereInput[]
    type?: EnumStateTypeFilter<"State"> | $Enums.StateType
    createdAt?: DateTimeFilter<"State"> | Date | string
    updatedAt?: DateTimeFilter<"State"> | Date | string
    districts?: DistrictListRelationFilter
    users?: UserListRelationFilter
    companies?: CompanyListRelationFilter
    projects?: ProjectListRelationFilter
  }, "stateId" | "code" | "name">

  export type StateOrderByWithAggregationInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StateCountOrderByAggregateInput
    _max?: StateMaxOrderByAggregateInput
    _min?: StateMinOrderByAggregateInput
  }

  export type StateScalarWhereWithAggregatesInput = {
    AND?: StateScalarWhereWithAggregatesInput | StateScalarWhereWithAggregatesInput[]
    OR?: StateScalarWhereWithAggregatesInput[]
    NOT?: StateScalarWhereWithAggregatesInput | StateScalarWhereWithAggregatesInput[]
    stateId?: UuidWithAggregatesFilter<"State"> | string
    code?: StringWithAggregatesFilter<"State"> | string
    name?: StringWithAggregatesFilter<"State"> | string
    type?: EnumStateTypeWithAggregatesFilter<"State"> | $Enums.StateType
    createdAt?: DateTimeWithAggregatesFilter<"State"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"State"> | Date | string
  }

  export type DistrictWhereInput = {
    AND?: DistrictWhereInput | DistrictWhereInput[]
    OR?: DistrictWhereInput[]
    NOT?: DistrictWhereInput | DistrictWhereInput[]
    districtId?: UuidFilter<"District"> | string
    name?: StringFilter<"District"> | string
    stateId?: UuidFilter<"District"> | string
    createdAt?: DateTimeFilter<"District"> | Date | string
    updatedAt?: DateTimeFilter<"District"> | Date | string
    state?: XOR<StateRelationFilter, StateWhereInput>
    users?: UserListRelationFilter
    companies?: CompanyListRelationFilter
    projects?: ProjectListRelationFilter
  }

  export type DistrictOrderByWithRelationInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: StateOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    companies?: CompanyOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type DistrictWhereUniqueInput = Prisma.AtLeast<{
    districtId?: string
    stateId_name?: DistrictStateIdNameCompoundUniqueInput
    AND?: DistrictWhereInput | DistrictWhereInput[]
    OR?: DistrictWhereInput[]
    NOT?: DistrictWhereInput | DistrictWhereInput[]
    name?: StringFilter<"District"> | string
    stateId?: UuidFilter<"District"> | string
    createdAt?: DateTimeFilter<"District"> | Date | string
    updatedAt?: DateTimeFilter<"District"> | Date | string
    state?: XOR<StateRelationFilter, StateWhereInput>
    users?: UserListRelationFilter
    companies?: CompanyListRelationFilter
    projects?: ProjectListRelationFilter
  }, "districtId" | "stateId_name">

  export type DistrictOrderByWithAggregationInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DistrictCountOrderByAggregateInput
    _max?: DistrictMaxOrderByAggregateInput
    _min?: DistrictMinOrderByAggregateInput
  }

  export type DistrictScalarWhereWithAggregatesInput = {
    AND?: DistrictScalarWhereWithAggregatesInput | DistrictScalarWhereWithAggregatesInput[]
    OR?: DistrictScalarWhereWithAggregatesInput[]
    NOT?: DistrictScalarWhereWithAggregatesInput | DistrictScalarWhereWithAggregatesInput[]
    districtId?: UuidWithAggregatesFilter<"District"> | string
    name?: StringWithAggregatesFilter<"District"> | string
    stateId?: UuidWithAggregatesFilter<"District"> | string
    createdAt?: DateTimeWithAggregatesFilter<"District"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"District"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: UuidFilter<"User"> | string
    code?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    middleName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    countryCode?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    preferredLanguage?: EnumPreferredLanguageNullableFilter<"User"> | $Enums.PreferredLanguage | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    stateId?: UuidNullableFilter<"User"> | string | null
    districtId?: UuidNullableFilter<"User"> | string | null
    cityTown?: StringNullableFilter<"User"> | string | null
    pin?: StringNullableFilter<"User"> | string | null
    operatingZone?: EnumOperatingZoneNullableFilter<"User"> | $Enums.OperatingZone | null
    address?: StringNullableFilter<"User"> | string | null
    isClient?: BoolNullableFilter<"User"> | boolean | null
    isServiceProvider?: BoolNullableFilter<"User"> | boolean | null
    userStatus?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    passwordHash?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userRole?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    projectsAsClient?: ProjectListRelationFilter
    companiesAsServiceProvider?: CompanyListRelationFilter
    userProjects?: UserProjectListRelationFilter
    userCompanies?: UserCompanyListRelationFilter
    userRoleMemberships?: UserRoleMembershipListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    code?: SortOrderInput | SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    cityTown?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    operatingZone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isClient?: SortOrderInput | SortOrder
    isServiceProvider?: SortOrderInput | SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    isSuperAdmin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrderInput | SortOrder
    state?: StateOrderByWithRelationInput
    district?: DistrictOrderByWithRelationInput
    projectsAsClient?: ProjectOrderByRelationAggregateInput
    companiesAsServiceProvider?: CompanyOrderByRelationAggregateInput
    userProjects?: UserProjectOrderByRelationAggregateInput
    userCompanies?: UserCompanyOrderByRelationAggregateInput
    userRoleMemberships?: UserRoleMembershipOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    code?: string
    email?: string
    countryCode_phone?: UserCountryCodePhoneCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    middleName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    countryCode?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    preferredLanguage?: EnumPreferredLanguageNullableFilter<"User"> | $Enums.PreferredLanguage | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    stateId?: UuidNullableFilter<"User"> | string | null
    districtId?: UuidNullableFilter<"User"> | string | null
    cityTown?: StringNullableFilter<"User"> | string | null
    pin?: StringNullableFilter<"User"> | string | null
    operatingZone?: EnumOperatingZoneNullableFilter<"User"> | $Enums.OperatingZone | null
    address?: StringNullableFilter<"User"> | string | null
    isClient?: BoolNullableFilter<"User"> | boolean | null
    isServiceProvider?: BoolNullableFilter<"User"> | boolean | null
    userStatus?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    passwordHash?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userRole?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    projectsAsClient?: ProjectListRelationFilter
    companiesAsServiceProvider?: CompanyListRelationFilter
    userProjects?: UserProjectListRelationFilter
    userCompanies?: UserCompanyListRelationFilter
    userRoleMemberships?: UserRoleMembershipListRelationFilter
  }, "userId" | "code" | "email" | "countryCode_phone">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    code?: SortOrderInput | SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    profilePhoto?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    cityTown?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    operatingZone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isClient?: SortOrderInput | SortOrder
    isServiceProvider?: SortOrderInput | SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    isSuperAdmin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"User"> | string
    code?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringWithAggregatesFilter<"User"> | string
    middleName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    countryCode?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    preferredLanguage?: EnumPreferredLanguageNullableWithAggregatesFilter<"User"> | $Enums.PreferredLanguage | null
    profilePhoto?: StringNullableWithAggregatesFilter<"User"> | string | null
    stateId?: UuidNullableWithAggregatesFilter<"User"> | string | null
    districtId?: UuidNullableWithAggregatesFilter<"User"> | string | null
    cityTown?: StringNullableWithAggregatesFilter<"User"> | string | null
    pin?: StringNullableWithAggregatesFilter<"User"> | string | null
    operatingZone?: EnumOperatingZoneNullableWithAggregatesFilter<"User"> | $Enums.OperatingZone | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    isClient?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    isServiceProvider?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    userStatus?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    isSuperAdmin?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    userRole?: EnumUserRoleNullableWithAggregatesFilter<"User"> | $Enums.UserRole | null
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    companyId?: UuidFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    status?: EnumCompanyStatusFilter<"Company"> | $Enums.CompanyStatus
    website?: StringNullableFilter<"Company"> | string | null
    companyRole?: EnumCompanyRoleNullableFilter<"Company"> | $Enums.CompanyRole | null
    gstin?: StringNullableFilter<"Company"> | string | null
    pan?: StringNullableFilter<"Company"> | string | null
    cin?: StringNullableFilter<"Company"> | string | null
    primaryContact?: StringNullableFilter<"Company"> | string | null
    contactMobile?: StringNullableFilter<"Company"> | string | null
    contactEmail?: StringNullableFilter<"Company"> | string | null
    stateId?: UuidNullableFilter<"Company"> | string | null
    districtId?: UuidNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    pin?: StringNullableFilter<"Company"> | string | null
    notes?: StringNullableFilter<"Company"> | string | null
    userId?: UuidNullableFilter<"Company"> | string | null
    companyCode?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    serviceProvider?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    projects?: ProjectListRelationFilter
    userCompanies?: UserCompanyListRelationFilter
    userRoleMemberships?: UserRoleMembershipListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrderInput | SortOrder
    companyRole?: SortOrderInput | SortOrder
    gstin?: SortOrderInput | SortOrder
    pan?: SortOrderInput | SortOrder
    cin?: SortOrderInput | SortOrder
    primaryContact?: SortOrderInput | SortOrder
    contactMobile?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    companyCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    state?: StateOrderByWithRelationInput
    district?: DistrictOrderByWithRelationInput
    serviceProvider?: UserOrderByWithRelationInput
    projects?: ProjectOrderByRelationAggregateInput
    userCompanies?: UserCompanyOrderByRelationAggregateInput
    userRoleMemberships?: UserRoleMembershipOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    companyId?: string
    gstin?: string
    pan?: string
    cin?: string
    companyCode?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    status?: EnumCompanyStatusFilter<"Company"> | $Enums.CompanyStatus
    website?: StringNullableFilter<"Company"> | string | null
    companyRole?: EnumCompanyRoleNullableFilter<"Company"> | $Enums.CompanyRole | null
    primaryContact?: StringNullableFilter<"Company"> | string | null
    contactMobile?: StringNullableFilter<"Company"> | string | null
    contactEmail?: StringNullableFilter<"Company"> | string | null
    stateId?: UuidNullableFilter<"Company"> | string | null
    districtId?: UuidNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    pin?: StringNullableFilter<"Company"> | string | null
    notes?: StringNullableFilter<"Company"> | string | null
    userId?: UuidNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    serviceProvider?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    projects?: ProjectListRelationFilter
    userCompanies?: UserCompanyListRelationFilter
    userRoleMemberships?: UserRoleMembershipListRelationFilter
  }, "companyId" | "gstin" | "pan" | "cin" | "companyCode">

  export type CompanyOrderByWithAggregationInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrderInput | SortOrder
    companyRole?: SortOrderInput | SortOrder
    gstin?: SortOrderInput | SortOrder
    pan?: SortOrderInput | SortOrder
    cin?: SortOrderInput | SortOrder
    primaryContact?: SortOrderInput | SortOrder
    contactMobile?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    companyCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    companyId?: UuidWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    status?: EnumCompanyStatusWithAggregatesFilter<"Company"> | $Enums.CompanyStatus
    website?: StringNullableWithAggregatesFilter<"Company"> | string | null
    companyRole?: EnumCompanyRoleNullableWithAggregatesFilter<"Company"> | $Enums.CompanyRole | null
    gstin?: StringNullableWithAggregatesFilter<"Company"> | string | null
    pan?: StringNullableWithAggregatesFilter<"Company"> | string | null
    cin?: StringNullableWithAggregatesFilter<"Company"> | string | null
    primaryContact?: StringNullableWithAggregatesFilter<"Company"> | string | null
    contactMobile?: StringNullableWithAggregatesFilter<"Company"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"Company"> | string | null
    stateId?: UuidNullableWithAggregatesFilter<"Company"> | string | null
    districtId?: UuidNullableWithAggregatesFilter<"Company"> | string | null
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
    pin?: StringNullableWithAggregatesFilter<"Company"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Company"> | string | null
    userId?: UuidNullableWithAggregatesFilter<"Company"> | string | null
    companyCode?: StringNullableWithAggregatesFilter<"Company"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    projectId?: UuidFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    code?: StringNullableFilter<"Project"> | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    stage?: EnumProjectStageNullableFilter<"Project"> | $Enums.ProjectStage | null
    projectType?: EnumProjectTypeNullableFilter<"Project"> | $Enums.ProjectType | null
    structureType?: EnumStructureTypeNullableFilter<"Project"> | $Enums.StructureType | null
    constructionType?: EnumConstructionTypeNullableFilter<"Project"> | $Enums.ConstructionType | null
    contractType?: EnumContractTypeNullableFilter<"Project"> | $Enums.ContractType | null
    health?: EnumProjectHealthFilter<"Project"> | $Enums.ProjectHealth
    clientUserId?: UuidNullableFilter<"Project"> | string | null
    clientCompanyId?: UuidNullableFilter<"Project"> | string | null
    address?: StringNullableFilter<"Project"> | string | null
    cityTown?: StringNullableFilter<"Project"> | string | null
    stateId?: UuidNullableFilter<"Project"> | string | null
    districtId?: UuidNullableFilter<"Project"> | string | null
    pin?: StringNullableFilter<"Project"> | string | null
    latitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    plannedCompletionDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Project"> | $Enums.CurrencyCode | null
    contractValue?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    areaUnit?: EnumAreaUnitNullableFilter<"Project"> | $Enums.AreaUnit | null
    plotArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    floors?: IntNullableFilter<"Project"> | number | null
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    clientUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    clientCompany?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    projectTags?: ProjectTagListRelationFilter
    userProjects?: UserProjectListRelationFilter
    userRoleMemberships?: UserRoleMembershipListRelationFilter
    PermissionProjectOverride?: PermissionProjectOverrideListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrderInput | SortOrder
    status?: SortOrder
    stage?: SortOrderInput | SortOrder
    projectType?: SortOrderInput | SortOrder
    structureType?: SortOrderInput | SortOrder
    constructionType?: SortOrderInput | SortOrder
    contractType?: SortOrderInput | SortOrder
    health?: SortOrder
    clientUserId?: SortOrderInput | SortOrder
    clientCompanyId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    cityTown?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    plannedCompletionDate?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    contractValue?: SortOrderInput | SortOrder
    areaUnit?: SortOrderInput | SortOrder
    plotArea?: SortOrderInput | SortOrder
    builtUpArea?: SortOrderInput | SortOrder
    floors?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientUser?: UserOrderByWithRelationInput
    clientCompany?: CompanyOrderByWithRelationInput
    state?: StateOrderByWithRelationInput
    district?: DistrictOrderByWithRelationInput
    projectTags?: ProjectTagOrderByRelationAggregateInput
    userProjects?: UserProjectOrderByRelationAggregateInput
    userRoleMemberships?: UserRoleMembershipOrderByRelationAggregateInput
    PermissionProjectOverride?: PermissionProjectOverrideOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    projectId?: string
    code?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    title?: StringFilter<"Project"> | string
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    stage?: EnumProjectStageNullableFilter<"Project"> | $Enums.ProjectStage | null
    projectType?: EnumProjectTypeNullableFilter<"Project"> | $Enums.ProjectType | null
    structureType?: EnumStructureTypeNullableFilter<"Project"> | $Enums.StructureType | null
    constructionType?: EnumConstructionTypeNullableFilter<"Project"> | $Enums.ConstructionType | null
    contractType?: EnumContractTypeNullableFilter<"Project"> | $Enums.ContractType | null
    health?: EnumProjectHealthFilter<"Project"> | $Enums.ProjectHealth
    clientUserId?: UuidNullableFilter<"Project"> | string | null
    clientCompanyId?: UuidNullableFilter<"Project"> | string | null
    address?: StringNullableFilter<"Project"> | string | null
    cityTown?: StringNullableFilter<"Project"> | string | null
    stateId?: UuidNullableFilter<"Project"> | string | null
    districtId?: UuidNullableFilter<"Project"> | string | null
    pin?: StringNullableFilter<"Project"> | string | null
    latitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    plannedCompletionDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Project"> | $Enums.CurrencyCode | null
    contractValue?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    areaUnit?: EnumAreaUnitNullableFilter<"Project"> | $Enums.AreaUnit | null
    plotArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    floors?: IntNullableFilter<"Project"> | number | null
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    clientUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    clientCompany?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    state?: XOR<StateNullableRelationFilter, StateWhereInput> | null
    district?: XOR<DistrictNullableRelationFilter, DistrictWhereInput> | null
    projectTags?: ProjectTagListRelationFilter
    userProjects?: UserProjectListRelationFilter
    userRoleMemberships?: UserRoleMembershipListRelationFilter
    PermissionProjectOverride?: PermissionProjectOverrideListRelationFilter
  }, "projectId" | "code">

  export type ProjectOrderByWithAggregationInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrderInput | SortOrder
    status?: SortOrder
    stage?: SortOrderInput | SortOrder
    projectType?: SortOrderInput | SortOrder
    structureType?: SortOrderInput | SortOrder
    constructionType?: SortOrderInput | SortOrder
    contractType?: SortOrderInput | SortOrder
    health?: SortOrder
    clientUserId?: SortOrderInput | SortOrder
    clientCompanyId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    cityTown?: SortOrderInput | SortOrder
    stateId?: SortOrderInput | SortOrder
    districtId?: SortOrderInput | SortOrder
    pin?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    plannedCompletionDate?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    contractValue?: SortOrderInput | SortOrder
    areaUnit?: SortOrderInput | SortOrder
    plotArea?: SortOrderInput | SortOrder
    builtUpArea?: SortOrderInput | SortOrder
    floors?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    projectId?: UuidWithAggregatesFilter<"Project"> | string
    title?: StringWithAggregatesFilter<"Project"> | string
    code?: StringNullableWithAggregatesFilter<"Project"> | string | null
    status?: EnumProjectStatusWithAggregatesFilter<"Project"> | $Enums.ProjectStatus
    stage?: EnumProjectStageNullableWithAggregatesFilter<"Project"> | $Enums.ProjectStage | null
    projectType?: EnumProjectTypeNullableWithAggregatesFilter<"Project"> | $Enums.ProjectType | null
    structureType?: EnumStructureTypeNullableWithAggregatesFilter<"Project"> | $Enums.StructureType | null
    constructionType?: EnumConstructionTypeNullableWithAggregatesFilter<"Project"> | $Enums.ConstructionType | null
    contractType?: EnumContractTypeNullableWithAggregatesFilter<"Project"> | $Enums.ContractType | null
    health?: EnumProjectHealthWithAggregatesFilter<"Project"> | $Enums.ProjectHealth
    clientUserId?: UuidNullableWithAggregatesFilter<"Project"> | string | null
    clientCompanyId?: UuidNullableWithAggregatesFilter<"Project"> | string | null
    address?: StringNullableWithAggregatesFilter<"Project"> | string | null
    cityTown?: StringNullableWithAggregatesFilter<"Project"> | string | null
    stateId?: UuidNullableWithAggregatesFilter<"Project"> | string | null
    districtId?: UuidNullableWithAggregatesFilter<"Project"> | string | null
    pin?: StringNullableWithAggregatesFilter<"Project"> | string | null
    latitude?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    plannedCompletionDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    currency?: EnumCurrencyCodeNullableWithAggregatesFilter<"Project"> | $Enums.CurrencyCode | null
    contractValue?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    areaUnit?: EnumAreaUnitNullableWithAggregatesFilter<"Project"> | $Enums.AreaUnit | null
    plotArea?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    floors?: IntNullableWithAggregatesFilter<"Project"> | number | null
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type RefProjectTagWhereInput = {
    AND?: RefProjectTagWhereInput | RefProjectTagWhereInput[]
    OR?: RefProjectTagWhereInput[]
    NOT?: RefProjectTagWhereInput | RefProjectTagWhereInput[]
    tagCode?: StringFilter<"RefProjectTag"> | string
    label?: StringFilter<"RefProjectTag"> | string
    tags?: ProjectTagListRelationFilter
  }

  export type RefProjectTagOrderByWithRelationInput = {
    tagCode?: SortOrder
    label?: SortOrder
    tags?: ProjectTagOrderByRelationAggregateInput
  }

  export type RefProjectTagWhereUniqueInput = Prisma.AtLeast<{
    tagCode?: string
    AND?: RefProjectTagWhereInput | RefProjectTagWhereInput[]
    OR?: RefProjectTagWhereInput[]
    NOT?: RefProjectTagWhereInput | RefProjectTagWhereInput[]
    label?: StringFilter<"RefProjectTag"> | string
    tags?: ProjectTagListRelationFilter
  }, "tagCode">

  export type RefProjectTagOrderByWithAggregationInput = {
    tagCode?: SortOrder
    label?: SortOrder
    _count?: RefProjectTagCountOrderByAggregateInput
    _max?: RefProjectTagMaxOrderByAggregateInput
    _min?: RefProjectTagMinOrderByAggregateInput
  }

  export type RefProjectTagScalarWhereWithAggregatesInput = {
    AND?: RefProjectTagScalarWhereWithAggregatesInput | RefProjectTagScalarWhereWithAggregatesInput[]
    OR?: RefProjectTagScalarWhereWithAggregatesInput[]
    NOT?: RefProjectTagScalarWhereWithAggregatesInput | RefProjectTagScalarWhereWithAggregatesInput[]
    tagCode?: StringWithAggregatesFilter<"RefProjectTag"> | string
    label?: StringWithAggregatesFilter<"RefProjectTag"> | string
  }

  export type ProjectTagWhereInput = {
    AND?: ProjectTagWhereInput | ProjectTagWhereInput[]
    OR?: ProjectTagWhereInput[]
    NOT?: ProjectTagWhereInput | ProjectTagWhereInput[]
    projectId?: UuidFilter<"ProjectTag"> | string
    tagCode?: StringFilter<"ProjectTag"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    tag?: XOR<RefProjectTagRelationFilter, RefProjectTagWhereInput>
  }

  export type ProjectTagOrderByWithRelationInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
    project?: ProjectOrderByWithRelationInput
    tag?: RefProjectTagOrderByWithRelationInput
  }

  export type ProjectTagWhereUniqueInput = Prisma.AtLeast<{
    projectId_tagCode?: ProjectTagProjectIdTagCodeCompoundUniqueInput
    AND?: ProjectTagWhereInput | ProjectTagWhereInput[]
    OR?: ProjectTagWhereInput[]
    NOT?: ProjectTagWhereInput | ProjectTagWhereInput[]
    projectId?: UuidFilter<"ProjectTag"> | string
    tagCode?: StringFilter<"ProjectTag"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    tag?: XOR<RefProjectTagRelationFilter, RefProjectTagWhereInput>
  }, "projectId_tagCode">

  export type ProjectTagOrderByWithAggregationInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
    _count?: ProjectTagCountOrderByAggregateInput
    _max?: ProjectTagMaxOrderByAggregateInput
    _min?: ProjectTagMinOrderByAggregateInput
  }

  export type ProjectTagScalarWhereWithAggregatesInput = {
    AND?: ProjectTagScalarWhereWithAggregatesInput | ProjectTagScalarWhereWithAggregatesInput[]
    OR?: ProjectTagScalarWhereWithAggregatesInput[]
    NOT?: ProjectTagScalarWhereWithAggregatesInput | ProjectTagScalarWhereWithAggregatesInput[]
    projectId?: UuidWithAggregatesFilter<"ProjectTag"> | string
    tagCode?: StringWithAggregatesFilter<"ProjectTag"> | string
  }

  export type UserProjectWhereInput = {
    AND?: UserProjectWhereInput | UserProjectWhereInput[]
    OR?: UserProjectWhereInput[]
    NOT?: UserProjectWhereInput | UserProjectWhereInput[]
    userId?: UuidFilter<"UserProject"> | string
    projectId?: UuidFilter<"UserProject"> | string
    createdAt?: DateTimeFilter<"UserProject"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type UserProjectOrderByWithRelationInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type UserProjectWhereUniqueInput = Prisma.AtLeast<{
    userId_projectId?: UserProjectUserIdProjectIdCompoundUniqueInput
    AND?: UserProjectWhereInput | UserProjectWhereInput[]
    OR?: UserProjectWhereInput[]
    NOT?: UserProjectWhereInput | UserProjectWhereInput[]
    userId?: UuidFilter<"UserProject"> | string
    projectId?: UuidFilter<"UserProject"> | string
    createdAt?: DateTimeFilter<"UserProject"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "userId_projectId">

  export type UserProjectOrderByWithAggregationInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    _count?: UserProjectCountOrderByAggregateInput
    _max?: UserProjectMaxOrderByAggregateInput
    _min?: UserProjectMinOrderByAggregateInput
  }

  export type UserProjectScalarWhereWithAggregatesInput = {
    AND?: UserProjectScalarWhereWithAggregatesInput | UserProjectScalarWhereWithAggregatesInput[]
    OR?: UserProjectScalarWhereWithAggregatesInput[]
    NOT?: UserProjectScalarWhereWithAggregatesInput | UserProjectScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"UserProject"> | string
    projectId?: UuidWithAggregatesFilter<"UserProject"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserProject"> | Date | string
  }

  export type UserCompanyWhereInput = {
    AND?: UserCompanyWhereInput | UserCompanyWhereInput[]
    OR?: UserCompanyWhereInput[]
    NOT?: UserCompanyWhereInput | UserCompanyWhereInput[]
    userId?: UuidFilter<"UserCompany"> | string
    companyId?: UuidFilter<"UserCompany"> | string
    createdAt?: DateTimeFilter<"UserCompany"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type UserCompanyOrderByWithRelationInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
  }

  export type UserCompanyWhereUniqueInput = Prisma.AtLeast<{
    userId_companyId?: UserCompanyUserIdCompanyIdCompoundUniqueInput
    AND?: UserCompanyWhereInput | UserCompanyWhereInput[]
    OR?: UserCompanyWhereInput[]
    NOT?: UserCompanyWhereInput | UserCompanyWhereInput[]
    userId?: UuidFilter<"UserCompany"> | string
    companyId?: UuidFilter<"UserCompany"> | string
    createdAt?: DateTimeFilter<"UserCompany"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "userId_companyId">

  export type UserCompanyOrderByWithAggregationInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    _count?: UserCompanyCountOrderByAggregateInput
    _max?: UserCompanyMaxOrderByAggregateInput
    _min?: UserCompanyMinOrderByAggregateInput
  }

  export type UserCompanyScalarWhereWithAggregatesInput = {
    AND?: UserCompanyScalarWhereWithAggregatesInput | UserCompanyScalarWhereWithAggregatesInput[]
    OR?: UserCompanyScalarWhereWithAggregatesInput[]
    NOT?: UserCompanyScalarWhereWithAggregatesInput | UserCompanyScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"UserCompany"> | string
    companyId?: UuidWithAggregatesFilter<"UserCompany"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserCompany"> | Date | string
  }

  export type UserRoleMembershipWhereInput = {
    AND?: UserRoleMembershipWhereInput | UserRoleMembershipWhereInput[]
    OR?: UserRoleMembershipWhereInput[]
    NOT?: UserRoleMembershipWhereInput | UserRoleMembershipWhereInput[]
    id?: UuidFilter<"UserRoleMembership"> | string
    userId?: UuidFilter<"UserRoleMembership"> | string
    role?: EnumUserRoleFilter<"UserRoleMembership"> | $Enums.UserRole
    scopeType?: EnumRoleScopeFilter<"UserRoleMembership"> | $Enums.RoleScope
    companyId?: UuidNullableFilter<"UserRoleMembership"> | string | null
    projectId?: UuidNullableFilter<"UserRoleMembership"> | string | null
    isDefault?: BoolFilter<"UserRoleMembership"> | boolean
    canApprove?: BoolFilter<"UserRoleMembership"> | boolean
    validFrom?: DateTimeNullableFilter<"UserRoleMembership"> | Date | string | null
    validTo?: DateTimeNullableFilter<"UserRoleMembership"> | Date | string | null
    createdBy?: UuidNullableFilter<"UserRoleMembership"> | string | null
    notes?: StringNullableFilter<"UserRoleMembership"> | string | null
    createdAt?: DateTimeFilter<"UserRoleMembership"> | Date | string
    updatedAt?: DateTimeFilter<"UserRoleMembership"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }

  export type UserRoleMembershipOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    scopeType?: SortOrder
    companyId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    canApprove?: SortOrder
    validFrom?: SortOrderInput | SortOrder
    validTo?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type UserRoleMembershipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_projectId_role_validFrom_validTo?: UserRoleMembershipUserIdProjectIdRoleValidFromValidToCompoundUniqueInput
    AND?: UserRoleMembershipWhereInput | UserRoleMembershipWhereInput[]
    OR?: UserRoleMembershipWhereInput[]
    NOT?: UserRoleMembershipWhereInput | UserRoleMembershipWhereInput[]
    userId?: UuidFilter<"UserRoleMembership"> | string
    role?: EnumUserRoleFilter<"UserRoleMembership"> | $Enums.UserRole
    scopeType?: EnumRoleScopeFilter<"UserRoleMembership"> | $Enums.RoleScope
    companyId?: UuidNullableFilter<"UserRoleMembership"> | string | null
    projectId?: UuidNullableFilter<"UserRoleMembership"> | string | null
    isDefault?: BoolFilter<"UserRoleMembership"> | boolean
    canApprove?: BoolFilter<"UserRoleMembership"> | boolean
    validFrom?: DateTimeNullableFilter<"UserRoleMembership"> | Date | string | null
    validTo?: DateTimeNullableFilter<"UserRoleMembership"> | Date | string | null
    createdBy?: UuidNullableFilter<"UserRoleMembership"> | string | null
    notes?: StringNullableFilter<"UserRoleMembership"> | string | null
    createdAt?: DateTimeFilter<"UserRoleMembership"> | Date | string
    updatedAt?: DateTimeFilter<"UserRoleMembership"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }, "id" | "userId_projectId_role_validFrom_validTo">

  export type UserRoleMembershipOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    scopeType?: SortOrder
    companyId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    canApprove?: SortOrder
    validFrom?: SortOrderInput | SortOrder
    validTo?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserRoleMembershipCountOrderByAggregateInput
    _max?: UserRoleMembershipMaxOrderByAggregateInput
    _min?: UserRoleMembershipMinOrderByAggregateInput
  }

  export type UserRoleMembershipScalarWhereWithAggregatesInput = {
    AND?: UserRoleMembershipScalarWhereWithAggregatesInput | UserRoleMembershipScalarWhereWithAggregatesInput[]
    OR?: UserRoleMembershipScalarWhereWithAggregatesInput[]
    NOT?: UserRoleMembershipScalarWhereWithAggregatesInput | UserRoleMembershipScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"UserRoleMembership"> | string
    userId?: UuidWithAggregatesFilter<"UserRoleMembership"> | string
    role?: EnumUserRoleWithAggregatesFilter<"UserRoleMembership"> | $Enums.UserRole
    scopeType?: EnumRoleScopeWithAggregatesFilter<"UserRoleMembership"> | $Enums.RoleScope
    companyId?: UuidNullableWithAggregatesFilter<"UserRoleMembership"> | string | null
    projectId?: UuidNullableWithAggregatesFilter<"UserRoleMembership"> | string | null
    isDefault?: BoolWithAggregatesFilter<"UserRoleMembership"> | boolean
    canApprove?: BoolWithAggregatesFilter<"UserRoleMembership"> | boolean
    validFrom?: DateTimeNullableWithAggregatesFilter<"UserRoleMembership"> | Date | string | null
    validTo?: DateTimeNullableWithAggregatesFilter<"UserRoleMembership"> | Date | string | null
    createdBy?: UuidNullableWithAggregatesFilter<"UserRoleMembership"> | string | null
    notes?: StringNullableWithAggregatesFilter<"UserRoleMembership"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserRoleMembership"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserRoleMembership"> | Date | string
  }

  export type PermissionTemplateWhereInput = {
    AND?: PermissionTemplateWhereInput | PermissionTemplateWhereInput[]
    OR?: PermissionTemplateWhereInput[]
    NOT?: PermissionTemplateWhereInput | PermissionTemplateWhereInput[]
    id?: UuidFilter<"PermissionTemplate"> | string
    role?: EnumUserRoleFilter<"PermissionTemplate"> | $Enums.UserRole
    matrix?: JsonFilter<"PermissionTemplate">
    createdAt?: DateTimeFilter<"PermissionTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"PermissionTemplate"> | Date | string
  }

  export type PermissionTemplateOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    role?: $Enums.UserRole
    AND?: PermissionTemplateWhereInput | PermissionTemplateWhereInput[]
    OR?: PermissionTemplateWhereInput[]
    NOT?: PermissionTemplateWhereInput | PermissionTemplateWhereInput[]
    matrix?: JsonFilter<"PermissionTemplate">
    createdAt?: DateTimeFilter<"PermissionTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"PermissionTemplate"> | Date | string
  }, "id" | "role">

  export type PermissionTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PermissionTemplateCountOrderByAggregateInput
    _max?: PermissionTemplateMaxOrderByAggregateInput
    _min?: PermissionTemplateMinOrderByAggregateInput
  }

  export type PermissionTemplateScalarWhereWithAggregatesInput = {
    AND?: PermissionTemplateScalarWhereWithAggregatesInput | PermissionTemplateScalarWhereWithAggregatesInput[]
    OR?: PermissionTemplateScalarWhereWithAggregatesInput[]
    NOT?: PermissionTemplateScalarWhereWithAggregatesInput | PermissionTemplateScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PermissionTemplate"> | string
    role?: EnumUserRoleWithAggregatesFilter<"PermissionTemplate"> | $Enums.UserRole
    matrix?: JsonWithAggregatesFilter<"PermissionTemplate">
    createdAt?: DateTimeWithAggregatesFilter<"PermissionTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PermissionTemplate"> | Date | string
  }

  export type PermissionProjectOverrideWhereInput = {
    AND?: PermissionProjectOverrideWhereInput | PermissionProjectOverrideWhereInput[]
    OR?: PermissionProjectOverrideWhereInput[]
    NOT?: PermissionProjectOverrideWhereInput | PermissionProjectOverrideWhereInput[]
    id?: UuidFilter<"PermissionProjectOverride"> | string
    projectId?: UuidFilter<"PermissionProjectOverride"> | string
    role?: EnumUserRoleFilter<"PermissionProjectOverride"> | $Enums.UserRole
    matrix?: JsonFilter<"PermissionProjectOverride">
    createdAt?: DateTimeFilter<"PermissionProjectOverride"> | Date | string
    updatedAt?: DateTimeFilter<"PermissionProjectOverride"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type PermissionProjectOverrideOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type PermissionProjectOverrideWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_role?: PermissionProjectOverrideProjectIdRoleCompoundUniqueInput
    AND?: PermissionProjectOverrideWhereInput | PermissionProjectOverrideWhereInput[]
    OR?: PermissionProjectOverrideWhereInput[]
    NOT?: PermissionProjectOverrideWhereInput | PermissionProjectOverrideWhereInput[]
    projectId?: UuidFilter<"PermissionProjectOverride"> | string
    role?: EnumUserRoleFilter<"PermissionProjectOverride"> | $Enums.UserRole
    matrix?: JsonFilter<"PermissionProjectOverride">
    createdAt?: DateTimeFilter<"PermissionProjectOverride"> | Date | string
    updatedAt?: DateTimeFilter<"PermissionProjectOverride"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id" | "projectId_role">

  export type PermissionProjectOverrideOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PermissionProjectOverrideCountOrderByAggregateInput
    _max?: PermissionProjectOverrideMaxOrderByAggregateInput
    _min?: PermissionProjectOverrideMinOrderByAggregateInput
  }

  export type PermissionProjectOverrideScalarWhereWithAggregatesInput = {
    AND?: PermissionProjectOverrideScalarWhereWithAggregatesInput | PermissionProjectOverrideScalarWhereWithAggregatesInput[]
    OR?: PermissionProjectOverrideScalarWhereWithAggregatesInput[]
    NOT?: PermissionProjectOverrideScalarWhereWithAggregatesInput | PermissionProjectOverrideScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PermissionProjectOverride"> | string
    projectId?: UuidWithAggregatesFilter<"PermissionProjectOverride"> | string
    role?: EnumUserRoleWithAggregatesFilter<"PermissionProjectOverride"> | $Enums.UserRole
    matrix?: JsonWithAggregatesFilter<"PermissionProjectOverride">
    createdAt?: DateTimeWithAggregatesFilter<"PermissionProjectOverride"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PermissionProjectOverride"> | Date | string
  }

  export type PermissionUserOverrideWhereInput = {
    AND?: PermissionUserOverrideWhereInput | PermissionUserOverrideWhereInput[]
    OR?: PermissionUserOverrideWhereInput[]
    NOT?: PermissionUserOverrideWhereInput | PermissionUserOverrideWhereInput[]
    id?: UuidFilter<"PermissionUserOverride"> | string
    projectId?: StringFilter<"PermissionUserOverride"> | string
    userId?: StringFilter<"PermissionUserOverride"> | string
    matrix?: JsonFilter<"PermissionUserOverride">
    createdAt?: DateTimeFilter<"PermissionUserOverride"> | Date | string
    updatedAt?: DateTimeFilter<"PermissionUserOverride"> | Date | string
  }

  export type PermissionUserOverrideOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionUserOverrideWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_userId?: PermissionUserOverrideProjectIdUserIdCompoundUniqueInput
    AND?: PermissionUserOverrideWhereInput | PermissionUserOverrideWhereInput[]
    OR?: PermissionUserOverrideWhereInput[]
    NOT?: PermissionUserOverrideWhereInput | PermissionUserOverrideWhereInput[]
    projectId?: StringFilter<"PermissionUserOverride"> | string
    userId?: StringFilter<"PermissionUserOverride"> | string
    matrix?: JsonFilter<"PermissionUserOverride">
    createdAt?: DateTimeFilter<"PermissionUserOverride"> | Date | string
    updatedAt?: DateTimeFilter<"PermissionUserOverride"> | Date | string
  }, "id" | "projectId_userId">

  export type PermissionUserOverrideOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PermissionUserOverrideCountOrderByAggregateInput
    _max?: PermissionUserOverrideMaxOrderByAggregateInput
    _min?: PermissionUserOverrideMinOrderByAggregateInput
  }

  export type PermissionUserOverrideScalarWhereWithAggregatesInput = {
    AND?: PermissionUserOverrideScalarWhereWithAggregatesInput | PermissionUserOverrideScalarWhereWithAggregatesInput[]
    OR?: PermissionUserOverrideScalarWhereWithAggregatesInput[]
    NOT?: PermissionUserOverrideScalarWhereWithAggregatesInput | PermissionUserOverrideScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PermissionUserOverride"> | string
    projectId?: StringWithAggregatesFilter<"PermissionUserOverride"> | string
    userId?: StringWithAggregatesFilter<"PermissionUserOverride"> | string
    matrix?: JsonWithAggregatesFilter<"PermissionUserOverride">
    createdAt?: DateTimeWithAggregatesFilter<"PermissionUserOverride"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PermissionUserOverride"> | Date | string
  }

  export type RefChecklistWhereInput = {
    AND?: RefChecklistWhereInput | RefChecklistWhereInput[]
    OR?: RefChecklistWhereInput[]
    NOT?: RefChecklistWhereInput | RefChecklistWhereInput[]
    id?: UuidFilter<"RefChecklist"> | string
    code?: StringNullableFilter<"RefChecklist"> | string | null
    title?: StringFilter<"RefChecklist"> | string
    discipline?: EnumDisciplineFilter<"RefChecklist"> | $Enums.Discipline
    stageLabel?: StringNullableFilter<"RefChecklist"> | string | null
    tags?: StringNullableListFilter<"RefChecklist">
    status?: StringFilter<"RefChecklist"> | string
    version?: IntFilter<"RefChecklist"> | number
    versionLabel?: StringNullableFilter<"RefChecklist"> | string | null
    versionMajor?: IntFilter<"RefChecklist"> | number
    versionMinor?: IntFilter<"RefChecklist"> | number
    versionPatch?: IntFilter<"RefChecklist"> | number
    aiDefault?: BoolFilter<"RefChecklist"> | boolean
    createdAt?: DateTimeFilter<"RefChecklist"> | Date | string
    updatedAt?: DateTimeFilter<"RefChecklist"> | Date | string
    items?: RefChecklistItemListRelationFilter
  }

  export type RefChecklistOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrderInput | SortOrder
    tags?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrderInput | SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    aiDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: RefChecklistItemOrderByRelationAggregateInput
  }

  export type RefChecklistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: RefChecklistWhereInput | RefChecklistWhereInput[]
    OR?: RefChecklistWhereInput[]
    NOT?: RefChecklistWhereInput | RefChecklistWhereInput[]
    title?: StringFilter<"RefChecklist"> | string
    discipline?: EnumDisciplineFilter<"RefChecklist"> | $Enums.Discipline
    stageLabel?: StringNullableFilter<"RefChecklist"> | string | null
    tags?: StringNullableListFilter<"RefChecklist">
    status?: StringFilter<"RefChecklist"> | string
    version?: IntFilter<"RefChecklist"> | number
    versionLabel?: StringNullableFilter<"RefChecklist"> | string | null
    versionMajor?: IntFilter<"RefChecklist"> | number
    versionMinor?: IntFilter<"RefChecklist"> | number
    versionPatch?: IntFilter<"RefChecklist"> | number
    aiDefault?: BoolFilter<"RefChecklist"> | boolean
    createdAt?: DateTimeFilter<"RefChecklist"> | Date | string
    updatedAt?: DateTimeFilter<"RefChecklist"> | Date | string
    items?: RefChecklistItemListRelationFilter
  }, "id" | "code">

  export type RefChecklistOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrderInput | SortOrder
    tags?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrderInput | SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    aiDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RefChecklistCountOrderByAggregateInput
    _avg?: RefChecklistAvgOrderByAggregateInput
    _max?: RefChecklistMaxOrderByAggregateInput
    _min?: RefChecklistMinOrderByAggregateInput
    _sum?: RefChecklistSumOrderByAggregateInput
  }

  export type RefChecklistScalarWhereWithAggregatesInput = {
    AND?: RefChecklistScalarWhereWithAggregatesInput | RefChecklistScalarWhereWithAggregatesInput[]
    OR?: RefChecklistScalarWhereWithAggregatesInput[]
    NOT?: RefChecklistScalarWhereWithAggregatesInput | RefChecklistScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RefChecklist"> | string
    code?: StringNullableWithAggregatesFilter<"RefChecklist"> | string | null
    title?: StringWithAggregatesFilter<"RefChecklist"> | string
    discipline?: EnumDisciplineWithAggregatesFilter<"RefChecklist"> | $Enums.Discipline
    stageLabel?: StringNullableWithAggregatesFilter<"RefChecklist"> | string | null
    tags?: StringNullableListFilter<"RefChecklist">
    status?: StringWithAggregatesFilter<"RefChecklist"> | string
    version?: IntWithAggregatesFilter<"RefChecklist"> | number
    versionLabel?: StringNullableWithAggregatesFilter<"RefChecklist"> | string | null
    versionMajor?: IntWithAggregatesFilter<"RefChecklist"> | number
    versionMinor?: IntWithAggregatesFilter<"RefChecklist"> | number
    versionPatch?: IntWithAggregatesFilter<"RefChecklist"> | number
    aiDefault?: BoolWithAggregatesFilter<"RefChecklist"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"RefChecklist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RefChecklist"> | Date | string
  }

  export type RefChecklistItemWhereInput = {
    AND?: RefChecklistItemWhereInput | RefChecklistItemWhereInput[]
    OR?: RefChecklistItemWhereInput[]
    NOT?: RefChecklistItemWhereInput | RefChecklistItemWhereInput[]
    id?: UuidFilter<"RefChecklistItem"> | string
    checklistId?: UuidFilter<"RefChecklistItem"> | string
    seq?: IntFilter<"RefChecklistItem"> | number
    text?: StringFilter<"RefChecklistItem"> | string
    requirement?: StringNullableFilter<"RefChecklistItem"> | string | null
    method?: StringNullableListFilter<"RefChecklistItem">
    risk?: StringNullableFilter<"RefChecklistItem"> | string | null
    tags?: StringNullableListFilter<"RefChecklistItem">
    itemCode?: StringNullableFilter<"RefChecklistItem"> | string | null
    critical?: BoolNullableFilter<"RefChecklistItem"> | boolean | null
    aiEnabled?: BoolNullableFilter<"RefChecklistItem"> | boolean | null
    aiConfidence?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    units?: StringNullableFilter<"RefChecklistItem"> | string | null
    tolerance?: StringNullableFilter<"RefChecklistItem"> | string | null
    base?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    plus?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    minus?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    checklist?: XOR<RefChecklistRelationFilter, RefChecklistWhereInput>
    suggestedActivities?: RefChecklistItemActivityLinkListRelationFilter
    suggestedMaterials?: RefChecklistItemMaterialLinkListRelationFilter
  }

  export type RefChecklistItemOrderByWithRelationInput = {
    id?: SortOrder
    checklistId?: SortOrder
    seq?: SortOrder
    text?: SortOrder
    requirement?: SortOrderInput | SortOrder
    method?: SortOrder
    risk?: SortOrderInput | SortOrder
    tags?: SortOrder
    itemCode?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    aiEnabled?: SortOrderInput | SortOrder
    aiConfidence?: SortOrderInput | SortOrder
    units?: SortOrderInput | SortOrder
    tolerance?: SortOrderInput | SortOrder
    base?: SortOrderInput | SortOrder
    plus?: SortOrderInput | SortOrder
    minus?: SortOrderInput | SortOrder
    checklist?: RefChecklistOrderByWithRelationInput
    suggestedActivities?: RefChecklistItemActivityLinkOrderByRelationAggregateInput
    suggestedMaterials?: RefChecklistItemMaterialLinkOrderByRelationAggregateInput
  }

  export type RefChecklistItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RefChecklistItemWhereInput | RefChecklistItemWhereInput[]
    OR?: RefChecklistItemWhereInput[]
    NOT?: RefChecklistItemWhereInput | RefChecklistItemWhereInput[]
    checklistId?: UuidFilter<"RefChecklistItem"> | string
    seq?: IntFilter<"RefChecklistItem"> | number
    text?: StringFilter<"RefChecklistItem"> | string
    requirement?: StringNullableFilter<"RefChecklistItem"> | string | null
    method?: StringNullableListFilter<"RefChecklistItem">
    risk?: StringNullableFilter<"RefChecklistItem"> | string | null
    tags?: StringNullableListFilter<"RefChecklistItem">
    itemCode?: StringNullableFilter<"RefChecklistItem"> | string | null
    critical?: BoolNullableFilter<"RefChecklistItem"> | boolean | null
    aiEnabled?: BoolNullableFilter<"RefChecklistItem"> | boolean | null
    aiConfidence?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    units?: StringNullableFilter<"RefChecklistItem"> | string | null
    tolerance?: StringNullableFilter<"RefChecklistItem"> | string | null
    base?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    plus?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    minus?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    checklist?: XOR<RefChecklistRelationFilter, RefChecklistWhereInput>
    suggestedActivities?: RefChecklistItemActivityLinkListRelationFilter
    suggestedMaterials?: RefChecklistItemMaterialLinkListRelationFilter
  }, "id">

  export type RefChecklistItemOrderByWithAggregationInput = {
    id?: SortOrder
    checklistId?: SortOrder
    seq?: SortOrder
    text?: SortOrder
    requirement?: SortOrderInput | SortOrder
    method?: SortOrder
    risk?: SortOrderInput | SortOrder
    tags?: SortOrder
    itemCode?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    aiEnabled?: SortOrderInput | SortOrder
    aiConfidence?: SortOrderInput | SortOrder
    units?: SortOrderInput | SortOrder
    tolerance?: SortOrderInput | SortOrder
    base?: SortOrderInput | SortOrder
    plus?: SortOrderInput | SortOrder
    minus?: SortOrderInput | SortOrder
    _count?: RefChecklistItemCountOrderByAggregateInput
    _avg?: RefChecklistItemAvgOrderByAggregateInput
    _max?: RefChecklistItemMaxOrderByAggregateInput
    _min?: RefChecklistItemMinOrderByAggregateInput
    _sum?: RefChecklistItemSumOrderByAggregateInput
  }

  export type RefChecklistItemScalarWhereWithAggregatesInput = {
    AND?: RefChecklistItemScalarWhereWithAggregatesInput | RefChecklistItemScalarWhereWithAggregatesInput[]
    OR?: RefChecklistItemScalarWhereWithAggregatesInput[]
    NOT?: RefChecklistItemScalarWhereWithAggregatesInput | RefChecklistItemScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RefChecklistItem"> | string
    checklistId?: UuidWithAggregatesFilter<"RefChecklistItem"> | string
    seq?: IntWithAggregatesFilter<"RefChecklistItem"> | number
    text?: StringWithAggregatesFilter<"RefChecklistItem"> | string
    requirement?: StringNullableWithAggregatesFilter<"RefChecklistItem"> | string | null
    method?: StringNullableListFilter<"RefChecklistItem">
    risk?: StringNullableWithAggregatesFilter<"RefChecklistItem"> | string | null
    tags?: StringNullableListFilter<"RefChecklistItem">
    itemCode?: StringNullableWithAggregatesFilter<"RefChecklistItem"> | string | null
    critical?: BoolNullableWithAggregatesFilter<"RefChecklistItem"> | boolean | null
    aiEnabled?: BoolNullableWithAggregatesFilter<"RefChecklistItem"> | boolean | null
    aiConfidence?: DecimalNullableWithAggregatesFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    units?: StringNullableWithAggregatesFilter<"RefChecklistItem"> | string | null
    tolerance?: StringNullableWithAggregatesFilter<"RefChecklistItem"> | string | null
    base?: DecimalNullableWithAggregatesFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    plus?: DecimalNullableWithAggregatesFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    minus?: DecimalNullableWithAggregatesFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
  }

  export type RefChecklistItemActivityLinkWhereInput = {
    AND?: RefChecklistItemActivityLinkWhereInput | RefChecklistItemActivityLinkWhereInput[]
    OR?: RefChecklistItemActivityLinkWhereInput[]
    NOT?: RefChecklistItemActivityLinkWhereInput | RefChecklistItemActivityLinkWhereInput[]
    id?: UuidFilter<"RefChecklistItemActivityLink"> | string
    itemId?: UuidFilter<"RefChecklistItemActivityLink"> | string
    activityId?: UuidNullableFilter<"RefChecklistItemActivityLink"> | string | null
    label?: StringFilter<"RefChecklistItemActivityLink"> | string
    tags?: StringNullableListFilter<"RefChecklistItemActivityLink">
    item?: XOR<RefChecklistItemRelationFilter, RefChecklistItemWhereInput>
    activity?: XOR<RefActivityNullableRelationFilter, RefActivityWhereInput> | null
  }

  export type RefChecklistItemActivityLinkOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    activityId?: SortOrderInput | SortOrder
    label?: SortOrder
    tags?: SortOrder
    item?: RefChecklistItemOrderByWithRelationInput
    activity?: RefActivityOrderByWithRelationInput
  }

  export type RefChecklistItemActivityLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RefChecklistItemActivityLinkWhereInput | RefChecklistItemActivityLinkWhereInput[]
    OR?: RefChecklistItemActivityLinkWhereInput[]
    NOT?: RefChecklistItemActivityLinkWhereInput | RefChecklistItemActivityLinkWhereInput[]
    itemId?: UuidFilter<"RefChecklistItemActivityLink"> | string
    activityId?: UuidNullableFilter<"RefChecklistItemActivityLink"> | string | null
    label?: StringFilter<"RefChecklistItemActivityLink"> | string
    tags?: StringNullableListFilter<"RefChecklistItemActivityLink">
    item?: XOR<RefChecklistItemRelationFilter, RefChecklistItemWhereInput>
    activity?: XOR<RefActivityNullableRelationFilter, RefActivityWhereInput> | null
  }, "id">

  export type RefChecklistItemActivityLinkOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    activityId?: SortOrderInput | SortOrder
    label?: SortOrder
    tags?: SortOrder
    _count?: RefChecklistItemActivityLinkCountOrderByAggregateInput
    _max?: RefChecklistItemActivityLinkMaxOrderByAggregateInput
    _min?: RefChecklistItemActivityLinkMinOrderByAggregateInput
  }

  export type RefChecklistItemActivityLinkScalarWhereWithAggregatesInput = {
    AND?: RefChecklistItemActivityLinkScalarWhereWithAggregatesInput | RefChecklistItemActivityLinkScalarWhereWithAggregatesInput[]
    OR?: RefChecklistItemActivityLinkScalarWhereWithAggregatesInput[]
    NOT?: RefChecklistItemActivityLinkScalarWhereWithAggregatesInput | RefChecklistItemActivityLinkScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RefChecklistItemActivityLink"> | string
    itemId?: UuidWithAggregatesFilter<"RefChecklistItemActivityLink"> | string
    activityId?: UuidNullableWithAggregatesFilter<"RefChecklistItemActivityLink"> | string | null
    label?: StringWithAggregatesFilter<"RefChecklistItemActivityLink"> | string
    tags?: StringNullableListFilter<"RefChecklistItemActivityLink">
  }

  export type RefChecklistItemMaterialLinkWhereInput = {
    AND?: RefChecklistItemMaterialLinkWhereInput | RefChecklistItemMaterialLinkWhereInput[]
    OR?: RefChecklistItemMaterialLinkWhereInput[]
    NOT?: RefChecklistItemMaterialLinkWhereInput | RefChecklistItemMaterialLinkWhereInput[]
    id?: UuidFilter<"RefChecklistItemMaterialLink"> | string
    itemId?: UuidFilter<"RefChecklistItemMaterialLink"> | string
    materialId?: UuidNullableFilter<"RefChecklistItemMaterialLink"> | string | null
    name?: StringFilter<"RefChecklistItemMaterialLink"> | string
    category?: StringNullableFilter<"RefChecklistItemMaterialLink"> | string | null
    properties?: JsonNullableFilter<"RefChecklistItemMaterialLink">
    item?: XOR<RefChecklistItemRelationFilter, RefChecklistItemWhereInput>
    material?: XOR<RefMaterialNullableRelationFilter, RefMaterialWhereInput> | null
  }

  export type RefChecklistItemMaterialLinkOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    materialId?: SortOrderInput | SortOrder
    name?: SortOrder
    category?: SortOrderInput | SortOrder
    properties?: SortOrderInput | SortOrder
    item?: RefChecklistItemOrderByWithRelationInput
    material?: RefMaterialOrderByWithRelationInput
  }

  export type RefChecklistItemMaterialLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RefChecklistItemMaterialLinkWhereInput | RefChecklistItemMaterialLinkWhereInput[]
    OR?: RefChecklistItemMaterialLinkWhereInput[]
    NOT?: RefChecklistItemMaterialLinkWhereInput | RefChecklistItemMaterialLinkWhereInput[]
    itemId?: UuidFilter<"RefChecklistItemMaterialLink"> | string
    materialId?: UuidNullableFilter<"RefChecklistItemMaterialLink"> | string | null
    name?: StringFilter<"RefChecklistItemMaterialLink"> | string
    category?: StringNullableFilter<"RefChecklistItemMaterialLink"> | string | null
    properties?: JsonNullableFilter<"RefChecklistItemMaterialLink">
    item?: XOR<RefChecklistItemRelationFilter, RefChecklistItemWhereInput>
    material?: XOR<RefMaterialNullableRelationFilter, RefMaterialWhereInput> | null
  }, "id">

  export type RefChecklistItemMaterialLinkOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    materialId?: SortOrderInput | SortOrder
    name?: SortOrder
    category?: SortOrderInput | SortOrder
    properties?: SortOrderInput | SortOrder
    _count?: RefChecklistItemMaterialLinkCountOrderByAggregateInput
    _max?: RefChecklistItemMaterialLinkMaxOrderByAggregateInput
    _min?: RefChecklistItemMaterialLinkMinOrderByAggregateInput
  }

  export type RefChecklistItemMaterialLinkScalarWhereWithAggregatesInput = {
    AND?: RefChecklistItemMaterialLinkScalarWhereWithAggregatesInput | RefChecklistItemMaterialLinkScalarWhereWithAggregatesInput[]
    OR?: RefChecklistItemMaterialLinkScalarWhereWithAggregatesInput[]
    NOT?: RefChecklistItemMaterialLinkScalarWhereWithAggregatesInput | RefChecklistItemMaterialLinkScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RefChecklistItemMaterialLink"> | string
    itemId?: UuidWithAggregatesFilter<"RefChecklistItemMaterialLink"> | string
    materialId?: UuidNullableWithAggregatesFilter<"RefChecklistItemMaterialLink"> | string | null
    name?: StringWithAggregatesFilter<"RefChecklistItemMaterialLink"> | string
    category?: StringNullableWithAggregatesFilter<"RefChecklistItemMaterialLink"> | string | null
    properties?: JsonNullableWithAggregatesFilter<"RefChecklistItemMaterialLink">
  }

  export type RefActivityWhereInput = {
    AND?: RefActivityWhereInput | RefActivityWhereInput[]
    OR?: RefActivityWhereInput[]
    NOT?: RefActivityWhereInput | RefActivityWhereInput[]
    id?: UuidFilter<"RefActivity"> | string
    code?: StringNullableFilter<"RefActivity"> | string | null
    title?: StringFilter<"RefActivity"> | string
    discipline?: EnumDisciplineFilter<"RefActivity"> | $Enums.Discipline
    stageLabel?: StringNullableFilter<"RefActivity"> | string | null
    phase?: StringNullableListFilter<"RefActivity">
    element?: StringNullableListFilter<"RefActivity">
    system?: StringNullableListFilter<"RefActivity">
    nature?: StringNullableListFilter<"RefActivity">
    method?: StringNullableListFilter<"RefActivity">
    status?: StringFilter<"RefActivity"> | string
    version?: IntFilter<"RefActivity"> | number
    versionLabel?: StringNullableFilter<"RefActivity"> | string | null
    versionMajor?: IntFilter<"RefActivity"> | number
    versionMinor?: IntFilter<"RefActivity"> | number
    versionPatch?: IntFilter<"RefActivity"> | number
    notes?: StringNullableFilter<"RefActivity"> | string | null
    createdAt?: DateTimeFilter<"RefActivity"> | Date | string
    updatedAt?: DateTimeFilter<"RefActivity"> | Date | string
    materials?: RefActivityMaterialListRelationFilter
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkListRelationFilter
  }

  export type RefActivityOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrderInput | SortOrder
    phase?: SortOrder
    element?: SortOrder
    system?: SortOrder
    nature?: SortOrder
    method?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrderInput | SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    materials?: RefActivityMaterialOrderByRelationAggregateInput
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkOrderByRelationAggregateInput
  }

  export type RefActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    discipline_stageLabel_title?: RefActivityDisciplineStageLabelTitleCompoundUniqueInput
    AND?: RefActivityWhereInput | RefActivityWhereInput[]
    OR?: RefActivityWhereInput[]
    NOT?: RefActivityWhereInput | RefActivityWhereInput[]
    title?: StringFilter<"RefActivity"> | string
    discipline?: EnumDisciplineFilter<"RefActivity"> | $Enums.Discipline
    stageLabel?: StringNullableFilter<"RefActivity"> | string | null
    phase?: StringNullableListFilter<"RefActivity">
    element?: StringNullableListFilter<"RefActivity">
    system?: StringNullableListFilter<"RefActivity">
    nature?: StringNullableListFilter<"RefActivity">
    method?: StringNullableListFilter<"RefActivity">
    status?: StringFilter<"RefActivity"> | string
    version?: IntFilter<"RefActivity"> | number
    versionLabel?: StringNullableFilter<"RefActivity"> | string | null
    versionMajor?: IntFilter<"RefActivity"> | number
    versionMinor?: IntFilter<"RefActivity"> | number
    versionPatch?: IntFilter<"RefActivity"> | number
    notes?: StringNullableFilter<"RefActivity"> | string | null
    createdAt?: DateTimeFilter<"RefActivity"> | Date | string
    updatedAt?: DateTimeFilter<"RefActivity"> | Date | string
    materials?: RefActivityMaterialListRelationFilter
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkListRelationFilter
  }, "id" | "code" | "discipline_stageLabel_title">

  export type RefActivityOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrderInput | SortOrder
    phase?: SortOrder
    element?: SortOrder
    system?: SortOrder
    nature?: SortOrder
    method?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrderInput | SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RefActivityCountOrderByAggregateInput
    _avg?: RefActivityAvgOrderByAggregateInput
    _max?: RefActivityMaxOrderByAggregateInput
    _min?: RefActivityMinOrderByAggregateInput
    _sum?: RefActivitySumOrderByAggregateInput
  }

  export type RefActivityScalarWhereWithAggregatesInput = {
    AND?: RefActivityScalarWhereWithAggregatesInput | RefActivityScalarWhereWithAggregatesInput[]
    OR?: RefActivityScalarWhereWithAggregatesInput[]
    NOT?: RefActivityScalarWhereWithAggregatesInput | RefActivityScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RefActivity"> | string
    code?: StringNullableWithAggregatesFilter<"RefActivity"> | string | null
    title?: StringWithAggregatesFilter<"RefActivity"> | string
    discipline?: EnumDisciplineWithAggregatesFilter<"RefActivity"> | $Enums.Discipline
    stageLabel?: StringNullableWithAggregatesFilter<"RefActivity"> | string | null
    phase?: StringNullableListFilter<"RefActivity">
    element?: StringNullableListFilter<"RefActivity">
    system?: StringNullableListFilter<"RefActivity">
    nature?: StringNullableListFilter<"RefActivity">
    method?: StringNullableListFilter<"RefActivity">
    status?: StringWithAggregatesFilter<"RefActivity"> | string
    version?: IntWithAggregatesFilter<"RefActivity"> | number
    versionLabel?: StringNullableWithAggregatesFilter<"RefActivity"> | string | null
    versionMajor?: IntWithAggregatesFilter<"RefActivity"> | number
    versionMinor?: IntWithAggregatesFilter<"RefActivity"> | number
    versionPatch?: IntWithAggregatesFilter<"RefActivity"> | number
    notes?: StringNullableWithAggregatesFilter<"RefActivity"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RefActivity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RefActivity"> | Date | string
  }

  export type RefMaterialWhereInput = {
    AND?: RefMaterialWhereInput | RefMaterialWhereInput[]
    OR?: RefMaterialWhereInput[]
    NOT?: RefMaterialWhereInput | RefMaterialWhereInput[]
    id?: UuidFilter<"RefMaterial"> | string
    code?: StringNullableFilter<"RefMaterial"> | string | null
    name?: StringFilter<"RefMaterial"> | string
    discipline?: EnumMaterialDisciplineNullableFilter<"RefMaterial"> | $Enums.MaterialDiscipline | null
    category?: StringNullableFilter<"RefMaterial"> | string | null
    manufacturer?: StringNullableFilter<"RefMaterial"> | string | null
    model?: StringNullableFilter<"RefMaterial"> | string | null
    standards?: StringNullableListFilter<"RefMaterial">
    fireRating?: StringNullableFilter<"RefMaterial"> | string | null
    keyProps?: StringNullableListFilter<"RefMaterial">
    aliases?: StringNullableListFilter<"RefMaterial">
    properties?: JsonNullableFilter<"RefMaterial">
    version?: IntFilter<"RefMaterial"> | number
    versionLabel?: StringNullableFilter<"RefMaterial"> | string | null
    versionMajor?: IntFilter<"RefMaterial"> | number
    versionMinor?: IntFilter<"RefMaterial"> | number
    versionPatch?: IntFilter<"RefMaterial"> | number
    notes?: StringNullableFilter<"RefMaterial"> | string | null
    status?: StringFilter<"RefMaterial"> | string
    createdAt?: DateTimeFilter<"RefMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"RefMaterial"> | Date | string
    activityUses?: RefActivityMaterialListRelationFilter
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkListRelationFilter
  }

  export type RefMaterialOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    name?: SortOrder
    discipline?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    manufacturer?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    standards?: SortOrder
    fireRating?: SortOrderInput | SortOrder
    keyProps?: SortOrder
    aliases?: SortOrder
    properties?: SortOrderInput | SortOrder
    version?: SortOrder
    versionLabel?: SortOrderInput | SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activityUses?: RefActivityMaterialOrderByRelationAggregateInput
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkOrderByRelationAggregateInput
  }

  export type RefMaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: RefMaterialWhereInput | RefMaterialWhereInput[]
    OR?: RefMaterialWhereInput[]
    NOT?: RefMaterialWhereInput | RefMaterialWhereInput[]
    name?: StringFilter<"RefMaterial"> | string
    discipline?: EnumMaterialDisciplineNullableFilter<"RefMaterial"> | $Enums.MaterialDiscipline | null
    category?: StringNullableFilter<"RefMaterial"> | string | null
    manufacturer?: StringNullableFilter<"RefMaterial"> | string | null
    model?: StringNullableFilter<"RefMaterial"> | string | null
    standards?: StringNullableListFilter<"RefMaterial">
    fireRating?: StringNullableFilter<"RefMaterial"> | string | null
    keyProps?: StringNullableListFilter<"RefMaterial">
    aliases?: StringNullableListFilter<"RefMaterial">
    properties?: JsonNullableFilter<"RefMaterial">
    version?: IntFilter<"RefMaterial"> | number
    versionLabel?: StringNullableFilter<"RefMaterial"> | string | null
    versionMajor?: IntFilter<"RefMaterial"> | number
    versionMinor?: IntFilter<"RefMaterial"> | number
    versionPatch?: IntFilter<"RefMaterial"> | number
    notes?: StringNullableFilter<"RefMaterial"> | string | null
    status?: StringFilter<"RefMaterial"> | string
    createdAt?: DateTimeFilter<"RefMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"RefMaterial"> | Date | string
    activityUses?: RefActivityMaterialListRelationFilter
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkListRelationFilter
  }, "id" | "code">

  export type RefMaterialOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    name?: SortOrder
    discipline?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    manufacturer?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    standards?: SortOrder
    fireRating?: SortOrderInput | SortOrder
    keyProps?: SortOrder
    aliases?: SortOrder
    properties?: SortOrderInput | SortOrder
    version?: SortOrder
    versionLabel?: SortOrderInput | SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RefMaterialCountOrderByAggregateInput
    _avg?: RefMaterialAvgOrderByAggregateInput
    _max?: RefMaterialMaxOrderByAggregateInput
    _min?: RefMaterialMinOrderByAggregateInput
    _sum?: RefMaterialSumOrderByAggregateInput
  }

  export type RefMaterialScalarWhereWithAggregatesInput = {
    AND?: RefMaterialScalarWhereWithAggregatesInput | RefMaterialScalarWhereWithAggregatesInput[]
    OR?: RefMaterialScalarWhereWithAggregatesInput[]
    NOT?: RefMaterialScalarWhereWithAggregatesInput | RefMaterialScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RefMaterial"> | string
    code?: StringNullableWithAggregatesFilter<"RefMaterial"> | string | null
    name?: StringWithAggregatesFilter<"RefMaterial"> | string
    discipline?: EnumMaterialDisciplineNullableWithAggregatesFilter<"RefMaterial"> | $Enums.MaterialDiscipline | null
    category?: StringNullableWithAggregatesFilter<"RefMaterial"> | string | null
    manufacturer?: StringNullableWithAggregatesFilter<"RefMaterial"> | string | null
    model?: StringNullableWithAggregatesFilter<"RefMaterial"> | string | null
    standards?: StringNullableListFilter<"RefMaterial">
    fireRating?: StringNullableWithAggregatesFilter<"RefMaterial"> | string | null
    keyProps?: StringNullableListFilter<"RefMaterial">
    aliases?: StringNullableListFilter<"RefMaterial">
    properties?: JsonNullableWithAggregatesFilter<"RefMaterial">
    version?: IntWithAggregatesFilter<"RefMaterial"> | number
    versionLabel?: StringNullableWithAggregatesFilter<"RefMaterial"> | string | null
    versionMajor?: IntWithAggregatesFilter<"RefMaterial"> | number
    versionMinor?: IntWithAggregatesFilter<"RefMaterial"> | number
    versionPatch?: IntWithAggregatesFilter<"RefMaterial"> | number
    notes?: StringNullableWithAggregatesFilter<"RefMaterial"> | string | null
    status?: StringWithAggregatesFilter<"RefMaterial"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RefMaterial"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RefMaterial"> | Date | string
  }

  export type RefActivityMaterialWhereInput = {
    AND?: RefActivityMaterialWhereInput | RefActivityMaterialWhereInput[]
    OR?: RefActivityMaterialWhereInput[]
    NOT?: RefActivityMaterialWhereInput | RefActivityMaterialWhereInput[]
    id?: UuidFilter<"RefActivityMaterial"> | string
    activityId?: UuidFilter<"RefActivityMaterial"> | string
    materialId?: UuidFilter<"RefActivityMaterial"> | string
    note?: StringNullableFilter<"RefActivityMaterial"> | string | null
    activity?: XOR<RefActivityRelationFilter, RefActivityWhereInput>
    material?: XOR<RefMaterialRelationFilter, RefMaterialWhereInput>
  }

  export type RefActivityMaterialOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    materialId?: SortOrder
    note?: SortOrderInput | SortOrder
    activity?: RefActivityOrderByWithRelationInput
    material?: RefMaterialOrderByWithRelationInput
  }

  export type RefActivityMaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    activityId_materialId?: RefActivityMaterialActivityIdMaterialIdCompoundUniqueInput
    AND?: RefActivityMaterialWhereInput | RefActivityMaterialWhereInput[]
    OR?: RefActivityMaterialWhereInput[]
    NOT?: RefActivityMaterialWhereInput | RefActivityMaterialWhereInput[]
    activityId?: UuidFilter<"RefActivityMaterial"> | string
    materialId?: UuidFilter<"RefActivityMaterial"> | string
    note?: StringNullableFilter<"RefActivityMaterial"> | string | null
    activity?: XOR<RefActivityRelationFilter, RefActivityWhereInput>
    material?: XOR<RefMaterialRelationFilter, RefMaterialWhereInput>
  }, "id" | "activityId_materialId">

  export type RefActivityMaterialOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    materialId?: SortOrder
    note?: SortOrderInput | SortOrder
    _count?: RefActivityMaterialCountOrderByAggregateInput
    _max?: RefActivityMaterialMaxOrderByAggregateInput
    _min?: RefActivityMaterialMinOrderByAggregateInput
  }

  export type RefActivityMaterialScalarWhereWithAggregatesInput = {
    AND?: RefActivityMaterialScalarWhereWithAggregatesInput | RefActivityMaterialScalarWhereWithAggregatesInput[]
    OR?: RefActivityMaterialScalarWhereWithAggregatesInput[]
    NOT?: RefActivityMaterialScalarWhereWithAggregatesInput | RefActivityMaterialScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RefActivityMaterial"> | string
    activityId?: UuidWithAggregatesFilter<"RefActivityMaterial"> | string
    materialId?: UuidWithAggregatesFilter<"RefActivityMaterial"> | string
    note?: StringNullableWithAggregatesFilter<"RefActivityMaterial"> | string | null
  }

  export type AdminAuditSettingWhereInput = {
    AND?: AdminAuditSettingWhereInput | AdminAuditSettingWhereInput[]
    OR?: AdminAuditSettingWhereInput[]
    NOT?: AdminAuditSettingWhereInput | AdminAuditSettingWhereInput[]
    id?: IntFilter<"AdminAuditSetting"> | number
    assignmentsEnabled?: BoolFilter<"AdminAuditSetting"> | boolean
    updatedByUserId?: UuidNullableFilter<"AdminAuditSetting"> | string | null
    updatedByName?: StringNullableFilter<"AdminAuditSetting"> | string | null
    updatedAt?: DateTimeFilter<"AdminAuditSetting"> | Date | string
  }

  export type AdminAuditSettingOrderByWithRelationInput = {
    id?: SortOrder
    assignmentsEnabled?: SortOrder
    updatedByUserId?: SortOrderInput | SortOrder
    updatedByName?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
  }

  export type AdminAuditSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AdminAuditSettingWhereInput | AdminAuditSettingWhereInput[]
    OR?: AdminAuditSettingWhereInput[]
    NOT?: AdminAuditSettingWhereInput | AdminAuditSettingWhereInput[]
    assignmentsEnabled?: BoolFilter<"AdminAuditSetting"> | boolean
    updatedByUserId?: UuidNullableFilter<"AdminAuditSetting"> | string | null
    updatedByName?: StringNullableFilter<"AdminAuditSetting"> | string | null
    updatedAt?: DateTimeFilter<"AdminAuditSetting"> | Date | string
  }, "id">

  export type AdminAuditSettingOrderByWithAggregationInput = {
    id?: SortOrder
    assignmentsEnabled?: SortOrder
    updatedByUserId?: SortOrderInput | SortOrder
    updatedByName?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: AdminAuditSettingCountOrderByAggregateInput
    _avg?: AdminAuditSettingAvgOrderByAggregateInput
    _max?: AdminAuditSettingMaxOrderByAggregateInput
    _min?: AdminAuditSettingMinOrderByAggregateInput
    _sum?: AdminAuditSettingSumOrderByAggregateInput
  }

  export type AdminAuditSettingScalarWhereWithAggregatesInput = {
    AND?: AdminAuditSettingScalarWhereWithAggregatesInput | AdminAuditSettingScalarWhereWithAggregatesInput[]
    OR?: AdminAuditSettingScalarWhereWithAggregatesInput[]
    NOT?: AdminAuditSettingScalarWhereWithAggregatesInput | AdminAuditSettingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AdminAuditSetting"> | number
    assignmentsEnabled?: BoolWithAggregatesFilter<"AdminAuditSetting"> | boolean
    updatedByUserId?: UuidNullableWithAggregatesFilter<"AdminAuditSetting"> | string | null
    updatedByName?: StringNullableWithAggregatesFilter<"AdminAuditSetting"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"AdminAuditSetting"> | Date | string
  }

  export type AdminAuditLogWhereInput = {
    AND?: AdminAuditLogWhereInput | AdminAuditLogWhereInput[]
    OR?: AdminAuditLogWhereInput[]
    NOT?: AdminAuditLogWhereInput | AdminAuditLogWhereInput[]
    id?: UuidFilter<"AdminAuditLog"> | string
    actorUserId?: UuidFilter<"AdminAuditLog"> | string
    actorName?: StringFilter<"AdminAuditLog"> | string
    action?: EnumAuditActionFilter<"AdminAuditLog"> | $Enums.AuditAction
    module?: StringFilter<"AdminAuditLog"> | string
    targetUserId?: UuidFilter<"AdminAuditLog"> | string
    role?: EnumUserRoleNullableFilter<"AdminAuditLog"> | $Enums.UserRole | null
    scopeType?: EnumRoleScopeNullableFilter<"AdminAuditLog"> | $Enums.RoleScope | null
    companyId?: UuidNullableFilter<"AdminAuditLog"> | string | null
    projectId?: UuidNullableFilter<"AdminAuditLog"> | string | null
    ip?: StringNullableFilter<"AdminAuditLog"> | string | null
    userAgent?: StringNullableFilter<"AdminAuditLog"> | string | null
    before?: JsonNullableFilter<"AdminAuditLog">
    after?: JsonNullableFilter<"AdminAuditLog">
    createdAt?: DateTimeFilter<"AdminAuditLog"> | Date | string
  }

  export type AdminAuditLogOrderByWithRelationInput = {
    id?: SortOrder
    actorUserId?: SortOrder
    actorName?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetUserId?: SortOrder
    role?: SortOrderInput | SortOrder
    scopeType?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    before?: SortOrderInput | SortOrder
    after?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AdminAuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminAuditLogWhereInput | AdminAuditLogWhereInput[]
    OR?: AdminAuditLogWhereInput[]
    NOT?: AdminAuditLogWhereInput | AdminAuditLogWhereInput[]
    actorUserId?: UuidFilter<"AdminAuditLog"> | string
    actorName?: StringFilter<"AdminAuditLog"> | string
    action?: EnumAuditActionFilter<"AdminAuditLog"> | $Enums.AuditAction
    module?: StringFilter<"AdminAuditLog"> | string
    targetUserId?: UuidFilter<"AdminAuditLog"> | string
    role?: EnumUserRoleNullableFilter<"AdminAuditLog"> | $Enums.UserRole | null
    scopeType?: EnumRoleScopeNullableFilter<"AdminAuditLog"> | $Enums.RoleScope | null
    companyId?: UuidNullableFilter<"AdminAuditLog"> | string | null
    projectId?: UuidNullableFilter<"AdminAuditLog"> | string | null
    ip?: StringNullableFilter<"AdminAuditLog"> | string | null
    userAgent?: StringNullableFilter<"AdminAuditLog"> | string | null
    before?: JsonNullableFilter<"AdminAuditLog">
    after?: JsonNullableFilter<"AdminAuditLog">
    createdAt?: DateTimeFilter<"AdminAuditLog"> | Date | string
  }, "id">

  export type AdminAuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    actorUserId?: SortOrder
    actorName?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetUserId?: SortOrder
    role?: SortOrderInput | SortOrder
    scopeType?: SortOrderInput | SortOrder
    companyId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    before?: SortOrderInput | SortOrder
    after?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AdminAuditLogCountOrderByAggregateInput
    _max?: AdminAuditLogMaxOrderByAggregateInput
    _min?: AdminAuditLogMinOrderByAggregateInput
  }

  export type AdminAuditLogScalarWhereWithAggregatesInput = {
    AND?: AdminAuditLogScalarWhereWithAggregatesInput | AdminAuditLogScalarWhereWithAggregatesInput[]
    OR?: AdminAuditLogScalarWhereWithAggregatesInput[]
    NOT?: AdminAuditLogScalarWhereWithAggregatesInput | AdminAuditLogScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AdminAuditLog"> | string
    actorUserId?: UuidWithAggregatesFilter<"AdminAuditLog"> | string
    actorName?: StringWithAggregatesFilter<"AdminAuditLog"> | string
    action?: EnumAuditActionWithAggregatesFilter<"AdminAuditLog"> | $Enums.AuditAction
    module?: StringWithAggregatesFilter<"AdminAuditLog"> | string
    targetUserId?: UuidWithAggregatesFilter<"AdminAuditLog"> | string
    role?: EnumUserRoleNullableWithAggregatesFilter<"AdminAuditLog"> | $Enums.UserRole | null
    scopeType?: EnumRoleScopeNullableWithAggregatesFilter<"AdminAuditLog"> | $Enums.RoleScope | null
    companyId?: UuidNullableWithAggregatesFilter<"AdminAuditLog"> | string | null
    projectId?: UuidNullableWithAggregatesFilter<"AdminAuditLog"> | string | null
    ip?: StringNullableWithAggregatesFilter<"AdminAuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AdminAuditLog"> | string | null
    before?: JsonNullableWithAggregatesFilter<"AdminAuditLog">
    after?: JsonNullableWithAggregatesFilter<"AdminAuditLog">
    createdAt?: DateTimeWithAggregatesFilter<"AdminAuditLog"> | Date | string
  }

  export type StateCreateInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
    companies?: CompanyCreateNestedManyWithoutStateInput
    projects?: ProjectCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
    companies?: CompanyUncheckedCreateNestedManyWithoutStateInput
    projects?: ProjectUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateUpdateInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
    companies?: CompanyUpdateManyWithoutStateNestedInput
    projects?: ProjectUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutStateNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutStateNestedInput
  }

  export type StateCreateManyInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StateUpdateManyMutationInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateUncheckedUpdateManyInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistrictCreateInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutDistrictsInput
    users?: UserCreateNestedManyWithoutDistrictInput
    companies?: CompanyCreateNestedManyWithoutDistrictInput
    projects?: ProjectCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDistrictInput
    companies?: CompanyUncheckedCreateNestedManyWithoutDistrictInput
    projects?: ProjectUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUpdateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutDistrictsNestedInput
    users?: UserUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictCreateManyInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistrictUpdateManyMutationInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistrictUncheckedUpdateManyInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyUncheckedCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUncheckedUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
  }

  export type UserUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
  }

  export type CompanyCreateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    serviceProvider?: UserCreateNestedOneWithoutCompaniesAsServiceProviderInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    serviceProvider?: UserUpdateOneWithoutCompaniesAsServiceProviderNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefProjectTagCreateInput = {
    tagCode: string
    label: string
    tags?: ProjectTagCreateNestedManyWithoutTagInput
  }

  export type RefProjectTagUncheckedCreateInput = {
    tagCode: string
    label: string
    tags?: ProjectTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type RefProjectTagUpdateInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: ProjectTagUpdateManyWithoutTagNestedInput
  }

  export type RefProjectTagUncheckedUpdateInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: ProjectTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type RefProjectTagCreateManyInput = {
    tagCode: string
    label: string
  }

  export type RefProjectTagUpdateManyMutationInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type RefProjectTagUncheckedUpdateManyInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectTagCreateInput = {
    project: ProjectCreateNestedOneWithoutProjectTagsInput
    tag: RefProjectTagCreateNestedOneWithoutTagsInput
  }

  export type ProjectTagUncheckedCreateInput = {
    projectId: string
    tagCode: string
  }

  export type ProjectTagUpdateInput = {
    project?: ProjectUpdateOneRequiredWithoutProjectTagsNestedInput
    tag?: RefProjectTagUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ProjectTagUncheckedUpdateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    tagCode?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectTagCreateManyInput = {
    projectId: string
    tagCode: string
  }

  export type ProjectTagUpdateManyMutationInput = {

  }

  export type ProjectTagUncheckedUpdateManyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    tagCode?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserProjectsInput
    project: ProjectCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectUncheckedCreateInput = {
    userId: string
    projectId: string
    createdAt?: Date | string
  }

  export type UserProjectUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserProjectsNestedInput
    project?: ProjectUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectCreateManyInput = {
    userId: string
    projectId: string
    createdAt?: Date | string
  }

  export type UserProjectUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserCompaniesInput
    company: CompanyCreateNestedOneWithoutUserCompaniesInput
  }

  export type UserCompanyUncheckedCreateInput = {
    userId: string
    companyId: string
    createdAt?: Date | string
  }

  export type UserCompanyUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCompaniesNestedInput
    company?: CompanyUpdateOneRequiredWithoutUserCompaniesNestedInput
  }

  export type UserCompanyUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyCreateManyInput = {
    userId: string
    companyId: string
    createdAt?: Date | string
  }

  export type UserCompanyUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipCreateInput = {
    id?: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserRoleMembershipsInput
    company?: CompanyCreateNestedOneWithoutUserRoleMembershipsInput
    project?: ProjectCreateNestedOneWithoutUserRoleMembershipsInput
  }

  export type UserRoleMembershipUncheckedCreateInput = {
    id?: string
    userId: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    companyId?: string | null
    projectId?: string | null
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleMembershipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserRoleMembershipsNestedInput
    company?: CompanyUpdateOneWithoutUserRoleMembershipsNestedInput
    project?: ProjectUpdateOneWithoutUserRoleMembershipsNestedInput
  }

  export type UserRoleMembershipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipCreateManyInput = {
    id?: string
    userId: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    companyId?: string | null
    projectId?: string | null
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleMembershipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionTemplateCreateInput = {
    id?: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionTemplateUncheckedCreateInput = {
    id?: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionTemplateCreateManyInput = {
    id?: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionProjectOverrideCreateInput = {
    id?: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutPermissionProjectOverrideInput
  }

  export type PermissionProjectOverrideUncheckedCreateInput = {
    id?: string
    projectId: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionProjectOverrideUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutPermissionProjectOverrideNestedInput
  }

  export type PermissionProjectOverrideUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionProjectOverrideCreateManyInput = {
    id?: string
    projectId: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionProjectOverrideUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionProjectOverrideUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUserOverrideCreateInput = {
    id?: string
    projectId: string
    userId: string
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUserOverrideUncheckedCreateInput = {
    id?: string
    projectId: string
    userId: string
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUserOverrideUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUserOverrideUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUserOverrideCreateManyInput = {
    id?: string
    projectId: string
    userId: string
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUserOverrideUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUserOverrideUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefChecklistCreateInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    tags?: RefChecklistCreatetagsInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    aiDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: RefChecklistItemCreateNestedManyWithoutChecklistInput
  }

  export type RefChecklistUncheckedCreateInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    tags?: RefChecklistCreatetagsInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    aiDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: RefChecklistItemUncheckedCreateNestedManyWithoutChecklistInput
  }

  export type RefChecklistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistUpdatetagsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    aiDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: RefChecklistItemUpdateManyWithoutChecklistNestedInput
  }

  export type RefChecklistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistUpdatetagsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    aiDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: RefChecklistItemUncheckedUpdateManyWithoutChecklistNestedInput
  }

  export type RefChecklistCreateManyInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    tags?: RefChecklistCreatetagsInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    aiDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefChecklistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistUpdatetagsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    aiDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefChecklistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistUpdatetagsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    aiDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefChecklistItemCreateInput = {
    id?: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
    checklist: RefChecklistCreateNestedOneWithoutItemsInput
    suggestedActivities?: RefChecklistItemActivityLinkCreateNestedManyWithoutItemInput
    suggestedMaterials?: RefChecklistItemMaterialLinkCreateNestedManyWithoutItemInput
  }

  export type RefChecklistItemUncheckedCreateInput = {
    id?: string
    checklistId: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
    suggestedActivities?: RefChecklistItemActivityLinkUncheckedCreateNestedManyWithoutItemInput
    suggestedMaterials?: RefChecklistItemMaterialLinkUncheckedCreateNestedManyWithoutItemInput
  }

  export type RefChecklistItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checklist?: RefChecklistUpdateOneRequiredWithoutItemsNestedInput
    suggestedActivities?: RefChecklistItemActivityLinkUpdateManyWithoutItemNestedInput
    suggestedMaterials?: RefChecklistItemMaterialLinkUpdateManyWithoutItemNestedInput
  }

  export type RefChecklistItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    checklistId?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    suggestedActivities?: RefChecklistItemActivityLinkUncheckedUpdateManyWithoutItemNestedInput
    suggestedMaterials?: RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutItemNestedInput
  }

  export type RefChecklistItemCreateManyInput = {
    id?: string
    checklistId: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
  }

  export type RefChecklistItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type RefChecklistItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    checklistId?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type RefChecklistItemActivityLinkCreateInput = {
    id?: string
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
    item: RefChecklistItemCreateNestedOneWithoutSuggestedActivitiesInput
    activity?: RefActivityCreateNestedOneWithoutRefChecklistItemActivityLinkInput
  }

  export type RefChecklistItemActivityLinkUncheckedCreateInput = {
    id?: string
    itemId: string
    activityId?: string | null
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
  }

  export type RefChecklistItemActivityLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
    item?: RefChecklistItemUpdateOneRequiredWithoutSuggestedActivitiesNestedInput
    activity?: RefActivityUpdateOneWithoutRefChecklistItemActivityLinkNestedInput
  }

  export type RefChecklistItemActivityLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    activityId?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
  }

  export type RefChecklistItemActivityLinkCreateManyInput = {
    id?: string
    itemId: string
    activityId?: string | null
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
  }

  export type RefChecklistItemActivityLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
  }

  export type RefChecklistItemActivityLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    activityId?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
  }

  export type RefChecklistItemMaterialLinkCreateInput = {
    id?: string
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
    item: RefChecklistItemCreateNestedOneWithoutSuggestedMaterialsInput
    material?: RefMaterialCreateNestedOneWithoutRefChecklistItemMaterialLinkInput
  }

  export type RefChecklistItemMaterialLinkUncheckedCreateInput = {
    id?: string
    itemId: string
    materialId?: string | null
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemMaterialLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
    item?: RefChecklistItemUpdateOneRequiredWithoutSuggestedMaterialsNestedInput
    material?: RefMaterialUpdateOneWithoutRefChecklistItemMaterialLinkNestedInput
  }

  export type RefChecklistItemMaterialLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemMaterialLinkCreateManyInput = {
    id?: string
    itemId: string
    materialId?: string | null
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemMaterialLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemMaterialLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefActivityCreateInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    phase?: RefActivityCreatephaseInput | string[]
    element?: RefActivityCreateelementInput | string[]
    system?: RefActivityCreatesystemInput | string[]
    nature?: RefActivityCreatenatureInput | string[]
    method?: RefActivityCreatemethodInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    materials?: RefActivityMaterialCreateNestedManyWithoutActivityInput
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkCreateNestedManyWithoutActivityInput
  }

  export type RefActivityUncheckedCreateInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    phase?: RefActivityCreatephaseInput | string[]
    element?: RefActivityCreateelementInput | string[]
    system?: RefActivityCreatesystemInput | string[]
    nature?: RefActivityCreatenatureInput | string[]
    method?: RefActivityCreatemethodInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    materials?: RefActivityMaterialUncheckedCreateNestedManyWithoutActivityInput
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkUncheckedCreateNestedManyWithoutActivityInput
  }

  export type RefActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    phase?: RefActivityUpdatephaseInput | string[]
    element?: RefActivityUpdateelementInput | string[]
    system?: RefActivityUpdatesystemInput | string[]
    nature?: RefActivityUpdatenatureInput | string[]
    method?: RefActivityUpdatemethodInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materials?: RefActivityMaterialUpdateManyWithoutActivityNestedInput
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkUpdateManyWithoutActivityNestedInput
  }

  export type RefActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    phase?: RefActivityUpdatephaseInput | string[]
    element?: RefActivityUpdateelementInput | string[]
    system?: RefActivityUpdatesystemInput | string[]
    nature?: RefActivityUpdatenatureInput | string[]
    method?: RefActivityUpdatemethodInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materials?: RefActivityMaterialUncheckedUpdateManyWithoutActivityNestedInput
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type RefActivityCreateManyInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    phase?: RefActivityCreatephaseInput | string[]
    element?: RefActivityCreateelementInput | string[]
    system?: RefActivityCreatesystemInput | string[]
    nature?: RefActivityCreatenatureInput | string[]
    method?: RefActivityCreatemethodInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    phase?: RefActivityUpdatephaseInput | string[]
    element?: RefActivityUpdateelementInput | string[]
    system?: RefActivityUpdatesystemInput | string[]
    nature?: RefActivityUpdatenatureInput | string[]
    method?: RefActivityUpdatemethodInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    phase?: RefActivityUpdatephaseInput | string[]
    element?: RefActivityUpdateelementInput | string[]
    system?: RefActivityUpdatesystemInput | string[]
    nature?: RefActivityUpdatenatureInput | string[]
    method?: RefActivityUpdatemethodInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefMaterialCreateInput = {
    id?: string
    code?: string | null
    name: string
    discipline?: $Enums.MaterialDiscipline | null
    category?: string | null
    manufacturer?: string | null
    model?: string | null
    standards?: RefMaterialCreatestandardsInput | string[]
    fireRating?: string | null
    keyProps?: RefMaterialCreatekeyPropsInput | string[]
    aliases?: RefMaterialCreatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityUses?: RefActivityMaterialCreateNestedManyWithoutMaterialInput
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkCreateNestedManyWithoutMaterialInput
  }

  export type RefMaterialUncheckedCreateInput = {
    id?: string
    code?: string | null
    name: string
    discipline?: $Enums.MaterialDiscipline | null
    category?: string | null
    manufacturer?: string | null
    model?: string | null
    standards?: RefMaterialCreatestandardsInput | string[]
    fireRating?: string | null
    keyProps?: RefMaterialCreatekeyPropsInput | string[]
    aliases?: RefMaterialCreatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityUses?: RefActivityMaterialUncheckedCreateNestedManyWithoutMaterialInput
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type RefMaterialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    discipline?: NullableEnumMaterialDisciplineFieldUpdateOperationsInput | $Enums.MaterialDiscipline | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    standards?: RefMaterialUpdatestandardsInput | string[]
    fireRating?: NullableStringFieldUpdateOperationsInput | string | null
    keyProps?: RefMaterialUpdatekeyPropsInput | string[]
    aliases?: RefMaterialUpdatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityUses?: RefActivityMaterialUpdateManyWithoutMaterialNestedInput
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkUpdateManyWithoutMaterialNestedInput
  }

  export type RefMaterialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    discipline?: NullableEnumMaterialDisciplineFieldUpdateOperationsInput | $Enums.MaterialDiscipline | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    standards?: RefMaterialUpdatestandardsInput | string[]
    fireRating?: NullableStringFieldUpdateOperationsInput | string | null
    keyProps?: RefMaterialUpdatekeyPropsInput | string[]
    aliases?: RefMaterialUpdatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityUses?: RefActivityMaterialUncheckedUpdateManyWithoutMaterialNestedInput
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type RefMaterialCreateManyInput = {
    id?: string
    code?: string | null
    name: string
    discipline?: $Enums.MaterialDiscipline | null
    category?: string | null
    manufacturer?: string | null
    model?: string | null
    standards?: RefMaterialCreatestandardsInput | string[]
    fireRating?: string | null
    keyProps?: RefMaterialCreatekeyPropsInput | string[]
    aliases?: RefMaterialCreatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefMaterialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    discipline?: NullableEnumMaterialDisciplineFieldUpdateOperationsInput | $Enums.MaterialDiscipline | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    standards?: RefMaterialUpdatestandardsInput | string[]
    fireRating?: NullableStringFieldUpdateOperationsInput | string | null
    keyProps?: RefMaterialUpdatekeyPropsInput | string[]
    aliases?: RefMaterialUpdatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefMaterialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    discipline?: NullableEnumMaterialDisciplineFieldUpdateOperationsInput | $Enums.MaterialDiscipline | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    standards?: RefMaterialUpdatestandardsInput | string[]
    fireRating?: NullableStringFieldUpdateOperationsInput | string | null
    keyProps?: RefMaterialUpdatekeyPropsInput | string[]
    aliases?: RefMaterialUpdatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefActivityMaterialCreateInput = {
    id?: string
    note?: string | null
    activity: RefActivityCreateNestedOneWithoutMaterialsInput
    material: RefMaterialCreateNestedOneWithoutActivityUsesInput
  }

  export type RefActivityMaterialUncheckedCreateInput = {
    id?: string
    activityId: string
    materialId: string
    note?: string | null
  }

  export type RefActivityMaterialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: RefActivityUpdateOneRequiredWithoutMaterialsNestedInput
    material?: RefMaterialUpdateOneRequiredWithoutActivityUsesNestedInput
  }

  export type RefActivityMaterialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefActivityMaterialCreateManyInput = {
    id?: string
    activityId: string
    materialId: string
    note?: string | null
  }

  export type RefActivityMaterialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefActivityMaterialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminAuditSettingCreateInput = {
    id?: number
    assignmentsEnabled?: boolean
    updatedByUserId?: string | null
    updatedByName?: string | null
    updatedAt?: Date | string
  }

  export type AdminAuditSettingUncheckedCreateInput = {
    id?: number
    assignmentsEnabled?: boolean
    updatedByUserId?: string | null
    updatedByName?: string | null
    updatedAt?: Date | string
  }

  export type AdminAuditSettingUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignmentsEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedByName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAuditSettingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignmentsEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedByName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAuditSettingCreateManyInput = {
    id?: number
    assignmentsEnabled?: boolean
    updatedByUserId?: string | null
    updatedByName?: string | null
    updatedAt?: Date | string
  }

  export type AdminAuditSettingUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignmentsEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedByName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAuditSettingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignmentsEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedByUserId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedByName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAuditLogCreateInput = {
    id?: string
    actorUserId: string
    actorName: string
    action: $Enums.AuditAction
    module?: string
    targetUserId: string
    role?: $Enums.UserRole | null
    scopeType?: $Enums.RoleScope | null
    companyId?: string | null
    projectId?: string | null
    ip?: string | null
    userAgent?: string | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AdminAuditLogUncheckedCreateInput = {
    id?: string
    actorUserId: string
    actorName: string
    action: $Enums.AuditAction
    module?: string
    targetUserId: string
    role?: $Enums.UserRole | null
    scopeType?: $Enums.RoleScope | null
    companyId?: string | null
    projectId?: string | null
    ip?: string | null
    userAgent?: string | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AdminAuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    actorName?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    module?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    scopeType?: NullableEnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    actorName?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    module?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    scopeType?: NullableEnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAuditLogCreateManyInput = {
    id?: string
    actorUserId: string
    actorName: string
    action: $Enums.AuditAction
    module?: string
    targetUserId: string
    role?: $Enums.UserRole | null
    scopeType?: $Enums.RoleScope | null
    companyId?: string | null
    projectId?: string | null
    ip?: string | null
    userAgent?: string | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AdminAuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    actorName?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    module?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    scopeType?: NullableEnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminAuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorUserId?: StringFieldUpdateOperationsInput | string
    actorName?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    module?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    scopeType?: NullableEnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumStateTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StateType | EnumStateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStateTypeFilter<$PrismaModel> | $Enums.StateType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DistrictListRelationFilter = {
    every?: DistrictWhereInput
    some?: DistrictWhereInput
    none?: DistrictWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type DistrictOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StateCountOrderByAggregateInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateMaxOrderByAggregateInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateMinOrderByAggregateInput = {
    stateId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumStateTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StateType | EnumStateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStateTypeWithAggregatesFilter<$PrismaModel> | $Enums.StateType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStateTypeFilter<$PrismaModel>
    _max?: NestedEnumStateTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StateRelationFilter = {
    is?: StateWhereInput
    isNot?: StateWhereInput
  }

  export type DistrictStateIdNameCompoundUniqueInput = {
    stateId: string
    name: string
  }

  export type DistrictCountOrderByAggregateInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistrictMaxOrderByAggregateInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistrictMinOrderByAggregateInput = {
    districtId?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumPreferredLanguageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PreferredLanguage | EnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel> | $Enums.PreferredLanguage | null
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type EnumOperatingZoneNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OperatingZone | EnumOperatingZoneFieldRefInput<$PrismaModel> | null
    in?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOperatingZoneNullableFilter<$PrismaModel> | $Enums.OperatingZone | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type EnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type StateNullableRelationFilter = {
    is?: StateWhereInput | null
    isNot?: StateWhereInput | null
  }

  export type DistrictNullableRelationFilter = {
    is?: DistrictWhereInput | null
    isNot?: DistrictWhereInput | null
  }

  export type UserProjectListRelationFilter = {
    every?: UserProjectWhereInput
    some?: UserProjectWhereInput
    none?: UserProjectWhereInput
  }

  export type UserCompanyListRelationFilter = {
    every?: UserCompanyWhereInput
    some?: UserCompanyWhereInput
    none?: UserCompanyWhereInput
  }

  export type UserRoleMembershipListRelationFilter = {
    every?: UserRoleMembershipWhereInput
    some?: UserRoleMembershipWhereInput
    none?: UserRoleMembershipWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRoleMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountryCodePhoneCompoundUniqueInput = {
    countryCode: string
    phone: string
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    preferredLanguage?: SortOrder
    profilePhoto?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    cityTown?: SortOrder
    pin?: SortOrder
    operatingZone?: SortOrder
    address?: SortOrder
    isClient?: SortOrder
    isServiceProvider?: SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrder
    isSuperAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    preferredLanguage?: SortOrder
    profilePhoto?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    cityTown?: SortOrder
    pin?: SortOrder
    operatingZone?: SortOrder
    address?: SortOrder
    isClient?: SortOrder
    isServiceProvider?: SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrder
    isSuperAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    code?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    preferredLanguage?: SortOrder
    profilePhoto?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    cityTown?: SortOrder
    pin?: SortOrder
    operatingZone?: SortOrder
    address?: SortOrder
    isClient?: SortOrder
    isServiceProvider?: SortOrder
    userStatus?: SortOrder
    passwordHash?: SortOrder
    isSuperAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRole?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumPreferredLanguageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PreferredLanguage | EnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPreferredLanguageNullableWithAggregatesFilter<$PrismaModel> | $Enums.PreferredLanguage | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel>
    _max?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumOperatingZoneNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OperatingZone | EnumOperatingZoneFieldRefInput<$PrismaModel> | null
    in?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOperatingZoneNullableWithAggregatesFilter<$PrismaModel> | $Enums.OperatingZone | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOperatingZoneNullableFilter<$PrismaModel>
    _max?: NestedEnumOperatingZoneNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type EnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type EnumCompanyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyStatus | EnumCompanyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyStatusFilter<$PrismaModel> | $Enums.CompanyStatus
  }

  export type EnumCompanyRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyRole | EnumCompanyRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompanyRoleNullableFilter<$PrismaModel> | $Enums.CompanyRole | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CompanyCountOrderByAggregateInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrder
    companyRole?: SortOrder
    gstin?: SortOrder
    pan?: SortOrder
    cin?: SortOrder
    primaryContact?: SortOrder
    contactMobile?: SortOrder
    contactEmail?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    address?: SortOrder
    pin?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    companyCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrder
    companyRole?: SortOrder
    gstin?: SortOrder
    pan?: SortOrder
    cin?: SortOrder
    primaryContact?: SortOrder
    contactMobile?: SortOrder
    contactEmail?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    address?: SortOrder
    pin?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    companyCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    companyId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    website?: SortOrder
    companyRole?: SortOrder
    gstin?: SortOrder
    pan?: SortOrder
    cin?: SortOrder
    primaryContact?: SortOrder
    contactMobile?: SortOrder
    contactEmail?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    address?: SortOrder
    pin?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    companyCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCompanyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyStatus | EnumCompanyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyStatusWithAggregatesFilter<$PrismaModel> | $Enums.CompanyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyStatusFilter<$PrismaModel>
    _max?: NestedEnumCompanyStatusFilter<$PrismaModel>
  }

  export type EnumCompanyRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyRole | EnumCompanyRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompanyRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.CompanyRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCompanyRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumCompanyRoleNullableFilter<$PrismaModel>
  }

  export type EnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type EnumProjectStageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStage | EnumProjectStageFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectStageNullableFilter<$PrismaModel> | $Enums.ProjectStage | null
  }

  export type EnumProjectTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectTypeNullableFilter<$PrismaModel> | $Enums.ProjectType | null
  }

  export type EnumStructureTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StructureType | EnumStructureTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStructureTypeNullableFilter<$PrismaModel> | $Enums.StructureType | null
  }

  export type EnumConstructionTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ConstructionType | EnumConstructionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConstructionTypeNullableFilter<$PrismaModel> | $Enums.ConstructionType | null
  }

  export type EnumContractTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContractTypeNullableFilter<$PrismaModel> | $Enums.ContractType | null
  }

  export type EnumProjectHealthFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectHealth | EnumProjectHealthFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectHealthFilter<$PrismaModel> | $Enums.ProjectHealth
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumCurrencyCodeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel> | $Enums.CurrencyCode | null
  }

  export type EnumAreaUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AreaUnit | EnumAreaUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAreaUnitNullableFilter<$PrismaModel> | $Enums.AreaUnit | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CompanyNullableRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type ProjectTagListRelationFilter = {
    every?: ProjectTagWhereInput
    some?: ProjectTagWhereInput
    none?: ProjectTagWhereInput
  }

  export type PermissionProjectOverrideListRelationFilter = {
    every?: PermissionProjectOverrideWhereInput
    some?: PermissionProjectOverrideWhereInput
    none?: PermissionProjectOverrideWhereInput
  }

  export type ProjectTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionProjectOverrideOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrder
    status?: SortOrder
    stage?: SortOrder
    projectType?: SortOrder
    structureType?: SortOrder
    constructionType?: SortOrder
    contractType?: SortOrder
    health?: SortOrder
    clientUserId?: SortOrder
    clientCompanyId?: SortOrder
    address?: SortOrder
    cityTown?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    pin?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    startDate?: SortOrder
    plannedCompletionDate?: SortOrder
    currency?: SortOrder
    contractValue?: SortOrder
    areaUnit?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    contractValue?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrder
    status?: SortOrder
    stage?: SortOrder
    projectType?: SortOrder
    structureType?: SortOrder
    constructionType?: SortOrder
    contractType?: SortOrder
    health?: SortOrder
    clientUserId?: SortOrder
    clientCompanyId?: SortOrder
    address?: SortOrder
    cityTown?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    pin?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    startDate?: SortOrder
    plannedCompletionDate?: SortOrder
    currency?: SortOrder
    contractValue?: SortOrder
    areaUnit?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    projectId?: SortOrder
    title?: SortOrder
    code?: SortOrder
    status?: SortOrder
    stage?: SortOrder
    projectType?: SortOrder
    structureType?: SortOrder
    constructionType?: SortOrder
    contractType?: SortOrder
    health?: SortOrder
    clientUserId?: SortOrder
    clientCompanyId?: SortOrder
    address?: SortOrder
    cityTown?: SortOrder
    stateId?: SortOrder
    districtId?: SortOrder
    pin?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    startDate?: SortOrder
    plannedCompletionDate?: SortOrder
    currency?: SortOrder
    contractValue?: SortOrder
    areaUnit?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    contractValue?: SortOrder
    plotArea?: SortOrder
    builtUpArea?: SortOrder
    floors?: SortOrder
  }

  export type EnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type EnumProjectStageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStage | EnumProjectStageFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectStageNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStage | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProjectStageNullableFilter<$PrismaModel>
    _max?: NestedEnumProjectStageNullableFilter<$PrismaModel>
  }

  export type EnumProjectTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProjectType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProjectTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumProjectTypeNullableFilter<$PrismaModel>
  }

  export type EnumStructureTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StructureType | EnumStructureTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStructureTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.StructureType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStructureTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumStructureTypeNullableFilter<$PrismaModel>
  }

  export type EnumConstructionTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConstructionType | EnumConstructionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConstructionTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ConstructionType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumConstructionTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumConstructionTypeNullableFilter<$PrismaModel>
  }

  export type EnumContractTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContractTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ContractType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumContractTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumContractTypeNullableFilter<$PrismaModel>
  }

  export type EnumProjectHealthWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectHealth | EnumProjectHealthFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectHealthWithAggregatesFilter<$PrismaModel> | $Enums.ProjectHealth
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectHealthFilter<$PrismaModel>
    _max?: NestedEnumProjectHealthFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyCode | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
    _max?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
  }

  export type EnumAreaUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AreaUnit | EnumAreaUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAreaUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.AreaUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAreaUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumAreaUnitNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type RefProjectTagCountOrderByAggregateInput = {
    tagCode?: SortOrder
    label?: SortOrder
  }

  export type RefProjectTagMaxOrderByAggregateInput = {
    tagCode?: SortOrder
    label?: SortOrder
  }

  export type RefProjectTagMinOrderByAggregateInput = {
    tagCode?: SortOrder
    label?: SortOrder
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type RefProjectTagRelationFilter = {
    is?: RefProjectTagWhereInput
    isNot?: RefProjectTagWhereInput
  }

  export type ProjectTagProjectIdTagCodeCompoundUniqueInput = {
    projectId: string
    tagCode: string
  }

  export type ProjectTagCountOrderByAggregateInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
  }

  export type ProjectTagMaxOrderByAggregateInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
  }

  export type ProjectTagMinOrderByAggregateInput = {
    projectId?: SortOrder
    tagCode?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserProjectUserIdProjectIdCompoundUniqueInput = {
    userId: string
    projectId: string
  }

  export type UserProjectCountOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserProjectMaxOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserProjectMinOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type UserCompanyUserIdCompanyIdCompoundUniqueInput = {
    userId: string
    companyId: string
  }

  export type UserCompanyCountOrderByAggregateInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCompanyMaxOrderByAggregateInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCompanyMinOrderByAggregateInput = {
    userId?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumRoleScopeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleScopeFilter<$PrismaModel> | $Enums.RoleScope
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type UserRoleMembershipUserIdProjectIdRoleValidFromValidToCompoundUniqueInput = {
    userId: string
    projectId: string
    role: $Enums.UserRole
    validFrom: Date | string
    validTo: Date | string
  }

  export type UserRoleMembershipCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    scopeType?: SortOrder
    companyId?: SortOrder
    projectId?: SortOrder
    isDefault?: SortOrder
    canApprove?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    createdBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRoleMembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    scopeType?: SortOrder
    companyId?: SortOrder
    projectId?: SortOrder
    isDefault?: SortOrder
    canApprove?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    createdBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRoleMembershipMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    scopeType?: SortOrder
    companyId?: SortOrder
    projectId?: SortOrder
    isDefault?: SortOrder
    canApprove?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    createdBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumRoleScopeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleScopeWithAggregatesFilter<$PrismaModel> | $Enums.RoleScope
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleScopeFilter<$PrismaModel>
    _max?: NestedEnumRoleScopeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PermissionTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type PermissionProjectOverrideProjectIdRoleCompoundUniqueInput = {
    projectId: string
    role: $Enums.UserRole
  }

  export type PermissionProjectOverrideCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionProjectOverrideMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionProjectOverrideMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionUserOverrideProjectIdUserIdCompoundUniqueInput = {
    projectId: string
    userId: string
  }

  export type PermissionUserOverrideCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    matrix?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionUserOverrideMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionUserOverrideMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDisciplineFilter<$PrismaModel = never> = {
    equals?: $Enums.Discipline | EnumDisciplineFieldRefInput<$PrismaModel>
    in?: $Enums.Discipline[] | ListEnumDisciplineFieldRefInput<$PrismaModel>
    notIn?: $Enums.Discipline[] | ListEnumDisciplineFieldRefInput<$PrismaModel>
    not?: NestedEnumDisciplineFilter<$PrismaModel> | $Enums.Discipline
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RefChecklistItemListRelationFilter = {
    every?: RefChecklistItemWhereInput
    some?: RefChecklistItemWhereInput
    none?: RefChecklistItemWhereInput
  }

  export type RefChecklistItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefChecklistCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrder
    tags?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    aiDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefChecklistAvgOrderByAggregateInput = {
    version?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
  }

  export type RefChecklistMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    aiDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefChecklistMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    aiDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefChecklistSumOrderByAggregateInput = {
    version?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
  }

  export type EnumDisciplineWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Discipline | EnumDisciplineFieldRefInput<$PrismaModel>
    in?: $Enums.Discipline[] | ListEnumDisciplineFieldRefInput<$PrismaModel>
    notIn?: $Enums.Discipline[] | ListEnumDisciplineFieldRefInput<$PrismaModel>
    not?: NestedEnumDisciplineWithAggregatesFilter<$PrismaModel> | $Enums.Discipline
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDisciplineFilter<$PrismaModel>
    _max?: NestedEnumDisciplineFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type RefChecklistRelationFilter = {
    is?: RefChecklistWhereInput
    isNot?: RefChecklistWhereInput
  }

  export type RefChecklistItemActivityLinkListRelationFilter = {
    every?: RefChecklistItemActivityLinkWhereInput
    some?: RefChecklistItemActivityLinkWhereInput
    none?: RefChecklistItemActivityLinkWhereInput
  }

  export type RefChecklistItemMaterialLinkListRelationFilter = {
    every?: RefChecklistItemMaterialLinkWhereInput
    some?: RefChecklistItemMaterialLinkWhereInput
    none?: RefChecklistItemMaterialLinkWhereInput
  }

  export type RefChecklistItemActivityLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefChecklistItemMaterialLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefChecklistItemCountOrderByAggregateInput = {
    id?: SortOrder
    checklistId?: SortOrder
    seq?: SortOrder
    text?: SortOrder
    requirement?: SortOrder
    method?: SortOrder
    risk?: SortOrder
    tags?: SortOrder
    itemCode?: SortOrder
    critical?: SortOrder
    aiEnabled?: SortOrder
    aiConfidence?: SortOrder
    units?: SortOrder
    tolerance?: SortOrder
    base?: SortOrder
    plus?: SortOrder
    minus?: SortOrder
  }

  export type RefChecklistItemAvgOrderByAggregateInput = {
    seq?: SortOrder
    aiConfidence?: SortOrder
    base?: SortOrder
    plus?: SortOrder
    minus?: SortOrder
  }

  export type RefChecklistItemMaxOrderByAggregateInput = {
    id?: SortOrder
    checklistId?: SortOrder
    seq?: SortOrder
    text?: SortOrder
    requirement?: SortOrder
    risk?: SortOrder
    itemCode?: SortOrder
    critical?: SortOrder
    aiEnabled?: SortOrder
    aiConfidence?: SortOrder
    units?: SortOrder
    tolerance?: SortOrder
    base?: SortOrder
    plus?: SortOrder
    minus?: SortOrder
  }

  export type RefChecklistItemMinOrderByAggregateInput = {
    id?: SortOrder
    checklistId?: SortOrder
    seq?: SortOrder
    text?: SortOrder
    requirement?: SortOrder
    risk?: SortOrder
    itemCode?: SortOrder
    critical?: SortOrder
    aiEnabled?: SortOrder
    aiConfidence?: SortOrder
    units?: SortOrder
    tolerance?: SortOrder
    base?: SortOrder
    plus?: SortOrder
    minus?: SortOrder
  }

  export type RefChecklistItemSumOrderByAggregateInput = {
    seq?: SortOrder
    aiConfidence?: SortOrder
    base?: SortOrder
    plus?: SortOrder
    minus?: SortOrder
  }

  export type RefChecklistItemRelationFilter = {
    is?: RefChecklistItemWhereInput
    isNot?: RefChecklistItemWhereInput
  }

  export type RefActivityNullableRelationFilter = {
    is?: RefActivityWhereInput | null
    isNot?: RefActivityWhereInput | null
  }

  export type RefChecklistItemActivityLinkCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    activityId?: SortOrder
    label?: SortOrder
    tags?: SortOrder
  }

  export type RefChecklistItemActivityLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    activityId?: SortOrder
    label?: SortOrder
  }

  export type RefChecklistItemActivityLinkMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    activityId?: SortOrder
    label?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type RefMaterialNullableRelationFilter = {
    is?: RefMaterialWhereInput | null
    isNot?: RefMaterialWhereInput | null
  }

  export type RefChecklistItemMaterialLinkCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    materialId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    properties?: SortOrder
  }

  export type RefChecklistItemMaterialLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    materialId?: SortOrder
    name?: SortOrder
    category?: SortOrder
  }

  export type RefChecklistItemMaterialLinkMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    materialId?: SortOrder
    name?: SortOrder
    category?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type RefActivityMaterialListRelationFilter = {
    every?: RefActivityMaterialWhereInput
    some?: RefActivityMaterialWhereInput
    none?: RefActivityMaterialWhereInput
  }

  export type RefActivityMaterialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefActivityDisciplineStageLabelTitleCompoundUniqueInput = {
    discipline: $Enums.Discipline
    stageLabel: string
    title: string
  }

  export type RefActivityCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrder
    phase?: SortOrder
    element?: SortOrder
    system?: SortOrder
    nature?: SortOrder
    method?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefActivityAvgOrderByAggregateInput = {
    version?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
  }

  export type RefActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefActivityMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    discipline?: SortOrder
    stageLabel?: SortOrder
    status?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefActivitySumOrderByAggregateInput = {
    version?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
  }

  export type EnumMaterialDisciplineNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialDiscipline | EnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaterialDiscipline[] | ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaterialDiscipline[] | ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaterialDisciplineNullableFilter<$PrismaModel> | $Enums.MaterialDiscipline | null
  }

  export type RefMaterialCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    discipline?: SortOrder
    category?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    standards?: SortOrder
    fireRating?: SortOrder
    keyProps?: SortOrder
    aliases?: SortOrder
    properties?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefMaterialAvgOrderByAggregateInput = {
    version?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
  }

  export type RefMaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    discipline?: SortOrder
    category?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    fireRating?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefMaterialMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    discipline?: SortOrder
    category?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    fireRating?: SortOrder
    version?: SortOrder
    versionLabel?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefMaterialSumOrderByAggregateInput = {
    version?: SortOrder
    versionMajor?: SortOrder
    versionMinor?: SortOrder
    versionPatch?: SortOrder
  }

  export type EnumMaterialDisciplineNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialDiscipline | EnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaterialDiscipline[] | ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaterialDiscipline[] | ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaterialDisciplineNullableWithAggregatesFilter<$PrismaModel> | $Enums.MaterialDiscipline | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMaterialDisciplineNullableFilter<$PrismaModel>
    _max?: NestedEnumMaterialDisciplineNullableFilter<$PrismaModel>
  }

  export type RefActivityRelationFilter = {
    is?: RefActivityWhereInput
    isNot?: RefActivityWhereInput
  }

  export type RefMaterialRelationFilter = {
    is?: RefMaterialWhereInput
    isNot?: RefMaterialWhereInput
  }

  export type RefActivityMaterialActivityIdMaterialIdCompoundUniqueInput = {
    activityId: string
    materialId: string
  }

  export type RefActivityMaterialCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    materialId?: SortOrder
    note?: SortOrder
  }

  export type RefActivityMaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    materialId?: SortOrder
    note?: SortOrder
  }

  export type RefActivityMaterialMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    materialId?: SortOrder
    note?: SortOrder
  }

  export type AdminAuditSettingCountOrderByAggregateInput = {
    id?: SortOrder
    assignmentsEnabled?: SortOrder
    updatedByUserId?: SortOrder
    updatedByName?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminAuditSettingAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminAuditSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    assignmentsEnabled?: SortOrder
    updatedByUserId?: SortOrder
    updatedByName?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminAuditSettingMinOrderByAggregateInput = {
    id?: SortOrder
    assignmentsEnabled?: SortOrder
    updatedByUserId?: SortOrder
    updatedByName?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminAuditSettingSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumAuditActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionFilter<$PrismaModel> | $Enums.AuditAction
  }

  export type EnumRoleScopeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleScopeNullableFilter<$PrismaModel> | $Enums.RoleScope | null
  }

  export type AdminAuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    actorUserId?: SortOrder
    actorName?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetUserId?: SortOrder
    role?: SortOrder
    scopeType?: SortOrder
    companyId?: SortOrder
    projectId?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    before?: SortOrder
    after?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminAuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    actorUserId?: SortOrder
    actorName?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetUserId?: SortOrder
    role?: SortOrder
    scopeType?: SortOrder
    companyId?: SortOrder
    projectId?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminAuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    actorUserId?: SortOrder
    actorName?: SortOrder
    action?: SortOrder
    module?: SortOrder
    targetUserId?: SortOrder
    role?: SortOrder
    scopeType?: SortOrder
    companyId?: SortOrder
    projectId?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumAuditActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditActionFilter<$PrismaModel>
    _max?: NestedEnumAuditActionFilter<$PrismaModel>
  }

  export type EnumRoleScopeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleScopeNullableWithAggregatesFilter<$PrismaModel> | $Enums.RoleScope | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleScopeNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleScopeNullableFilter<$PrismaModel>
  }

  export type DistrictCreateNestedManyWithoutStateInput = {
    create?: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput> | DistrictCreateWithoutStateInput[] | DistrictUncheckedCreateWithoutStateInput[]
    connectOrCreate?: DistrictCreateOrConnectWithoutStateInput | DistrictCreateOrConnectWithoutStateInput[]
    createMany?: DistrictCreateManyStateInputEnvelope
    connect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStateInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutStateInput = {
    create?: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput> | CompanyCreateWithoutStateInput[] | CompanyUncheckedCreateWithoutStateInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutStateInput | CompanyCreateOrConnectWithoutStateInput[]
    createMany?: CompanyCreateManyStateInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutStateInput = {
    create?: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput> | ProjectCreateWithoutStateInput[] | ProjectUncheckedCreateWithoutStateInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStateInput | ProjectCreateOrConnectWithoutStateInput[]
    createMany?: ProjectCreateManyStateInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type DistrictUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput> | DistrictCreateWithoutStateInput[] | DistrictUncheckedCreateWithoutStateInput[]
    connectOrCreate?: DistrictCreateOrConnectWithoutStateInput | DistrictCreateOrConnectWithoutStateInput[]
    createMany?: DistrictCreateManyStateInputEnvelope
    connect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput> | CompanyCreateWithoutStateInput[] | CompanyUncheckedCreateWithoutStateInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutStateInput | CompanyCreateOrConnectWithoutStateInput[]
    createMany?: CompanyCreateManyStateInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput> | ProjectCreateWithoutStateInput[] | ProjectUncheckedCreateWithoutStateInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStateInput | ProjectCreateOrConnectWithoutStateInput[]
    createMany?: ProjectCreateManyStateInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumStateTypeFieldUpdateOperationsInput = {
    set?: $Enums.StateType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DistrictUpdateManyWithoutStateNestedInput = {
    create?: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput> | DistrictCreateWithoutStateInput[] | DistrictUncheckedCreateWithoutStateInput[]
    connectOrCreate?: DistrictCreateOrConnectWithoutStateInput | DistrictCreateOrConnectWithoutStateInput[]
    upsert?: DistrictUpsertWithWhereUniqueWithoutStateInput | DistrictUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: DistrictCreateManyStateInputEnvelope
    set?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    disconnect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    delete?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    connect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    update?: DistrictUpdateWithWhereUniqueWithoutStateInput | DistrictUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: DistrictUpdateManyWithWhereWithoutStateInput | DistrictUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: DistrictScalarWhereInput | DistrictScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStateNestedInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStateInput | UserUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStateInput | UserUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStateInput | UserUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutStateNestedInput = {
    create?: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput> | CompanyCreateWithoutStateInput[] | CompanyUncheckedCreateWithoutStateInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutStateInput | CompanyCreateOrConnectWithoutStateInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutStateInput | CompanyUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: CompanyCreateManyStateInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutStateInput | CompanyUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutStateInput | CompanyUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutStateNestedInput = {
    create?: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput> | ProjectCreateWithoutStateInput[] | ProjectUncheckedCreateWithoutStateInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStateInput | ProjectCreateOrConnectWithoutStateInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutStateInput | ProjectUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: ProjectCreateManyStateInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutStateInput | ProjectUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutStateInput | ProjectUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type DistrictUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput> | DistrictCreateWithoutStateInput[] | DistrictUncheckedCreateWithoutStateInput[]
    connectOrCreate?: DistrictCreateOrConnectWithoutStateInput | DistrictCreateOrConnectWithoutStateInput[]
    upsert?: DistrictUpsertWithWhereUniqueWithoutStateInput | DistrictUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: DistrictCreateManyStateInputEnvelope
    set?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    disconnect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    delete?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    connect?: DistrictWhereUniqueInput | DistrictWhereUniqueInput[]
    update?: DistrictUpdateWithWhereUniqueWithoutStateInput | DistrictUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: DistrictUpdateManyWithWhereWithoutStateInput | DistrictUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: DistrictScalarWhereInput | DistrictScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput> | UserCreateWithoutStateInput[] | UserUncheckedCreateWithoutStateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStateInput | UserCreateOrConnectWithoutStateInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStateInput | UserUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: UserCreateManyStateInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStateInput | UserUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStateInput | UserUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput> | CompanyCreateWithoutStateInput[] | CompanyUncheckedCreateWithoutStateInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutStateInput | CompanyCreateOrConnectWithoutStateInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutStateInput | CompanyUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: CompanyCreateManyStateInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutStateInput | CompanyUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutStateInput | CompanyUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutStateNestedInput = {
    create?: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput> | ProjectCreateWithoutStateInput[] | ProjectUncheckedCreateWithoutStateInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStateInput | ProjectCreateOrConnectWithoutStateInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutStateInput | ProjectUpsertWithWhereUniqueWithoutStateInput[]
    createMany?: ProjectCreateManyStateInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutStateInput | ProjectUpdateWithWhereUniqueWithoutStateInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutStateInput | ProjectUpdateManyWithWhereWithoutStateInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type StateCreateNestedOneWithoutDistrictsInput = {
    create?: XOR<StateCreateWithoutDistrictsInput, StateUncheckedCreateWithoutDistrictsInput>
    connectOrCreate?: StateCreateOrConnectWithoutDistrictsInput
    connect?: StateWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutDistrictInput = {
    create?: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput> | UserCreateWithoutDistrictInput[] | UserUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDistrictInput | UserCreateOrConnectWithoutDistrictInput[]
    createMany?: UserCreateManyDistrictInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutDistrictInput = {
    create?: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput> | CompanyCreateWithoutDistrictInput[] | CompanyUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutDistrictInput | CompanyCreateOrConnectWithoutDistrictInput[]
    createMany?: CompanyCreateManyDistrictInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutDistrictInput = {
    create?: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput> | ProjectCreateWithoutDistrictInput[] | ProjectUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutDistrictInput | ProjectCreateOrConnectWithoutDistrictInput[]
    createMany?: ProjectCreateManyDistrictInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput> | UserCreateWithoutDistrictInput[] | UserUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDistrictInput | UserCreateOrConnectWithoutDistrictInput[]
    createMany?: UserCreateManyDistrictInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput> | CompanyCreateWithoutDistrictInput[] | CompanyUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutDistrictInput | CompanyCreateOrConnectWithoutDistrictInput[]
    createMany?: CompanyCreateManyDistrictInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutDistrictInput = {
    create?: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput> | ProjectCreateWithoutDistrictInput[] | ProjectUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutDistrictInput | ProjectCreateOrConnectWithoutDistrictInput[]
    createMany?: ProjectCreateManyDistrictInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type StateUpdateOneRequiredWithoutDistrictsNestedInput = {
    create?: XOR<StateCreateWithoutDistrictsInput, StateUncheckedCreateWithoutDistrictsInput>
    connectOrCreate?: StateCreateOrConnectWithoutDistrictsInput
    upsert?: StateUpsertWithoutDistrictsInput
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutDistrictsInput, StateUpdateWithoutDistrictsInput>, StateUncheckedUpdateWithoutDistrictsInput>
  }

  export type UserUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput> | UserCreateWithoutDistrictInput[] | UserUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDistrictInput | UserCreateOrConnectWithoutDistrictInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDistrictInput | UserUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: UserCreateManyDistrictInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDistrictInput | UserUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDistrictInput | UserUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput> | CompanyCreateWithoutDistrictInput[] | CompanyUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutDistrictInput | CompanyCreateOrConnectWithoutDistrictInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutDistrictInput | CompanyUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: CompanyCreateManyDistrictInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutDistrictInput | CompanyUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutDistrictInput | CompanyUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput> | ProjectCreateWithoutDistrictInput[] | ProjectUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutDistrictInput | ProjectCreateOrConnectWithoutDistrictInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutDistrictInput | ProjectUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: ProjectCreateManyDistrictInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutDistrictInput | ProjectUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutDistrictInput | ProjectUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput> | UserCreateWithoutDistrictInput[] | UserUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDistrictInput | UserCreateOrConnectWithoutDistrictInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDistrictInput | UserUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: UserCreateManyDistrictInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDistrictInput | UserUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDistrictInput | UserUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput> | CompanyCreateWithoutDistrictInput[] | CompanyUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutDistrictInput | CompanyCreateOrConnectWithoutDistrictInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutDistrictInput | CompanyUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: CompanyCreateManyDistrictInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutDistrictInput | CompanyUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutDistrictInput | CompanyUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutDistrictNestedInput = {
    create?: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput> | ProjectCreateWithoutDistrictInput[] | ProjectUncheckedCreateWithoutDistrictInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutDistrictInput | ProjectCreateOrConnectWithoutDistrictInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutDistrictInput | ProjectUpsertWithWhereUniqueWithoutDistrictInput[]
    createMany?: ProjectCreateManyDistrictInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutDistrictInput | ProjectUpdateWithWhereUniqueWithoutDistrictInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutDistrictInput | ProjectUpdateManyWithWhereWithoutDistrictInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type StateCreateNestedOneWithoutUsersInput = {
    create?: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StateCreateOrConnectWithoutUsersInput
    connect?: StateWhereUniqueInput
  }

  export type DistrictCreateNestedOneWithoutUsersInput = {
    create?: XOR<DistrictCreateWithoutUsersInput, DistrictUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutUsersInput
    connect?: DistrictWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutClientUserInput = {
    create?: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput> | ProjectCreateWithoutClientUserInput[] | ProjectUncheckedCreateWithoutClientUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientUserInput | ProjectCreateOrConnectWithoutClientUserInput[]
    createMany?: ProjectCreateManyClientUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutServiceProviderInput = {
    create?: XOR<CompanyCreateWithoutServiceProviderInput, CompanyUncheckedCreateWithoutServiceProviderInput> | CompanyCreateWithoutServiceProviderInput[] | CompanyUncheckedCreateWithoutServiceProviderInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutServiceProviderInput | CompanyCreateOrConnectWithoutServiceProviderInput[]
    createMany?: CompanyCreateManyServiceProviderInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type UserProjectCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput> | UserProjectCreateWithoutUserInput[] | UserProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutUserInput | UserProjectCreateOrConnectWithoutUserInput[]
    createMany?: UserProjectCreateManyUserInputEnvelope
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
  }

  export type UserCompanyCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput> | UserCompanyCreateWithoutUserInput[] | UserCompanyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutUserInput | UserCompanyCreateOrConnectWithoutUserInput[]
    createMany?: UserCompanyCreateManyUserInputEnvelope
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
  }

  export type UserRoleMembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleMembershipCreateWithoutUserInput, UserRoleMembershipUncheckedCreateWithoutUserInput> | UserRoleMembershipCreateWithoutUserInput[] | UserRoleMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutUserInput | UserRoleMembershipCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleMembershipCreateManyUserInputEnvelope
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutClientUserInput = {
    create?: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput> | ProjectCreateWithoutClientUserInput[] | ProjectUncheckedCreateWithoutClientUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientUserInput | ProjectCreateOrConnectWithoutClientUserInput[]
    createMany?: ProjectCreateManyClientUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutServiceProviderInput = {
    create?: XOR<CompanyCreateWithoutServiceProviderInput, CompanyUncheckedCreateWithoutServiceProviderInput> | CompanyCreateWithoutServiceProviderInput[] | CompanyUncheckedCreateWithoutServiceProviderInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutServiceProviderInput | CompanyCreateOrConnectWithoutServiceProviderInput[]
    createMany?: CompanyCreateManyServiceProviderInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type UserProjectUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput> | UserProjectCreateWithoutUserInput[] | UserProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutUserInput | UserProjectCreateOrConnectWithoutUserInput[]
    createMany?: UserProjectCreateManyUserInputEnvelope
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
  }

  export type UserCompanyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput> | UserCompanyCreateWithoutUserInput[] | UserCompanyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutUserInput | UserCompanyCreateOrConnectWithoutUserInput[]
    createMany?: UserCompanyCreateManyUserInputEnvelope
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
  }

  export type UserRoleMembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleMembershipCreateWithoutUserInput, UserRoleMembershipUncheckedCreateWithoutUserInput> | UserRoleMembershipCreateWithoutUserInput[] | UserRoleMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutUserInput | UserRoleMembershipCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleMembershipCreateManyUserInputEnvelope
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumPreferredLanguageFieldUpdateOperationsInput = {
    set?: $Enums.PreferredLanguage | null
  }

  export type NullableEnumOperatingZoneFieldUpdateOperationsInput = {
    set?: $Enums.OperatingZone | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type NullableEnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole | null
  }

  export type StateUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StateCreateOrConnectWithoutUsersInput
    upsert?: StateUpsertWithoutUsersInput
    disconnect?: StateWhereInput | boolean
    delete?: StateWhereInput | boolean
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutUsersInput, StateUpdateWithoutUsersInput>, StateUncheckedUpdateWithoutUsersInput>
  }

  export type DistrictUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DistrictCreateWithoutUsersInput, DistrictUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutUsersInput
    upsert?: DistrictUpsertWithoutUsersInput
    disconnect?: DistrictWhereInput | boolean
    delete?: DistrictWhereInput | boolean
    connect?: DistrictWhereUniqueInput
    update?: XOR<XOR<DistrictUpdateToOneWithWhereWithoutUsersInput, DistrictUpdateWithoutUsersInput>, DistrictUncheckedUpdateWithoutUsersInput>
  }

  export type ProjectUpdateManyWithoutClientUserNestedInput = {
    create?: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput> | ProjectCreateWithoutClientUserInput[] | ProjectUncheckedCreateWithoutClientUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientUserInput | ProjectCreateOrConnectWithoutClientUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientUserInput | ProjectUpsertWithWhereUniqueWithoutClientUserInput[]
    createMany?: ProjectCreateManyClientUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientUserInput | ProjectUpdateWithWhereUniqueWithoutClientUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientUserInput | ProjectUpdateManyWithWhereWithoutClientUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutServiceProviderNestedInput = {
    create?: XOR<CompanyCreateWithoutServiceProviderInput, CompanyUncheckedCreateWithoutServiceProviderInput> | CompanyCreateWithoutServiceProviderInput[] | CompanyUncheckedCreateWithoutServiceProviderInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutServiceProviderInput | CompanyCreateOrConnectWithoutServiceProviderInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutServiceProviderInput | CompanyUpsertWithWhereUniqueWithoutServiceProviderInput[]
    createMany?: CompanyCreateManyServiceProviderInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutServiceProviderInput | CompanyUpdateWithWhereUniqueWithoutServiceProviderInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutServiceProviderInput | CompanyUpdateManyWithWhereWithoutServiceProviderInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type UserProjectUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput> | UserProjectCreateWithoutUserInput[] | UserProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutUserInput | UserProjectCreateOrConnectWithoutUserInput[]
    upsert?: UserProjectUpsertWithWhereUniqueWithoutUserInput | UserProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProjectCreateManyUserInputEnvelope
    set?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    disconnect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    delete?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    update?: UserProjectUpdateWithWhereUniqueWithoutUserInput | UserProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProjectUpdateManyWithWhereWithoutUserInput | UserProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
  }

  export type UserCompanyUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput> | UserCompanyCreateWithoutUserInput[] | UserCompanyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutUserInput | UserCompanyCreateOrConnectWithoutUserInput[]
    upsert?: UserCompanyUpsertWithWhereUniqueWithoutUserInput | UserCompanyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCompanyCreateManyUserInputEnvelope
    set?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    disconnect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    delete?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    update?: UserCompanyUpdateWithWhereUniqueWithoutUserInput | UserCompanyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCompanyUpdateManyWithWhereWithoutUserInput | UserCompanyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
  }

  export type UserRoleMembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleMembershipCreateWithoutUserInput, UserRoleMembershipUncheckedCreateWithoutUserInput> | UserRoleMembershipCreateWithoutUserInput[] | UserRoleMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutUserInput | UserRoleMembershipCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleMembershipUpsertWithWhereUniqueWithoutUserInput | UserRoleMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleMembershipCreateManyUserInputEnvelope
    set?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    disconnect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    delete?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    update?: UserRoleMembershipUpdateWithWhereUniqueWithoutUserInput | UserRoleMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleMembershipUpdateManyWithWhereWithoutUserInput | UserRoleMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleMembershipScalarWhereInput | UserRoleMembershipScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutClientUserNestedInput = {
    create?: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput> | ProjectCreateWithoutClientUserInput[] | ProjectUncheckedCreateWithoutClientUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientUserInput | ProjectCreateOrConnectWithoutClientUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientUserInput | ProjectUpsertWithWhereUniqueWithoutClientUserInput[]
    createMany?: ProjectCreateManyClientUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientUserInput | ProjectUpdateWithWhereUniqueWithoutClientUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientUserInput | ProjectUpdateManyWithWhereWithoutClientUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutServiceProviderNestedInput = {
    create?: XOR<CompanyCreateWithoutServiceProviderInput, CompanyUncheckedCreateWithoutServiceProviderInput> | CompanyCreateWithoutServiceProviderInput[] | CompanyUncheckedCreateWithoutServiceProviderInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutServiceProviderInput | CompanyCreateOrConnectWithoutServiceProviderInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutServiceProviderInput | CompanyUpsertWithWhereUniqueWithoutServiceProviderInput[]
    createMany?: CompanyCreateManyServiceProviderInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutServiceProviderInput | CompanyUpdateWithWhereUniqueWithoutServiceProviderInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutServiceProviderInput | CompanyUpdateManyWithWhereWithoutServiceProviderInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type UserProjectUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput> | UserProjectCreateWithoutUserInput[] | UserProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutUserInput | UserProjectCreateOrConnectWithoutUserInput[]
    upsert?: UserProjectUpsertWithWhereUniqueWithoutUserInput | UserProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProjectCreateManyUserInputEnvelope
    set?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    disconnect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    delete?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    update?: UserProjectUpdateWithWhereUniqueWithoutUserInput | UserProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProjectUpdateManyWithWhereWithoutUserInput | UserProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
  }

  export type UserCompanyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput> | UserCompanyCreateWithoutUserInput[] | UserCompanyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutUserInput | UserCompanyCreateOrConnectWithoutUserInput[]
    upsert?: UserCompanyUpsertWithWhereUniqueWithoutUserInput | UserCompanyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCompanyCreateManyUserInputEnvelope
    set?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    disconnect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    delete?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    update?: UserCompanyUpdateWithWhereUniqueWithoutUserInput | UserCompanyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCompanyUpdateManyWithWhereWithoutUserInput | UserCompanyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
  }

  export type UserRoleMembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleMembershipCreateWithoutUserInput, UserRoleMembershipUncheckedCreateWithoutUserInput> | UserRoleMembershipCreateWithoutUserInput[] | UserRoleMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutUserInput | UserRoleMembershipCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleMembershipUpsertWithWhereUniqueWithoutUserInput | UserRoleMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleMembershipCreateManyUserInputEnvelope
    set?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    disconnect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    delete?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    update?: UserRoleMembershipUpdateWithWhereUniqueWithoutUserInput | UserRoleMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleMembershipUpdateManyWithWhereWithoutUserInput | UserRoleMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleMembershipScalarWhereInput | UserRoleMembershipScalarWhereInput[]
  }

  export type StateCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<StateCreateWithoutCompaniesInput, StateUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: StateCreateOrConnectWithoutCompaniesInput
    connect?: StateWhereUniqueInput
  }

  export type DistrictCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<DistrictCreateWithoutCompaniesInput, DistrictUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutCompaniesInput
    connect?: DistrictWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCompaniesAsServiceProviderInput = {
    create?: XOR<UserCreateWithoutCompaniesAsServiceProviderInput, UserUncheckedCreateWithoutCompaniesAsServiceProviderInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompaniesAsServiceProviderInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutClientCompanyInput = {
    create?: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput> | ProjectCreateWithoutClientCompanyInput[] | ProjectUncheckedCreateWithoutClientCompanyInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientCompanyInput | ProjectCreateOrConnectWithoutClientCompanyInput[]
    createMany?: ProjectCreateManyClientCompanyInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserCompanyCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput> | UserCompanyCreateWithoutCompanyInput[] | UserCompanyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutCompanyInput | UserCompanyCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCompanyCreateManyCompanyInputEnvelope
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
  }

  export type UserRoleMembershipCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserRoleMembershipCreateWithoutCompanyInput, UserRoleMembershipUncheckedCreateWithoutCompanyInput> | UserRoleMembershipCreateWithoutCompanyInput[] | UserRoleMembershipUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutCompanyInput | UserRoleMembershipCreateOrConnectWithoutCompanyInput[]
    createMany?: UserRoleMembershipCreateManyCompanyInputEnvelope
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutClientCompanyInput = {
    create?: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput> | ProjectCreateWithoutClientCompanyInput[] | ProjectUncheckedCreateWithoutClientCompanyInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientCompanyInput | ProjectCreateOrConnectWithoutClientCompanyInput[]
    createMany?: ProjectCreateManyClientCompanyInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserCompanyUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput> | UserCompanyCreateWithoutCompanyInput[] | UserCompanyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutCompanyInput | UserCompanyCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCompanyCreateManyCompanyInputEnvelope
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
  }

  export type UserRoleMembershipUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserRoleMembershipCreateWithoutCompanyInput, UserRoleMembershipUncheckedCreateWithoutCompanyInput> | UserRoleMembershipCreateWithoutCompanyInput[] | UserRoleMembershipUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutCompanyInput | UserRoleMembershipCreateOrConnectWithoutCompanyInput[]
    createMany?: UserRoleMembershipCreateManyCompanyInputEnvelope
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
  }

  export type EnumCompanyStatusFieldUpdateOperationsInput = {
    set?: $Enums.CompanyStatus
  }

  export type NullableEnumCompanyRoleFieldUpdateOperationsInput = {
    set?: $Enums.CompanyRole | null
  }

  export type StateUpdateOneWithoutCompaniesNestedInput = {
    create?: XOR<StateCreateWithoutCompaniesInput, StateUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: StateCreateOrConnectWithoutCompaniesInput
    upsert?: StateUpsertWithoutCompaniesInput
    disconnect?: StateWhereInput | boolean
    delete?: StateWhereInput | boolean
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutCompaniesInput, StateUpdateWithoutCompaniesInput>, StateUncheckedUpdateWithoutCompaniesInput>
  }

  export type DistrictUpdateOneWithoutCompaniesNestedInput = {
    create?: XOR<DistrictCreateWithoutCompaniesInput, DistrictUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutCompaniesInput
    upsert?: DistrictUpsertWithoutCompaniesInput
    disconnect?: DistrictWhereInput | boolean
    delete?: DistrictWhereInput | boolean
    connect?: DistrictWhereUniqueInput
    update?: XOR<XOR<DistrictUpdateToOneWithWhereWithoutCompaniesInput, DistrictUpdateWithoutCompaniesInput>, DistrictUncheckedUpdateWithoutCompaniesInput>
  }

  export type UserUpdateOneWithoutCompaniesAsServiceProviderNestedInput = {
    create?: XOR<UserCreateWithoutCompaniesAsServiceProviderInput, UserUncheckedCreateWithoutCompaniesAsServiceProviderInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompaniesAsServiceProviderInput
    upsert?: UserUpsertWithoutCompaniesAsServiceProviderInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompaniesAsServiceProviderInput, UserUpdateWithoutCompaniesAsServiceProviderInput>, UserUncheckedUpdateWithoutCompaniesAsServiceProviderInput>
  }

  export type ProjectUpdateManyWithoutClientCompanyNestedInput = {
    create?: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput> | ProjectCreateWithoutClientCompanyInput[] | ProjectUncheckedCreateWithoutClientCompanyInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientCompanyInput | ProjectCreateOrConnectWithoutClientCompanyInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientCompanyInput | ProjectUpsertWithWhereUniqueWithoutClientCompanyInput[]
    createMany?: ProjectCreateManyClientCompanyInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientCompanyInput | ProjectUpdateWithWhereUniqueWithoutClientCompanyInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientCompanyInput | ProjectUpdateManyWithWhereWithoutClientCompanyInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserCompanyUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput> | UserCompanyCreateWithoutCompanyInput[] | UserCompanyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutCompanyInput | UserCompanyCreateOrConnectWithoutCompanyInput[]
    upsert?: UserCompanyUpsertWithWhereUniqueWithoutCompanyInput | UserCompanyUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCompanyCreateManyCompanyInputEnvelope
    set?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    disconnect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    delete?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    update?: UserCompanyUpdateWithWhereUniqueWithoutCompanyInput | UserCompanyUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserCompanyUpdateManyWithWhereWithoutCompanyInput | UserCompanyUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
  }

  export type UserRoleMembershipUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserRoleMembershipCreateWithoutCompanyInput, UserRoleMembershipUncheckedCreateWithoutCompanyInput> | UserRoleMembershipCreateWithoutCompanyInput[] | UserRoleMembershipUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutCompanyInput | UserRoleMembershipCreateOrConnectWithoutCompanyInput[]
    upsert?: UserRoleMembershipUpsertWithWhereUniqueWithoutCompanyInput | UserRoleMembershipUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserRoleMembershipCreateManyCompanyInputEnvelope
    set?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    disconnect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    delete?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    update?: UserRoleMembershipUpdateWithWhereUniqueWithoutCompanyInput | UserRoleMembershipUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserRoleMembershipUpdateManyWithWhereWithoutCompanyInput | UserRoleMembershipUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserRoleMembershipScalarWhereInput | UserRoleMembershipScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput = {
    create?: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput> | ProjectCreateWithoutClientCompanyInput[] | ProjectUncheckedCreateWithoutClientCompanyInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientCompanyInput | ProjectCreateOrConnectWithoutClientCompanyInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientCompanyInput | ProjectUpsertWithWhereUniqueWithoutClientCompanyInput[]
    createMany?: ProjectCreateManyClientCompanyInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientCompanyInput | ProjectUpdateWithWhereUniqueWithoutClientCompanyInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientCompanyInput | ProjectUpdateManyWithWhereWithoutClientCompanyInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput> | UserCompanyCreateWithoutCompanyInput[] | UserCompanyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCompanyCreateOrConnectWithoutCompanyInput | UserCompanyCreateOrConnectWithoutCompanyInput[]
    upsert?: UserCompanyUpsertWithWhereUniqueWithoutCompanyInput | UserCompanyUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCompanyCreateManyCompanyInputEnvelope
    set?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    disconnect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    delete?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    connect?: UserCompanyWhereUniqueInput | UserCompanyWhereUniqueInput[]
    update?: UserCompanyUpdateWithWhereUniqueWithoutCompanyInput | UserCompanyUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserCompanyUpdateManyWithWhereWithoutCompanyInput | UserCompanyUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
  }

  export type UserRoleMembershipUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserRoleMembershipCreateWithoutCompanyInput, UserRoleMembershipUncheckedCreateWithoutCompanyInput> | UserRoleMembershipCreateWithoutCompanyInput[] | UserRoleMembershipUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutCompanyInput | UserRoleMembershipCreateOrConnectWithoutCompanyInput[]
    upsert?: UserRoleMembershipUpsertWithWhereUniqueWithoutCompanyInput | UserRoleMembershipUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserRoleMembershipCreateManyCompanyInputEnvelope
    set?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    disconnect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    delete?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    update?: UserRoleMembershipUpdateWithWhereUniqueWithoutCompanyInput | UserRoleMembershipUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserRoleMembershipUpdateManyWithWhereWithoutCompanyInput | UserRoleMembershipUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserRoleMembershipScalarWhereInput | UserRoleMembershipScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectsAsClientInput = {
    create?: XOR<UserCreateWithoutProjectsAsClientInput, UserUncheckedCreateWithoutProjectsAsClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsAsClientInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutProjectsInput = {
    create?: XOR<CompanyCreateWithoutProjectsInput, CompanyUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutProjectsInput
    connect?: CompanyWhereUniqueInput
  }

  export type StateCreateNestedOneWithoutProjectsInput = {
    create?: XOR<StateCreateWithoutProjectsInput, StateUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: StateCreateOrConnectWithoutProjectsInput
    connect?: StateWhereUniqueInput
  }

  export type DistrictCreateNestedOneWithoutProjectsInput = {
    create?: XOR<DistrictCreateWithoutProjectsInput, DistrictUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutProjectsInput
    connect?: DistrictWhereUniqueInput
  }

  export type ProjectTagCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput> | ProjectTagCreateWithoutProjectInput[] | ProjectTagUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutProjectInput | ProjectTagCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectTagCreateManyProjectInputEnvelope
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
  }

  export type UserProjectCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput> | UserProjectCreateWithoutProjectInput[] | UserProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutProjectInput | UserProjectCreateOrConnectWithoutProjectInput[]
    createMany?: UserProjectCreateManyProjectInputEnvelope
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
  }

  export type UserRoleMembershipCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserRoleMembershipCreateWithoutProjectInput, UserRoleMembershipUncheckedCreateWithoutProjectInput> | UserRoleMembershipCreateWithoutProjectInput[] | UserRoleMembershipUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutProjectInput | UserRoleMembershipCreateOrConnectWithoutProjectInput[]
    createMany?: UserRoleMembershipCreateManyProjectInputEnvelope
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
  }

  export type PermissionProjectOverrideCreateNestedManyWithoutProjectInput = {
    create?: XOR<PermissionProjectOverrideCreateWithoutProjectInput, PermissionProjectOverrideUncheckedCreateWithoutProjectInput> | PermissionProjectOverrideCreateWithoutProjectInput[] | PermissionProjectOverrideUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PermissionProjectOverrideCreateOrConnectWithoutProjectInput | PermissionProjectOverrideCreateOrConnectWithoutProjectInput[]
    createMany?: PermissionProjectOverrideCreateManyProjectInputEnvelope
    connect?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
  }

  export type ProjectTagUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput> | ProjectTagCreateWithoutProjectInput[] | ProjectTagUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutProjectInput | ProjectTagCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectTagCreateManyProjectInputEnvelope
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
  }

  export type UserProjectUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput> | UserProjectCreateWithoutProjectInput[] | UserProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutProjectInput | UserProjectCreateOrConnectWithoutProjectInput[]
    createMany?: UserProjectCreateManyProjectInputEnvelope
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
  }

  export type UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserRoleMembershipCreateWithoutProjectInput, UserRoleMembershipUncheckedCreateWithoutProjectInput> | UserRoleMembershipCreateWithoutProjectInput[] | UserRoleMembershipUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutProjectInput | UserRoleMembershipCreateOrConnectWithoutProjectInput[]
    createMany?: UserRoleMembershipCreateManyProjectInputEnvelope
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
  }

  export type PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<PermissionProjectOverrideCreateWithoutProjectInput, PermissionProjectOverrideUncheckedCreateWithoutProjectInput> | PermissionProjectOverrideCreateWithoutProjectInput[] | PermissionProjectOverrideUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PermissionProjectOverrideCreateOrConnectWithoutProjectInput | PermissionProjectOverrideCreateOrConnectWithoutProjectInput[]
    createMany?: PermissionProjectOverrideCreateManyProjectInputEnvelope
    connect?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
  }

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStatus
  }

  export type NullableEnumProjectStageFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStage | null
  }

  export type NullableEnumProjectTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProjectType | null
  }

  export type NullableEnumStructureTypeFieldUpdateOperationsInput = {
    set?: $Enums.StructureType | null
  }

  export type NullableEnumConstructionTypeFieldUpdateOperationsInput = {
    set?: $Enums.ConstructionType | null
  }

  export type NullableEnumContractTypeFieldUpdateOperationsInput = {
    set?: $Enums.ContractType | null
  }

  export type EnumProjectHealthFieldUpdateOperationsInput = {
    set?: $Enums.ProjectHealth
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumCurrencyCodeFieldUpdateOperationsInput = {
    set?: $Enums.CurrencyCode | null
  }

  export type NullableEnumAreaUnitFieldUpdateOperationsInput = {
    set?: $Enums.AreaUnit | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutProjectsAsClientNestedInput = {
    create?: XOR<UserCreateWithoutProjectsAsClientInput, UserUncheckedCreateWithoutProjectsAsClientInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsAsClientInput
    upsert?: UserUpsertWithoutProjectsAsClientInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsAsClientInput, UserUpdateWithoutProjectsAsClientInput>, UserUncheckedUpdateWithoutProjectsAsClientInput>
  }

  export type CompanyUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<CompanyCreateWithoutProjectsInput, CompanyUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutProjectsInput
    upsert?: CompanyUpsertWithoutProjectsInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutProjectsInput, CompanyUpdateWithoutProjectsInput>, CompanyUncheckedUpdateWithoutProjectsInput>
  }

  export type StateUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<StateCreateWithoutProjectsInput, StateUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: StateCreateOrConnectWithoutProjectsInput
    upsert?: StateUpsertWithoutProjectsInput
    disconnect?: StateWhereInput | boolean
    delete?: StateWhereInput | boolean
    connect?: StateWhereUniqueInput
    update?: XOR<XOR<StateUpdateToOneWithWhereWithoutProjectsInput, StateUpdateWithoutProjectsInput>, StateUncheckedUpdateWithoutProjectsInput>
  }

  export type DistrictUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<DistrictCreateWithoutProjectsInput, DistrictUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: DistrictCreateOrConnectWithoutProjectsInput
    upsert?: DistrictUpsertWithoutProjectsInput
    disconnect?: DistrictWhereInput | boolean
    delete?: DistrictWhereInput | boolean
    connect?: DistrictWhereUniqueInput
    update?: XOR<XOR<DistrictUpdateToOneWithWhereWithoutProjectsInput, DistrictUpdateWithoutProjectsInput>, DistrictUncheckedUpdateWithoutProjectsInput>
  }

  export type ProjectTagUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput> | ProjectTagCreateWithoutProjectInput[] | ProjectTagUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutProjectInput | ProjectTagCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectTagUpsertWithWhereUniqueWithoutProjectInput | ProjectTagUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectTagCreateManyProjectInputEnvelope
    set?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    disconnect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    delete?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    update?: ProjectTagUpdateWithWhereUniqueWithoutProjectInput | ProjectTagUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectTagUpdateManyWithWhereWithoutProjectInput | ProjectTagUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
  }

  export type UserProjectUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput> | UserProjectCreateWithoutProjectInput[] | UserProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutProjectInput | UserProjectCreateOrConnectWithoutProjectInput[]
    upsert?: UserProjectUpsertWithWhereUniqueWithoutProjectInput | UserProjectUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserProjectCreateManyProjectInputEnvelope
    set?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    disconnect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    delete?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    update?: UserProjectUpdateWithWhereUniqueWithoutProjectInput | UserProjectUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserProjectUpdateManyWithWhereWithoutProjectInput | UserProjectUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
  }

  export type UserRoleMembershipUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserRoleMembershipCreateWithoutProjectInput, UserRoleMembershipUncheckedCreateWithoutProjectInput> | UserRoleMembershipCreateWithoutProjectInput[] | UserRoleMembershipUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutProjectInput | UserRoleMembershipCreateOrConnectWithoutProjectInput[]
    upsert?: UserRoleMembershipUpsertWithWhereUniqueWithoutProjectInput | UserRoleMembershipUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserRoleMembershipCreateManyProjectInputEnvelope
    set?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    disconnect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    delete?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    update?: UserRoleMembershipUpdateWithWhereUniqueWithoutProjectInput | UserRoleMembershipUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserRoleMembershipUpdateManyWithWhereWithoutProjectInput | UserRoleMembershipUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserRoleMembershipScalarWhereInput | UserRoleMembershipScalarWhereInput[]
  }

  export type PermissionProjectOverrideUpdateManyWithoutProjectNestedInput = {
    create?: XOR<PermissionProjectOverrideCreateWithoutProjectInput, PermissionProjectOverrideUncheckedCreateWithoutProjectInput> | PermissionProjectOverrideCreateWithoutProjectInput[] | PermissionProjectOverrideUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PermissionProjectOverrideCreateOrConnectWithoutProjectInput | PermissionProjectOverrideCreateOrConnectWithoutProjectInput[]
    upsert?: PermissionProjectOverrideUpsertWithWhereUniqueWithoutProjectInput | PermissionProjectOverrideUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: PermissionProjectOverrideCreateManyProjectInputEnvelope
    set?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
    disconnect?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
    delete?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
    connect?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
    update?: PermissionProjectOverrideUpdateWithWhereUniqueWithoutProjectInput | PermissionProjectOverrideUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: PermissionProjectOverrideUpdateManyWithWhereWithoutProjectInput | PermissionProjectOverrideUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: PermissionProjectOverrideScalarWhereInput | PermissionProjectOverrideScalarWhereInput[]
  }

  export type ProjectTagUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput> | ProjectTagCreateWithoutProjectInput[] | ProjectTagUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutProjectInput | ProjectTagCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectTagUpsertWithWhereUniqueWithoutProjectInput | ProjectTagUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectTagCreateManyProjectInputEnvelope
    set?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    disconnect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    delete?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    update?: ProjectTagUpdateWithWhereUniqueWithoutProjectInput | ProjectTagUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectTagUpdateManyWithWhereWithoutProjectInput | ProjectTagUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
  }

  export type UserProjectUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput> | UserProjectCreateWithoutProjectInput[] | UserProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectCreateOrConnectWithoutProjectInput | UserProjectCreateOrConnectWithoutProjectInput[]
    upsert?: UserProjectUpsertWithWhereUniqueWithoutProjectInput | UserProjectUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserProjectCreateManyProjectInputEnvelope
    set?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    disconnect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    delete?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    connect?: UserProjectWhereUniqueInput | UserProjectWhereUniqueInput[]
    update?: UserProjectUpdateWithWhereUniqueWithoutProjectInput | UserProjectUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserProjectUpdateManyWithWhereWithoutProjectInput | UserProjectUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
  }

  export type UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserRoleMembershipCreateWithoutProjectInput, UserRoleMembershipUncheckedCreateWithoutProjectInput> | UserRoleMembershipCreateWithoutProjectInput[] | UserRoleMembershipUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserRoleMembershipCreateOrConnectWithoutProjectInput | UserRoleMembershipCreateOrConnectWithoutProjectInput[]
    upsert?: UserRoleMembershipUpsertWithWhereUniqueWithoutProjectInput | UserRoleMembershipUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserRoleMembershipCreateManyProjectInputEnvelope
    set?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    disconnect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    delete?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    connect?: UserRoleMembershipWhereUniqueInput | UserRoleMembershipWhereUniqueInput[]
    update?: UserRoleMembershipUpdateWithWhereUniqueWithoutProjectInput | UserRoleMembershipUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserRoleMembershipUpdateManyWithWhereWithoutProjectInput | UserRoleMembershipUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserRoleMembershipScalarWhereInput | UserRoleMembershipScalarWhereInput[]
  }

  export type PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<PermissionProjectOverrideCreateWithoutProjectInput, PermissionProjectOverrideUncheckedCreateWithoutProjectInput> | PermissionProjectOverrideCreateWithoutProjectInput[] | PermissionProjectOverrideUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PermissionProjectOverrideCreateOrConnectWithoutProjectInput | PermissionProjectOverrideCreateOrConnectWithoutProjectInput[]
    upsert?: PermissionProjectOverrideUpsertWithWhereUniqueWithoutProjectInput | PermissionProjectOverrideUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: PermissionProjectOverrideCreateManyProjectInputEnvelope
    set?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
    disconnect?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
    delete?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
    connect?: PermissionProjectOverrideWhereUniqueInput | PermissionProjectOverrideWhereUniqueInput[]
    update?: PermissionProjectOverrideUpdateWithWhereUniqueWithoutProjectInput | PermissionProjectOverrideUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: PermissionProjectOverrideUpdateManyWithWhereWithoutProjectInput | PermissionProjectOverrideUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: PermissionProjectOverrideScalarWhereInput | PermissionProjectOverrideScalarWhereInput[]
  }

  export type ProjectTagCreateNestedManyWithoutTagInput = {
    create?: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput> | ProjectTagCreateWithoutTagInput[] | ProjectTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutTagInput | ProjectTagCreateOrConnectWithoutTagInput[]
    createMany?: ProjectTagCreateManyTagInputEnvelope
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
  }

  export type ProjectTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput> | ProjectTagCreateWithoutTagInput[] | ProjectTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutTagInput | ProjectTagCreateOrConnectWithoutTagInput[]
    createMany?: ProjectTagCreateManyTagInputEnvelope
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
  }

  export type ProjectTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput> | ProjectTagCreateWithoutTagInput[] | ProjectTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutTagInput | ProjectTagCreateOrConnectWithoutTagInput[]
    upsert?: ProjectTagUpsertWithWhereUniqueWithoutTagInput | ProjectTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: ProjectTagCreateManyTagInputEnvelope
    set?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    disconnect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    delete?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    update?: ProjectTagUpdateWithWhereUniqueWithoutTagInput | ProjectTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: ProjectTagUpdateManyWithWhereWithoutTagInput | ProjectTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
  }

  export type ProjectTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput> | ProjectTagCreateWithoutTagInput[] | ProjectTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProjectTagCreateOrConnectWithoutTagInput | ProjectTagCreateOrConnectWithoutTagInput[]
    upsert?: ProjectTagUpsertWithWhereUniqueWithoutTagInput | ProjectTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: ProjectTagCreateManyTagInputEnvelope
    set?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    disconnect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    delete?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    connect?: ProjectTagWhereUniqueInput | ProjectTagWhereUniqueInput[]
    update?: ProjectTagUpdateWithWhereUniqueWithoutTagInput | ProjectTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: ProjectTagUpdateManyWithWhereWithoutTagInput | ProjectTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutProjectTagsInput = {
    create?: XOR<ProjectCreateWithoutProjectTagsInput, ProjectUncheckedCreateWithoutProjectTagsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectTagsInput
    connect?: ProjectWhereUniqueInput
  }

  export type RefProjectTagCreateNestedOneWithoutTagsInput = {
    create?: XOR<RefProjectTagCreateWithoutTagsInput, RefProjectTagUncheckedCreateWithoutTagsInput>
    connectOrCreate?: RefProjectTagCreateOrConnectWithoutTagsInput
    connect?: RefProjectTagWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutProjectTagsNestedInput = {
    create?: XOR<ProjectCreateWithoutProjectTagsInput, ProjectUncheckedCreateWithoutProjectTagsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectTagsInput
    upsert?: ProjectUpsertWithoutProjectTagsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutProjectTagsInput, ProjectUpdateWithoutProjectTagsInput>, ProjectUncheckedUpdateWithoutProjectTagsInput>
  }

  export type RefProjectTagUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<RefProjectTagCreateWithoutTagsInput, RefProjectTagUncheckedCreateWithoutTagsInput>
    connectOrCreate?: RefProjectTagCreateOrConnectWithoutTagsInput
    upsert?: RefProjectTagUpsertWithoutTagsInput
    connect?: RefProjectTagWhereUniqueInput
    update?: XOR<XOR<RefProjectTagUpdateToOneWithWhereWithoutTagsInput, RefProjectTagUpdateWithoutTagsInput>, RefProjectTagUncheckedUpdateWithoutTagsInput>
  }

  export type UserCreateNestedOneWithoutUserProjectsInput = {
    create?: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutUserProjectsInput = {
    create?: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserProjectsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserProjectsNestedInput = {
    create?: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProjectsInput
    upsert?: UserUpsertWithoutUserProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserProjectsInput, UserUpdateWithoutUserProjectsInput>, UserUncheckedUpdateWithoutUserProjectsInput>
  }

  export type ProjectUpdateOneRequiredWithoutUserProjectsNestedInput = {
    create?: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserProjectsInput
    upsert?: ProjectUpsertWithoutUserProjectsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutUserProjectsInput, ProjectUpdateWithoutUserProjectsInput>, ProjectUncheckedUpdateWithoutUserProjectsInput>
  }

  export type UserCreateNestedOneWithoutUserCompaniesInput = {
    create?: XOR<UserCreateWithoutUserCompaniesInput, UserUncheckedCreateWithoutUserCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCompaniesInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutUserCompaniesInput = {
    create?: XOR<CompanyCreateWithoutUserCompaniesInput, CompanyUncheckedCreateWithoutUserCompaniesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserCompaniesInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserCompaniesNestedInput = {
    create?: XOR<UserCreateWithoutUserCompaniesInput, UserUncheckedCreateWithoutUserCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCompaniesInput
    upsert?: UserUpsertWithoutUserCompaniesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserCompaniesInput, UserUpdateWithoutUserCompaniesInput>, UserUncheckedUpdateWithoutUserCompaniesInput>
  }

  export type CompanyUpdateOneRequiredWithoutUserCompaniesNestedInput = {
    create?: XOR<CompanyCreateWithoutUserCompaniesInput, CompanyUncheckedCreateWithoutUserCompaniesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserCompaniesInput
    upsert?: CompanyUpsertWithoutUserCompaniesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserCompaniesInput, CompanyUpdateWithoutUserCompaniesInput>, CompanyUncheckedUpdateWithoutUserCompaniesInput>
  }

  export type UserCreateNestedOneWithoutUserRoleMembershipsInput = {
    create?: XOR<UserCreateWithoutUserRoleMembershipsInput, UserUncheckedCreateWithoutUserRoleMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutUserRoleMembershipsInput = {
    create?: XOR<CompanyCreateWithoutUserRoleMembershipsInput, CompanyUncheckedCreateWithoutUserRoleMembershipsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserRoleMembershipsInput
    connect?: CompanyWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutUserRoleMembershipsInput = {
    create?: XOR<ProjectCreateWithoutUserRoleMembershipsInput, ProjectUncheckedCreateWithoutUserRoleMembershipsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserRoleMembershipsInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumRoleScopeFieldUpdateOperationsInput = {
    set?: $Enums.RoleScope
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutUserRoleMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutUserRoleMembershipsInput, UserUncheckedCreateWithoutUserRoleMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleMembershipsInput
    upsert?: UserUpsertWithoutUserRoleMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRoleMembershipsInput, UserUpdateWithoutUserRoleMembershipsInput>, UserUncheckedUpdateWithoutUserRoleMembershipsInput>
  }

  export type CompanyUpdateOneWithoutUserRoleMembershipsNestedInput = {
    create?: XOR<CompanyCreateWithoutUserRoleMembershipsInput, CompanyUncheckedCreateWithoutUserRoleMembershipsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserRoleMembershipsInput
    upsert?: CompanyUpsertWithoutUserRoleMembershipsInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserRoleMembershipsInput, CompanyUpdateWithoutUserRoleMembershipsInput>, CompanyUncheckedUpdateWithoutUserRoleMembershipsInput>
  }

  export type ProjectUpdateOneWithoutUserRoleMembershipsNestedInput = {
    create?: XOR<ProjectCreateWithoutUserRoleMembershipsInput, ProjectUncheckedCreateWithoutUserRoleMembershipsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserRoleMembershipsInput
    upsert?: ProjectUpsertWithoutUserRoleMembershipsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutUserRoleMembershipsInput, ProjectUpdateWithoutUserRoleMembershipsInput>, ProjectUncheckedUpdateWithoutUserRoleMembershipsInput>
  }

  export type ProjectCreateNestedOneWithoutPermissionProjectOverrideInput = {
    create?: XOR<ProjectCreateWithoutPermissionProjectOverrideInput, ProjectUncheckedCreateWithoutPermissionProjectOverrideInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutPermissionProjectOverrideInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutPermissionProjectOverrideNestedInput = {
    create?: XOR<ProjectCreateWithoutPermissionProjectOverrideInput, ProjectUncheckedCreateWithoutPermissionProjectOverrideInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutPermissionProjectOverrideInput
    upsert?: ProjectUpsertWithoutPermissionProjectOverrideInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutPermissionProjectOverrideInput, ProjectUpdateWithoutPermissionProjectOverrideInput>, ProjectUncheckedUpdateWithoutPermissionProjectOverrideInput>
  }

  export type RefChecklistCreatetagsInput = {
    set: string[]
  }

  export type RefChecklistItemCreateNestedManyWithoutChecklistInput = {
    create?: XOR<RefChecklistItemCreateWithoutChecklistInput, RefChecklistItemUncheckedCreateWithoutChecklistInput> | RefChecklistItemCreateWithoutChecklistInput[] | RefChecklistItemUncheckedCreateWithoutChecklistInput[]
    connectOrCreate?: RefChecklistItemCreateOrConnectWithoutChecklistInput | RefChecklistItemCreateOrConnectWithoutChecklistInput[]
    createMany?: RefChecklistItemCreateManyChecklistInputEnvelope
    connect?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
  }

  export type RefChecklistItemUncheckedCreateNestedManyWithoutChecklistInput = {
    create?: XOR<RefChecklistItemCreateWithoutChecklistInput, RefChecklistItemUncheckedCreateWithoutChecklistInput> | RefChecklistItemCreateWithoutChecklistInput[] | RefChecklistItemUncheckedCreateWithoutChecklistInput[]
    connectOrCreate?: RefChecklistItemCreateOrConnectWithoutChecklistInput | RefChecklistItemCreateOrConnectWithoutChecklistInput[]
    createMany?: RefChecklistItemCreateManyChecklistInputEnvelope
    connect?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
  }

  export type EnumDisciplineFieldUpdateOperationsInput = {
    set?: $Enums.Discipline
  }

  export type RefChecklistUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RefChecklistItemUpdateManyWithoutChecklistNestedInput = {
    create?: XOR<RefChecklistItemCreateWithoutChecklistInput, RefChecklistItemUncheckedCreateWithoutChecklistInput> | RefChecklistItemCreateWithoutChecklistInput[] | RefChecklistItemUncheckedCreateWithoutChecklistInput[]
    connectOrCreate?: RefChecklistItemCreateOrConnectWithoutChecklistInput | RefChecklistItemCreateOrConnectWithoutChecklistInput[]
    upsert?: RefChecklistItemUpsertWithWhereUniqueWithoutChecklistInput | RefChecklistItemUpsertWithWhereUniqueWithoutChecklistInput[]
    createMany?: RefChecklistItemCreateManyChecklistInputEnvelope
    set?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
    disconnect?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
    delete?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
    connect?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
    update?: RefChecklistItemUpdateWithWhereUniqueWithoutChecklistInput | RefChecklistItemUpdateWithWhereUniqueWithoutChecklistInput[]
    updateMany?: RefChecklistItemUpdateManyWithWhereWithoutChecklistInput | RefChecklistItemUpdateManyWithWhereWithoutChecklistInput[]
    deleteMany?: RefChecklistItemScalarWhereInput | RefChecklistItemScalarWhereInput[]
  }

  export type RefChecklistItemUncheckedUpdateManyWithoutChecklistNestedInput = {
    create?: XOR<RefChecklistItemCreateWithoutChecklistInput, RefChecklistItemUncheckedCreateWithoutChecklistInput> | RefChecklistItemCreateWithoutChecklistInput[] | RefChecklistItemUncheckedCreateWithoutChecklistInput[]
    connectOrCreate?: RefChecklistItemCreateOrConnectWithoutChecklistInput | RefChecklistItemCreateOrConnectWithoutChecklistInput[]
    upsert?: RefChecklistItemUpsertWithWhereUniqueWithoutChecklistInput | RefChecklistItemUpsertWithWhereUniqueWithoutChecklistInput[]
    createMany?: RefChecklistItemCreateManyChecklistInputEnvelope
    set?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
    disconnect?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
    delete?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
    connect?: RefChecklistItemWhereUniqueInput | RefChecklistItemWhereUniqueInput[]
    update?: RefChecklistItemUpdateWithWhereUniqueWithoutChecklistInput | RefChecklistItemUpdateWithWhereUniqueWithoutChecklistInput[]
    updateMany?: RefChecklistItemUpdateManyWithWhereWithoutChecklistInput | RefChecklistItemUpdateManyWithWhereWithoutChecklistInput[]
    deleteMany?: RefChecklistItemScalarWhereInput | RefChecklistItemScalarWhereInput[]
  }

  export type RefChecklistItemCreatemethodInput = {
    set: string[]
  }

  export type RefChecklistItemCreatetagsInput = {
    set: string[]
  }

  export type RefChecklistCreateNestedOneWithoutItemsInput = {
    create?: XOR<RefChecklistCreateWithoutItemsInput, RefChecklistUncheckedCreateWithoutItemsInput>
    connectOrCreate?: RefChecklistCreateOrConnectWithoutItemsInput
    connect?: RefChecklistWhereUniqueInput
  }

  export type RefChecklistItemActivityLinkCreateNestedManyWithoutItemInput = {
    create?: XOR<RefChecklistItemActivityLinkCreateWithoutItemInput, RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput> | RefChecklistItemActivityLinkCreateWithoutItemInput[] | RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput | RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput[]
    createMany?: RefChecklistItemActivityLinkCreateManyItemInputEnvelope
    connect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
  }

  export type RefChecklistItemMaterialLinkCreateNestedManyWithoutItemInput = {
    create?: XOR<RefChecklistItemMaterialLinkCreateWithoutItemInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput> | RefChecklistItemMaterialLinkCreateWithoutItemInput[] | RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput | RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput[]
    createMany?: RefChecklistItemMaterialLinkCreateManyItemInputEnvelope
    connect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
  }

  export type RefChecklistItemActivityLinkUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<RefChecklistItemActivityLinkCreateWithoutItemInput, RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput> | RefChecklistItemActivityLinkCreateWithoutItemInput[] | RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput | RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput[]
    createMany?: RefChecklistItemActivityLinkCreateManyItemInputEnvelope
    connect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
  }

  export type RefChecklistItemMaterialLinkUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<RefChecklistItemMaterialLinkCreateWithoutItemInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput> | RefChecklistItemMaterialLinkCreateWithoutItemInput[] | RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput | RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput[]
    createMany?: RefChecklistItemMaterialLinkCreateManyItemInputEnvelope
    connect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
  }

  export type RefChecklistItemUpdatemethodInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefChecklistItemUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefChecklistUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<RefChecklistCreateWithoutItemsInput, RefChecklistUncheckedCreateWithoutItemsInput>
    connectOrCreate?: RefChecklistCreateOrConnectWithoutItemsInput
    upsert?: RefChecklistUpsertWithoutItemsInput
    connect?: RefChecklistWhereUniqueInput
    update?: XOR<XOR<RefChecklistUpdateToOneWithWhereWithoutItemsInput, RefChecklistUpdateWithoutItemsInput>, RefChecklistUncheckedUpdateWithoutItemsInput>
  }

  export type RefChecklistItemActivityLinkUpdateManyWithoutItemNestedInput = {
    create?: XOR<RefChecklistItemActivityLinkCreateWithoutItemInput, RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput> | RefChecklistItemActivityLinkCreateWithoutItemInput[] | RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput | RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput[]
    upsert?: RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutItemInput | RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: RefChecklistItemActivityLinkCreateManyItemInputEnvelope
    set?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    disconnect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    delete?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    connect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    update?: RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutItemInput | RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: RefChecklistItemActivityLinkUpdateManyWithWhereWithoutItemInput | RefChecklistItemActivityLinkUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: RefChecklistItemActivityLinkScalarWhereInput | RefChecklistItemActivityLinkScalarWhereInput[]
  }

  export type RefChecklistItemMaterialLinkUpdateManyWithoutItemNestedInput = {
    create?: XOR<RefChecklistItemMaterialLinkCreateWithoutItemInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput> | RefChecklistItemMaterialLinkCreateWithoutItemInput[] | RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput | RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput[]
    upsert?: RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutItemInput | RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: RefChecklistItemMaterialLinkCreateManyItemInputEnvelope
    set?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    disconnect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    delete?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    connect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    update?: RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutItemInput | RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutItemInput | RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: RefChecklistItemMaterialLinkScalarWhereInput | RefChecklistItemMaterialLinkScalarWhereInput[]
  }

  export type RefChecklistItemActivityLinkUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<RefChecklistItemActivityLinkCreateWithoutItemInput, RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput> | RefChecklistItemActivityLinkCreateWithoutItemInput[] | RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput | RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput[]
    upsert?: RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutItemInput | RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: RefChecklistItemActivityLinkCreateManyItemInputEnvelope
    set?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    disconnect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    delete?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    connect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    update?: RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutItemInput | RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: RefChecklistItemActivityLinkUpdateManyWithWhereWithoutItemInput | RefChecklistItemActivityLinkUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: RefChecklistItemActivityLinkScalarWhereInput | RefChecklistItemActivityLinkScalarWhereInput[]
  }

  export type RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<RefChecklistItemMaterialLinkCreateWithoutItemInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput> | RefChecklistItemMaterialLinkCreateWithoutItemInput[] | RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput | RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput[]
    upsert?: RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutItemInput | RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: RefChecklistItemMaterialLinkCreateManyItemInputEnvelope
    set?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    disconnect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    delete?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    connect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    update?: RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutItemInput | RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutItemInput | RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: RefChecklistItemMaterialLinkScalarWhereInput | RefChecklistItemMaterialLinkScalarWhereInput[]
  }

  export type RefChecklistItemActivityLinkCreatetagsInput = {
    set: string[]
  }

  export type RefChecklistItemCreateNestedOneWithoutSuggestedActivitiesInput = {
    create?: XOR<RefChecklistItemCreateWithoutSuggestedActivitiesInput, RefChecklistItemUncheckedCreateWithoutSuggestedActivitiesInput>
    connectOrCreate?: RefChecklistItemCreateOrConnectWithoutSuggestedActivitiesInput
    connect?: RefChecklistItemWhereUniqueInput
  }

  export type RefActivityCreateNestedOneWithoutRefChecklistItemActivityLinkInput = {
    create?: XOR<RefActivityCreateWithoutRefChecklistItemActivityLinkInput, RefActivityUncheckedCreateWithoutRefChecklistItemActivityLinkInput>
    connectOrCreate?: RefActivityCreateOrConnectWithoutRefChecklistItemActivityLinkInput
    connect?: RefActivityWhereUniqueInput
  }

  export type RefChecklistItemActivityLinkUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefChecklistItemUpdateOneRequiredWithoutSuggestedActivitiesNestedInput = {
    create?: XOR<RefChecklistItemCreateWithoutSuggestedActivitiesInput, RefChecklistItemUncheckedCreateWithoutSuggestedActivitiesInput>
    connectOrCreate?: RefChecklistItemCreateOrConnectWithoutSuggestedActivitiesInput
    upsert?: RefChecklistItemUpsertWithoutSuggestedActivitiesInput
    connect?: RefChecklistItemWhereUniqueInput
    update?: XOR<XOR<RefChecklistItemUpdateToOneWithWhereWithoutSuggestedActivitiesInput, RefChecklistItemUpdateWithoutSuggestedActivitiesInput>, RefChecklistItemUncheckedUpdateWithoutSuggestedActivitiesInput>
  }

  export type RefActivityUpdateOneWithoutRefChecklistItemActivityLinkNestedInput = {
    create?: XOR<RefActivityCreateWithoutRefChecklistItemActivityLinkInput, RefActivityUncheckedCreateWithoutRefChecklistItemActivityLinkInput>
    connectOrCreate?: RefActivityCreateOrConnectWithoutRefChecklistItemActivityLinkInput
    upsert?: RefActivityUpsertWithoutRefChecklistItemActivityLinkInput
    disconnect?: RefActivityWhereInput | boolean
    delete?: RefActivityWhereInput | boolean
    connect?: RefActivityWhereUniqueInput
    update?: XOR<XOR<RefActivityUpdateToOneWithWhereWithoutRefChecklistItemActivityLinkInput, RefActivityUpdateWithoutRefChecklistItemActivityLinkInput>, RefActivityUncheckedUpdateWithoutRefChecklistItemActivityLinkInput>
  }

  export type RefChecklistItemCreateNestedOneWithoutSuggestedMaterialsInput = {
    create?: XOR<RefChecklistItemCreateWithoutSuggestedMaterialsInput, RefChecklistItemUncheckedCreateWithoutSuggestedMaterialsInput>
    connectOrCreate?: RefChecklistItemCreateOrConnectWithoutSuggestedMaterialsInput
    connect?: RefChecklistItemWhereUniqueInput
  }

  export type RefMaterialCreateNestedOneWithoutRefChecklistItemMaterialLinkInput = {
    create?: XOR<RefMaterialCreateWithoutRefChecklistItemMaterialLinkInput, RefMaterialUncheckedCreateWithoutRefChecklistItemMaterialLinkInput>
    connectOrCreate?: RefMaterialCreateOrConnectWithoutRefChecklistItemMaterialLinkInput
    connect?: RefMaterialWhereUniqueInput
  }

  export type RefChecklistItemUpdateOneRequiredWithoutSuggestedMaterialsNestedInput = {
    create?: XOR<RefChecklistItemCreateWithoutSuggestedMaterialsInput, RefChecklistItemUncheckedCreateWithoutSuggestedMaterialsInput>
    connectOrCreate?: RefChecklistItemCreateOrConnectWithoutSuggestedMaterialsInput
    upsert?: RefChecklistItemUpsertWithoutSuggestedMaterialsInput
    connect?: RefChecklistItemWhereUniqueInput
    update?: XOR<XOR<RefChecklistItemUpdateToOneWithWhereWithoutSuggestedMaterialsInput, RefChecklistItemUpdateWithoutSuggestedMaterialsInput>, RefChecklistItemUncheckedUpdateWithoutSuggestedMaterialsInput>
  }

  export type RefMaterialUpdateOneWithoutRefChecklistItemMaterialLinkNestedInput = {
    create?: XOR<RefMaterialCreateWithoutRefChecklistItemMaterialLinkInput, RefMaterialUncheckedCreateWithoutRefChecklistItemMaterialLinkInput>
    connectOrCreate?: RefMaterialCreateOrConnectWithoutRefChecklistItemMaterialLinkInput
    upsert?: RefMaterialUpsertWithoutRefChecklistItemMaterialLinkInput
    disconnect?: RefMaterialWhereInput | boolean
    delete?: RefMaterialWhereInput | boolean
    connect?: RefMaterialWhereUniqueInput
    update?: XOR<XOR<RefMaterialUpdateToOneWithWhereWithoutRefChecklistItemMaterialLinkInput, RefMaterialUpdateWithoutRefChecklistItemMaterialLinkInput>, RefMaterialUncheckedUpdateWithoutRefChecklistItemMaterialLinkInput>
  }

  export type RefActivityCreatephaseInput = {
    set: string[]
  }

  export type RefActivityCreateelementInput = {
    set: string[]
  }

  export type RefActivityCreatesystemInput = {
    set: string[]
  }

  export type RefActivityCreatenatureInput = {
    set: string[]
  }

  export type RefActivityCreatemethodInput = {
    set: string[]
  }

  export type RefActivityMaterialCreateNestedManyWithoutActivityInput = {
    create?: XOR<RefActivityMaterialCreateWithoutActivityInput, RefActivityMaterialUncheckedCreateWithoutActivityInput> | RefActivityMaterialCreateWithoutActivityInput[] | RefActivityMaterialUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RefActivityMaterialCreateOrConnectWithoutActivityInput | RefActivityMaterialCreateOrConnectWithoutActivityInput[]
    createMany?: RefActivityMaterialCreateManyActivityInputEnvelope
    connect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
  }

  export type RefChecklistItemActivityLinkCreateNestedManyWithoutActivityInput = {
    create?: XOR<RefChecklistItemActivityLinkCreateWithoutActivityInput, RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput> | RefChecklistItemActivityLinkCreateWithoutActivityInput[] | RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput | RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput[]
    createMany?: RefChecklistItemActivityLinkCreateManyActivityInputEnvelope
    connect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
  }

  export type RefActivityMaterialUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<RefActivityMaterialCreateWithoutActivityInput, RefActivityMaterialUncheckedCreateWithoutActivityInput> | RefActivityMaterialCreateWithoutActivityInput[] | RefActivityMaterialUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RefActivityMaterialCreateOrConnectWithoutActivityInput | RefActivityMaterialCreateOrConnectWithoutActivityInput[]
    createMany?: RefActivityMaterialCreateManyActivityInputEnvelope
    connect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
  }

  export type RefChecklistItemActivityLinkUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<RefChecklistItemActivityLinkCreateWithoutActivityInput, RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput> | RefChecklistItemActivityLinkCreateWithoutActivityInput[] | RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput | RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput[]
    createMany?: RefChecklistItemActivityLinkCreateManyActivityInputEnvelope
    connect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
  }

  export type RefActivityUpdatephaseInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefActivityUpdateelementInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefActivityUpdatesystemInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefActivityUpdatenatureInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefActivityUpdatemethodInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefActivityMaterialUpdateManyWithoutActivityNestedInput = {
    create?: XOR<RefActivityMaterialCreateWithoutActivityInput, RefActivityMaterialUncheckedCreateWithoutActivityInput> | RefActivityMaterialCreateWithoutActivityInput[] | RefActivityMaterialUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RefActivityMaterialCreateOrConnectWithoutActivityInput | RefActivityMaterialCreateOrConnectWithoutActivityInput[]
    upsert?: RefActivityMaterialUpsertWithWhereUniqueWithoutActivityInput | RefActivityMaterialUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: RefActivityMaterialCreateManyActivityInputEnvelope
    set?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    disconnect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    delete?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    connect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    update?: RefActivityMaterialUpdateWithWhereUniqueWithoutActivityInput | RefActivityMaterialUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: RefActivityMaterialUpdateManyWithWhereWithoutActivityInput | RefActivityMaterialUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: RefActivityMaterialScalarWhereInput | RefActivityMaterialScalarWhereInput[]
  }

  export type RefChecklistItemActivityLinkUpdateManyWithoutActivityNestedInput = {
    create?: XOR<RefChecklistItemActivityLinkCreateWithoutActivityInput, RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput> | RefChecklistItemActivityLinkCreateWithoutActivityInput[] | RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput | RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput[]
    upsert?: RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutActivityInput | RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: RefChecklistItemActivityLinkCreateManyActivityInputEnvelope
    set?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    disconnect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    delete?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    connect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    update?: RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutActivityInput | RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: RefChecklistItemActivityLinkUpdateManyWithWhereWithoutActivityInput | RefChecklistItemActivityLinkUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: RefChecklistItemActivityLinkScalarWhereInput | RefChecklistItemActivityLinkScalarWhereInput[]
  }

  export type RefActivityMaterialUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<RefActivityMaterialCreateWithoutActivityInput, RefActivityMaterialUncheckedCreateWithoutActivityInput> | RefActivityMaterialCreateWithoutActivityInput[] | RefActivityMaterialUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RefActivityMaterialCreateOrConnectWithoutActivityInput | RefActivityMaterialCreateOrConnectWithoutActivityInput[]
    upsert?: RefActivityMaterialUpsertWithWhereUniqueWithoutActivityInput | RefActivityMaterialUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: RefActivityMaterialCreateManyActivityInputEnvelope
    set?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    disconnect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    delete?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    connect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    update?: RefActivityMaterialUpdateWithWhereUniqueWithoutActivityInput | RefActivityMaterialUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: RefActivityMaterialUpdateManyWithWhereWithoutActivityInput | RefActivityMaterialUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: RefActivityMaterialScalarWhereInput | RefActivityMaterialScalarWhereInput[]
  }

  export type RefChecklistItemActivityLinkUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<RefChecklistItemActivityLinkCreateWithoutActivityInput, RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput> | RefChecklistItemActivityLinkCreateWithoutActivityInput[] | RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput | RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput[]
    upsert?: RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutActivityInput | RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: RefChecklistItemActivityLinkCreateManyActivityInputEnvelope
    set?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    disconnect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    delete?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    connect?: RefChecklistItemActivityLinkWhereUniqueInput | RefChecklistItemActivityLinkWhereUniqueInput[]
    update?: RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutActivityInput | RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: RefChecklistItemActivityLinkUpdateManyWithWhereWithoutActivityInput | RefChecklistItemActivityLinkUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: RefChecklistItemActivityLinkScalarWhereInput | RefChecklistItemActivityLinkScalarWhereInput[]
  }

  export type RefMaterialCreatestandardsInput = {
    set: string[]
  }

  export type RefMaterialCreatekeyPropsInput = {
    set: string[]
  }

  export type RefMaterialCreatealiasesInput = {
    set: string[]
  }

  export type RefActivityMaterialCreateNestedManyWithoutMaterialInput = {
    create?: XOR<RefActivityMaterialCreateWithoutMaterialInput, RefActivityMaterialUncheckedCreateWithoutMaterialInput> | RefActivityMaterialCreateWithoutMaterialInput[] | RefActivityMaterialUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RefActivityMaterialCreateOrConnectWithoutMaterialInput | RefActivityMaterialCreateOrConnectWithoutMaterialInput[]
    createMany?: RefActivityMaterialCreateManyMaterialInputEnvelope
    connect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
  }

  export type RefChecklistItemMaterialLinkCreateNestedManyWithoutMaterialInput = {
    create?: XOR<RefChecklistItemMaterialLinkCreateWithoutMaterialInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput> | RefChecklistItemMaterialLinkCreateWithoutMaterialInput[] | RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput | RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput[]
    createMany?: RefChecklistItemMaterialLinkCreateManyMaterialInputEnvelope
    connect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
  }

  export type RefActivityMaterialUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<RefActivityMaterialCreateWithoutMaterialInput, RefActivityMaterialUncheckedCreateWithoutMaterialInput> | RefActivityMaterialCreateWithoutMaterialInput[] | RefActivityMaterialUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RefActivityMaterialCreateOrConnectWithoutMaterialInput | RefActivityMaterialCreateOrConnectWithoutMaterialInput[]
    createMany?: RefActivityMaterialCreateManyMaterialInputEnvelope
    connect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
  }

  export type RefChecklistItemMaterialLinkUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<RefChecklistItemMaterialLinkCreateWithoutMaterialInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput> | RefChecklistItemMaterialLinkCreateWithoutMaterialInput[] | RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput | RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput[]
    createMany?: RefChecklistItemMaterialLinkCreateManyMaterialInputEnvelope
    connect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
  }

  export type NullableEnumMaterialDisciplineFieldUpdateOperationsInput = {
    set?: $Enums.MaterialDiscipline | null
  }

  export type RefMaterialUpdatestandardsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefMaterialUpdatekeyPropsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefMaterialUpdatealiasesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RefActivityMaterialUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<RefActivityMaterialCreateWithoutMaterialInput, RefActivityMaterialUncheckedCreateWithoutMaterialInput> | RefActivityMaterialCreateWithoutMaterialInput[] | RefActivityMaterialUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RefActivityMaterialCreateOrConnectWithoutMaterialInput | RefActivityMaterialCreateOrConnectWithoutMaterialInput[]
    upsert?: RefActivityMaterialUpsertWithWhereUniqueWithoutMaterialInput | RefActivityMaterialUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: RefActivityMaterialCreateManyMaterialInputEnvelope
    set?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    disconnect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    delete?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    connect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    update?: RefActivityMaterialUpdateWithWhereUniqueWithoutMaterialInput | RefActivityMaterialUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: RefActivityMaterialUpdateManyWithWhereWithoutMaterialInput | RefActivityMaterialUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: RefActivityMaterialScalarWhereInput | RefActivityMaterialScalarWhereInput[]
  }

  export type RefChecklistItemMaterialLinkUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<RefChecklistItemMaterialLinkCreateWithoutMaterialInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput> | RefChecklistItemMaterialLinkCreateWithoutMaterialInput[] | RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput | RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput[]
    upsert?: RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutMaterialInput | RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: RefChecklistItemMaterialLinkCreateManyMaterialInputEnvelope
    set?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    disconnect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    delete?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    connect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    update?: RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutMaterialInput | RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutMaterialInput | RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: RefChecklistItemMaterialLinkScalarWhereInput | RefChecklistItemMaterialLinkScalarWhereInput[]
  }

  export type RefActivityMaterialUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<RefActivityMaterialCreateWithoutMaterialInput, RefActivityMaterialUncheckedCreateWithoutMaterialInput> | RefActivityMaterialCreateWithoutMaterialInput[] | RefActivityMaterialUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RefActivityMaterialCreateOrConnectWithoutMaterialInput | RefActivityMaterialCreateOrConnectWithoutMaterialInput[]
    upsert?: RefActivityMaterialUpsertWithWhereUniqueWithoutMaterialInput | RefActivityMaterialUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: RefActivityMaterialCreateManyMaterialInputEnvelope
    set?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    disconnect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    delete?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    connect?: RefActivityMaterialWhereUniqueInput | RefActivityMaterialWhereUniqueInput[]
    update?: RefActivityMaterialUpdateWithWhereUniqueWithoutMaterialInput | RefActivityMaterialUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: RefActivityMaterialUpdateManyWithWhereWithoutMaterialInput | RefActivityMaterialUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: RefActivityMaterialScalarWhereInput | RefActivityMaterialScalarWhereInput[]
  }

  export type RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<RefChecklistItemMaterialLinkCreateWithoutMaterialInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput> | RefChecklistItemMaterialLinkCreateWithoutMaterialInput[] | RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput | RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput[]
    upsert?: RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutMaterialInput | RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: RefChecklistItemMaterialLinkCreateManyMaterialInputEnvelope
    set?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    disconnect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    delete?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    connect?: RefChecklistItemMaterialLinkWhereUniqueInput | RefChecklistItemMaterialLinkWhereUniqueInput[]
    update?: RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutMaterialInput | RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutMaterialInput | RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: RefChecklistItemMaterialLinkScalarWhereInput | RefChecklistItemMaterialLinkScalarWhereInput[]
  }

  export type RefActivityCreateNestedOneWithoutMaterialsInput = {
    create?: XOR<RefActivityCreateWithoutMaterialsInput, RefActivityUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: RefActivityCreateOrConnectWithoutMaterialsInput
    connect?: RefActivityWhereUniqueInput
  }

  export type RefMaterialCreateNestedOneWithoutActivityUsesInput = {
    create?: XOR<RefMaterialCreateWithoutActivityUsesInput, RefMaterialUncheckedCreateWithoutActivityUsesInput>
    connectOrCreate?: RefMaterialCreateOrConnectWithoutActivityUsesInput
    connect?: RefMaterialWhereUniqueInput
  }

  export type RefActivityUpdateOneRequiredWithoutMaterialsNestedInput = {
    create?: XOR<RefActivityCreateWithoutMaterialsInput, RefActivityUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: RefActivityCreateOrConnectWithoutMaterialsInput
    upsert?: RefActivityUpsertWithoutMaterialsInput
    connect?: RefActivityWhereUniqueInput
    update?: XOR<XOR<RefActivityUpdateToOneWithWhereWithoutMaterialsInput, RefActivityUpdateWithoutMaterialsInput>, RefActivityUncheckedUpdateWithoutMaterialsInput>
  }

  export type RefMaterialUpdateOneRequiredWithoutActivityUsesNestedInput = {
    create?: XOR<RefMaterialCreateWithoutActivityUsesInput, RefMaterialUncheckedCreateWithoutActivityUsesInput>
    connectOrCreate?: RefMaterialCreateOrConnectWithoutActivityUsesInput
    upsert?: RefMaterialUpsertWithoutActivityUsesInput
    connect?: RefMaterialWhereUniqueInput
    update?: XOR<XOR<RefMaterialUpdateToOneWithWhereWithoutActivityUsesInput, RefMaterialUpdateWithoutActivityUsesInput>, RefMaterialUncheckedUpdateWithoutActivityUsesInput>
  }

  export type EnumAuditActionFieldUpdateOperationsInput = {
    set?: $Enums.AuditAction
  }

  export type NullableEnumRoleScopeFieldUpdateOperationsInput = {
    set?: $Enums.RoleScope | null
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumStateTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StateType | EnumStateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStateTypeFilter<$PrismaModel> | $Enums.StateType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumStateTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StateType | EnumStateTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StateType[] | ListEnumStateTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStateTypeWithAggregatesFilter<$PrismaModel> | $Enums.StateType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStateTypeFilter<$PrismaModel>
    _max?: NestedEnumStateTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumPreferredLanguageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PreferredLanguage | EnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel> | $Enums.PreferredLanguage | null
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumOperatingZoneNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OperatingZone | EnumOperatingZoneFieldRefInput<$PrismaModel> | null
    in?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOperatingZoneNullableFilter<$PrismaModel> | $Enums.OperatingZone | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedEnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPreferredLanguageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PreferredLanguage | EnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PreferredLanguage[] | ListEnumPreferredLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPreferredLanguageNullableWithAggregatesFilter<$PrismaModel> | $Enums.PreferredLanguage | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel>
    _max?: NestedEnumPreferredLanguageNullableFilter<$PrismaModel>
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumOperatingZoneNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OperatingZone | EnumOperatingZoneFieldRefInput<$PrismaModel> | null
    in?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OperatingZone[] | ListEnumOperatingZoneFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOperatingZoneNullableWithAggregatesFilter<$PrismaModel> | $Enums.OperatingZone | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOperatingZoneNullableFilter<$PrismaModel>
    _max?: NestedEnumOperatingZoneNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type NestedEnumCompanyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyStatus | EnumCompanyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyStatusFilter<$PrismaModel> | $Enums.CompanyStatus
  }

  export type NestedEnumCompanyRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyRole | EnumCompanyRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompanyRoleNullableFilter<$PrismaModel> | $Enums.CompanyRole | null
  }

  export type NestedEnumCompanyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyStatus | EnumCompanyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyStatus[] | ListEnumCompanyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyStatusWithAggregatesFilter<$PrismaModel> | $Enums.CompanyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyStatusFilter<$PrismaModel>
    _max?: NestedEnumCompanyStatusFilter<$PrismaModel>
  }

  export type NestedEnumCompanyRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyRole | EnumCompanyRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompanyRole[] | ListEnumCompanyRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompanyRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.CompanyRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCompanyRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumCompanyRoleNullableFilter<$PrismaModel>
  }

  export type NestedEnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type NestedEnumProjectStageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStage | EnumProjectStageFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectStageNullableFilter<$PrismaModel> | $Enums.ProjectStage | null
  }

  export type NestedEnumProjectTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectTypeNullableFilter<$PrismaModel> | $Enums.ProjectType | null
  }

  export type NestedEnumStructureTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StructureType | EnumStructureTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStructureTypeNullableFilter<$PrismaModel> | $Enums.StructureType | null
  }

  export type NestedEnumConstructionTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ConstructionType | EnumConstructionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConstructionTypeNullableFilter<$PrismaModel> | $Enums.ConstructionType | null
  }

  export type NestedEnumContractTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContractTypeNullableFilter<$PrismaModel> | $Enums.ContractType | null
  }

  export type NestedEnumProjectHealthFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectHealth | EnumProjectHealthFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectHealthFilter<$PrismaModel> | $Enums.ProjectHealth
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumCurrencyCodeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel> | $Enums.CurrencyCode | null
  }

  export type NestedEnumAreaUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AreaUnit | EnumAreaUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAreaUnitNullableFilter<$PrismaModel> | $Enums.AreaUnit | null
  }

  export type NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type NestedEnumProjectStageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStage | EnumProjectStageFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectStage[] | ListEnumProjectStageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectStageNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStage | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProjectStageNullableFilter<$PrismaModel>
    _max?: NestedEnumProjectStageNullableFilter<$PrismaModel>
  }

  export type NestedEnumProjectTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectType | EnumProjectTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProjectType[] | ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProjectTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProjectType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProjectTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumProjectTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStructureTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StructureType | EnumStructureTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StructureType[] | ListEnumStructureTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStructureTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.StructureType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStructureTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumStructureTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumConstructionTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConstructionType | EnumConstructionTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ConstructionType[] | ListEnumConstructionTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumConstructionTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ConstructionType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumConstructionTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumConstructionTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumContractTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContractTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ContractType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumContractTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumContractTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumProjectHealthWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectHealth | EnumProjectHealthFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectHealth[] | ListEnumProjectHealthFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectHealthWithAggregatesFilter<$PrismaModel> | $Enums.ProjectHealth
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectHealthFilter<$PrismaModel>
    _max?: NestedEnumProjectHealthFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyCode | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
    _max?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAreaUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AreaUnit | EnumAreaUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AreaUnit[] | ListEnumAreaUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAreaUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.AreaUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAreaUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumAreaUnitNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumRoleScopeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleScopeFilter<$PrismaModel> | $Enums.RoleScope
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumRoleScopeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleScopeWithAggregatesFilter<$PrismaModel> | $Enums.RoleScope
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleScopeFilter<$PrismaModel>
    _max?: NestedEnumRoleScopeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumDisciplineFilter<$PrismaModel = never> = {
    equals?: $Enums.Discipline | EnumDisciplineFieldRefInput<$PrismaModel>
    in?: $Enums.Discipline[] | ListEnumDisciplineFieldRefInput<$PrismaModel>
    notIn?: $Enums.Discipline[] | ListEnumDisciplineFieldRefInput<$PrismaModel>
    not?: NestedEnumDisciplineFilter<$PrismaModel> | $Enums.Discipline
  }

  export type NestedEnumDisciplineWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Discipline | EnumDisciplineFieldRefInput<$PrismaModel>
    in?: $Enums.Discipline[] | ListEnumDisciplineFieldRefInput<$PrismaModel>
    notIn?: $Enums.Discipline[] | ListEnumDisciplineFieldRefInput<$PrismaModel>
    not?: NestedEnumDisciplineWithAggregatesFilter<$PrismaModel> | $Enums.Discipline
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDisciplineFilter<$PrismaModel>
    _max?: NestedEnumDisciplineFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumMaterialDisciplineNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialDiscipline | EnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaterialDiscipline[] | ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaterialDiscipline[] | ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaterialDisciplineNullableFilter<$PrismaModel> | $Enums.MaterialDiscipline | null
  }

  export type NestedEnumMaterialDisciplineNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialDiscipline | EnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaterialDiscipline[] | ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaterialDiscipline[] | ListEnumMaterialDisciplineFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaterialDisciplineNullableWithAggregatesFilter<$PrismaModel> | $Enums.MaterialDiscipline | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMaterialDisciplineNullableFilter<$PrismaModel>
    _max?: NestedEnumMaterialDisciplineNullableFilter<$PrismaModel>
  }

  export type NestedEnumAuditActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionFilter<$PrismaModel> | $Enums.AuditAction
  }

  export type NestedEnumRoleScopeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleScopeNullableFilter<$PrismaModel> | $Enums.RoleScope | null
  }

  export type NestedEnumAuditActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditActionFilter<$PrismaModel>
    _max?: NestedEnumAuditActionFilter<$PrismaModel>
  }

  export type NestedEnumRoleScopeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleScopeNullableWithAggregatesFilter<$PrismaModel> | $Enums.RoleScope | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleScopeNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleScopeNullableFilter<$PrismaModel>
  }

  export type DistrictCreateWithoutStateInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutDistrictInput
    companies?: CompanyCreateNestedManyWithoutDistrictInput
    projects?: ProjectCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateWithoutStateInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDistrictInput
    companies?: CompanyUncheckedCreateNestedManyWithoutDistrictInput
    projects?: ProjectUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictCreateOrConnectWithoutStateInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput>
  }

  export type DistrictCreateManyStateInputEnvelope = {
    data: DistrictCreateManyStateInput | DistrictCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyUncheckedCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStateInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput>
  }

  export type UserCreateManyStateInputEnvelope = {
    data: UserCreateManyStateInput | UserCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutStateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    serviceProvider?: UserCreateNestedOneWithoutCompaniesAsServiceProviderInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutStateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutStateInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput>
  }

  export type CompanyCreateManyStateInputEnvelope = {
    data: CompanyCreateManyStateInput | CompanyCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutStateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutStateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutStateInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput>
  }

  export type ProjectCreateManyStateInputEnvelope = {
    data: ProjectCreateManyStateInput | ProjectCreateManyStateInput[]
    skipDuplicates?: boolean
  }

  export type DistrictUpsertWithWhereUniqueWithoutStateInput = {
    where: DistrictWhereUniqueInput
    update: XOR<DistrictUpdateWithoutStateInput, DistrictUncheckedUpdateWithoutStateInput>
    create: XOR<DistrictCreateWithoutStateInput, DistrictUncheckedCreateWithoutStateInput>
  }

  export type DistrictUpdateWithWhereUniqueWithoutStateInput = {
    where: DistrictWhereUniqueInput
    data: XOR<DistrictUpdateWithoutStateInput, DistrictUncheckedUpdateWithoutStateInput>
  }

  export type DistrictUpdateManyWithWhereWithoutStateInput = {
    where: DistrictScalarWhereInput
    data: XOR<DistrictUpdateManyMutationInput, DistrictUncheckedUpdateManyWithoutStateInput>
  }

  export type DistrictScalarWhereInput = {
    AND?: DistrictScalarWhereInput | DistrictScalarWhereInput[]
    OR?: DistrictScalarWhereInput[]
    NOT?: DistrictScalarWhereInput | DistrictScalarWhereInput[]
    districtId?: UuidFilter<"District"> | string
    name?: StringFilter<"District"> | string
    stateId?: UuidFilter<"District"> | string
    createdAt?: DateTimeFilter<"District"> | Date | string
    updatedAt?: DateTimeFilter<"District"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutStateInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStateInput, UserUncheckedUpdateWithoutStateInput>
    create: XOR<UserCreateWithoutStateInput, UserUncheckedCreateWithoutStateInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStateInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStateInput, UserUncheckedUpdateWithoutStateInput>
  }

  export type UserUpdateManyWithWhereWithoutStateInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStateInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    userId?: UuidFilter<"User"> | string
    code?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    middleName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    countryCode?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    preferredLanguage?: EnumPreferredLanguageNullableFilter<"User"> | $Enums.PreferredLanguage | null
    profilePhoto?: StringNullableFilter<"User"> | string | null
    stateId?: UuidNullableFilter<"User"> | string | null
    districtId?: UuidNullableFilter<"User"> | string | null
    cityTown?: StringNullableFilter<"User"> | string | null
    pin?: StringNullableFilter<"User"> | string | null
    operatingZone?: EnumOperatingZoneNullableFilter<"User"> | $Enums.OperatingZone | null
    address?: StringNullableFilter<"User"> | string | null
    isClient?: BoolNullableFilter<"User"> | boolean | null
    isServiceProvider?: BoolNullableFilter<"User"> | boolean | null
    userStatus?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    passwordHash?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userRole?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
  }

  export type CompanyUpsertWithWhereUniqueWithoutStateInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutStateInput, CompanyUncheckedUpdateWithoutStateInput>
    create: XOR<CompanyCreateWithoutStateInput, CompanyUncheckedCreateWithoutStateInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutStateInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutStateInput, CompanyUncheckedUpdateWithoutStateInput>
  }

  export type CompanyUpdateManyWithWhereWithoutStateInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutStateInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    companyId?: UuidFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    status?: EnumCompanyStatusFilter<"Company"> | $Enums.CompanyStatus
    website?: StringNullableFilter<"Company"> | string | null
    companyRole?: EnumCompanyRoleNullableFilter<"Company"> | $Enums.CompanyRole | null
    gstin?: StringNullableFilter<"Company"> | string | null
    pan?: StringNullableFilter<"Company"> | string | null
    cin?: StringNullableFilter<"Company"> | string | null
    primaryContact?: StringNullableFilter<"Company"> | string | null
    contactMobile?: StringNullableFilter<"Company"> | string | null
    contactEmail?: StringNullableFilter<"Company"> | string | null
    stateId?: UuidNullableFilter<"Company"> | string | null
    districtId?: UuidNullableFilter<"Company"> | string | null
    address?: StringNullableFilter<"Company"> | string | null
    pin?: StringNullableFilter<"Company"> | string | null
    notes?: StringNullableFilter<"Company"> | string | null
    userId?: UuidNullableFilter<"Company"> | string | null
    companyCode?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutStateInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutStateInput, ProjectUncheckedUpdateWithoutStateInput>
    create: XOR<ProjectCreateWithoutStateInput, ProjectUncheckedCreateWithoutStateInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutStateInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutStateInput, ProjectUncheckedUpdateWithoutStateInput>
  }

  export type ProjectUpdateManyWithWhereWithoutStateInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutStateInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    projectId?: UuidFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    code?: StringNullableFilter<"Project"> | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    stage?: EnumProjectStageNullableFilter<"Project"> | $Enums.ProjectStage | null
    projectType?: EnumProjectTypeNullableFilter<"Project"> | $Enums.ProjectType | null
    structureType?: EnumStructureTypeNullableFilter<"Project"> | $Enums.StructureType | null
    constructionType?: EnumConstructionTypeNullableFilter<"Project"> | $Enums.ConstructionType | null
    contractType?: EnumContractTypeNullableFilter<"Project"> | $Enums.ContractType | null
    health?: EnumProjectHealthFilter<"Project"> | $Enums.ProjectHealth
    clientUserId?: UuidNullableFilter<"Project"> | string | null
    clientCompanyId?: UuidNullableFilter<"Project"> | string | null
    address?: StringNullableFilter<"Project"> | string | null
    cityTown?: StringNullableFilter<"Project"> | string | null
    stateId?: UuidNullableFilter<"Project"> | string | null
    districtId?: UuidNullableFilter<"Project"> | string | null
    pin?: StringNullableFilter<"Project"> | string | null
    latitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    plannedCompletionDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Project"> | $Enums.CurrencyCode | null
    contractValue?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    areaUnit?: EnumAreaUnitNullableFilter<"Project"> | $Enums.AreaUnit | null
    plotArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    floors?: IntNullableFilter<"Project"> | number | null
    description?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type StateCreateWithoutDistrictsInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutStateInput
    companies?: CompanyCreateNestedManyWithoutStateInput
    projects?: ProjectCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutDistrictsInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutStateInput
    companies?: CompanyUncheckedCreateNestedManyWithoutStateInput
    projects?: ProjectUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutDistrictsInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutDistrictsInput, StateUncheckedCreateWithoutDistrictsInput>
  }

  export type UserCreateWithoutDistrictInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDistrictInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyUncheckedCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDistrictInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput>
  }

  export type UserCreateManyDistrictInputEnvelope = {
    data: UserCreateManyDistrictInput | UserCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutDistrictInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    serviceProvider?: UserCreateNestedOneWithoutCompaniesAsServiceProviderInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutDistrictInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDistrictInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput>
  }

  export type CompanyCreateManyDistrictInputEnvelope = {
    data: CompanyCreateManyDistrictInput | CompanyCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutDistrictInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDistrictInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDistrictInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput>
  }

  export type ProjectCreateManyDistrictInputEnvelope = {
    data: ProjectCreateManyDistrictInput | ProjectCreateManyDistrictInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutDistrictsInput = {
    update: XOR<StateUpdateWithoutDistrictsInput, StateUncheckedUpdateWithoutDistrictsInput>
    create: XOR<StateCreateWithoutDistrictsInput, StateUncheckedCreateWithoutDistrictsInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutDistrictsInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutDistrictsInput, StateUncheckedUpdateWithoutDistrictsInput>
  }

  export type StateUpdateWithoutDistrictsInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutStateNestedInput
    companies?: CompanyUpdateManyWithoutStateNestedInput
    projects?: ProjectUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutDistrictsInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutStateNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutStateNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutDistrictInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDistrictInput, UserUncheckedUpdateWithoutDistrictInput>
    create: XOR<UserCreateWithoutDistrictInput, UserUncheckedCreateWithoutDistrictInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDistrictInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDistrictInput, UserUncheckedUpdateWithoutDistrictInput>
  }

  export type UserUpdateManyWithWhereWithoutDistrictInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDistrictInput>
  }

  export type CompanyUpsertWithWhereUniqueWithoutDistrictInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutDistrictInput, CompanyUncheckedUpdateWithoutDistrictInput>
    create: XOR<CompanyCreateWithoutDistrictInput, CompanyUncheckedCreateWithoutDistrictInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutDistrictInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutDistrictInput, CompanyUncheckedUpdateWithoutDistrictInput>
  }

  export type CompanyUpdateManyWithWhereWithoutDistrictInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutDistrictInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutDistrictInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutDistrictInput, ProjectUncheckedUpdateWithoutDistrictInput>
    create: XOR<ProjectCreateWithoutDistrictInput, ProjectUncheckedCreateWithoutDistrictInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutDistrictInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutDistrictInput, ProjectUncheckedUpdateWithoutDistrictInput>
  }

  export type ProjectUpdateManyWithWhereWithoutDistrictInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutDistrictInput>
  }

  export type StateCreateWithoutUsersInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictCreateNestedManyWithoutStateInput
    companies?: CompanyCreateNestedManyWithoutStateInput
    projects?: ProjectCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutUsersInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictUncheckedCreateNestedManyWithoutStateInput
    companies?: CompanyUncheckedCreateNestedManyWithoutStateInput
    projects?: ProjectUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutUsersInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
  }

  export type DistrictCreateWithoutUsersInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutDistrictsInput
    companies?: CompanyCreateNestedManyWithoutDistrictInput
    projects?: ProjectCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateWithoutUsersInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    companies?: CompanyUncheckedCreateNestedManyWithoutDistrictInput
    projects?: ProjectUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictCreateOrConnectWithoutUsersInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutUsersInput, DistrictUncheckedCreateWithoutUsersInput>
  }

  export type ProjectCreateWithoutClientUserInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutClientUserInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutClientUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput>
  }

  export type ProjectCreateManyClientUserInputEnvelope = {
    data: ProjectCreateManyClientUserInput | ProjectCreateManyClientUserInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutServiceProviderInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutServiceProviderInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutServiceProviderInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutServiceProviderInput, CompanyUncheckedCreateWithoutServiceProviderInput>
  }

  export type CompanyCreateManyServiceProviderInputEnvelope = {
    data: CompanyCreateManyServiceProviderInput | CompanyCreateManyServiceProviderInput[]
    skipDuplicates?: boolean
  }

  export type UserProjectCreateWithoutUserInput = {
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectUncheckedCreateWithoutUserInput = {
    projectId: string
    createdAt?: Date | string
  }

  export type UserProjectCreateOrConnectWithoutUserInput = {
    where: UserProjectWhereUniqueInput
    create: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput>
  }

  export type UserProjectCreateManyUserInputEnvelope = {
    data: UserProjectCreateManyUserInput | UserProjectCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCompanyCreateWithoutUserInput = {
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutUserCompaniesInput
  }

  export type UserCompanyUncheckedCreateWithoutUserInput = {
    companyId: string
    createdAt?: Date | string
  }

  export type UserCompanyCreateOrConnectWithoutUserInput = {
    where: UserCompanyWhereUniqueInput
    create: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput>
  }

  export type UserCompanyCreateManyUserInputEnvelope = {
    data: UserCompanyCreateManyUserInput | UserCompanyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleMembershipCreateWithoutUserInput = {
    id?: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutUserRoleMembershipsInput
    project?: ProjectCreateNestedOneWithoutUserRoleMembershipsInput
  }

  export type UserRoleMembershipUncheckedCreateWithoutUserInput = {
    id?: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    companyId?: string | null
    projectId?: string | null
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleMembershipCreateOrConnectWithoutUserInput = {
    where: UserRoleMembershipWhereUniqueInput
    create: XOR<UserRoleMembershipCreateWithoutUserInput, UserRoleMembershipUncheckedCreateWithoutUserInput>
  }

  export type UserRoleMembershipCreateManyUserInputEnvelope = {
    data: UserRoleMembershipCreateManyUserInput | UserRoleMembershipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutUsersInput = {
    update: XOR<StateUpdateWithoutUsersInput, StateUncheckedUpdateWithoutUsersInput>
    create: XOR<StateCreateWithoutUsersInput, StateUncheckedCreateWithoutUsersInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutUsersInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutUsersInput, StateUncheckedUpdateWithoutUsersInput>
  }

  export type StateUpdateWithoutUsersInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUpdateManyWithoutStateNestedInput
    companies?: CompanyUpdateManyWithoutStateNestedInput
    projects?: ProjectUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutUsersInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUncheckedUpdateManyWithoutStateNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutStateNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutStateNestedInput
  }

  export type DistrictUpsertWithoutUsersInput = {
    update: XOR<DistrictUpdateWithoutUsersInput, DistrictUncheckedUpdateWithoutUsersInput>
    create: XOR<DistrictCreateWithoutUsersInput, DistrictUncheckedCreateWithoutUsersInput>
    where?: DistrictWhereInput
  }

  export type DistrictUpdateToOneWithWhereWithoutUsersInput = {
    where?: DistrictWhereInput
    data: XOR<DistrictUpdateWithoutUsersInput, DistrictUncheckedUpdateWithoutUsersInput>
  }

  export type DistrictUpdateWithoutUsersInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutDistrictsNestedInput
    companies?: CompanyUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateWithoutUsersInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyUncheckedUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutClientUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutClientUserInput, ProjectUncheckedUpdateWithoutClientUserInput>
    create: XOR<ProjectCreateWithoutClientUserInput, ProjectUncheckedCreateWithoutClientUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutClientUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutClientUserInput, ProjectUncheckedUpdateWithoutClientUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutClientUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutClientUserInput>
  }

  export type CompanyUpsertWithWhereUniqueWithoutServiceProviderInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutServiceProviderInput, CompanyUncheckedUpdateWithoutServiceProviderInput>
    create: XOR<CompanyCreateWithoutServiceProviderInput, CompanyUncheckedCreateWithoutServiceProviderInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutServiceProviderInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutServiceProviderInput, CompanyUncheckedUpdateWithoutServiceProviderInput>
  }

  export type CompanyUpdateManyWithWhereWithoutServiceProviderInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutServiceProviderInput>
  }

  export type UserProjectUpsertWithWhereUniqueWithoutUserInput = {
    where: UserProjectWhereUniqueInput
    update: XOR<UserProjectUpdateWithoutUserInput, UserProjectUncheckedUpdateWithoutUserInput>
    create: XOR<UserProjectCreateWithoutUserInput, UserProjectUncheckedCreateWithoutUserInput>
  }

  export type UserProjectUpdateWithWhereUniqueWithoutUserInput = {
    where: UserProjectWhereUniqueInput
    data: XOR<UserProjectUpdateWithoutUserInput, UserProjectUncheckedUpdateWithoutUserInput>
  }

  export type UserProjectUpdateManyWithWhereWithoutUserInput = {
    where: UserProjectScalarWhereInput
    data: XOR<UserProjectUpdateManyMutationInput, UserProjectUncheckedUpdateManyWithoutUserInput>
  }

  export type UserProjectScalarWhereInput = {
    AND?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
    OR?: UserProjectScalarWhereInput[]
    NOT?: UserProjectScalarWhereInput | UserProjectScalarWhereInput[]
    userId?: UuidFilter<"UserProject"> | string
    projectId?: UuidFilter<"UserProject"> | string
    createdAt?: DateTimeFilter<"UserProject"> | Date | string
  }

  export type UserCompanyUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCompanyWhereUniqueInput
    update: XOR<UserCompanyUpdateWithoutUserInput, UserCompanyUncheckedUpdateWithoutUserInput>
    create: XOR<UserCompanyCreateWithoutUserInput, UserCompanyUncheckedCreateWithoutUserInput>
  }

  export type UserCompanyUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCompanyWhereUniqueInput
    data: XOR<UserCompanyUpdateWithoutUserInput, UserCompanyUncheckedUpdateWithoutUserInput>
  }

  export type UserCompanyUpdateManyWithWhereWithoutUserInput = {
    where: UserCompanyScalarWhereInput
    data: XOR<UserCompanyUpdateManyMutationInput, UserCompanyUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCompanyScalarWhereInput = {
    AND?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
    OR?: UserCompanyScalarWhereInput[]
    NOT?: UserCompanyScalarWhereInput | UserCompanyScalarWhereInput[]
    userId?: UuidFilter<"UserCompany"> | string
    companyId?: UuidFilter<"UserCompany"> | string
    createdAt?: DateTimeFilter<"UserCompany"> | Date | string
  }

  export type UserRoleMembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleMembershipWhereUniqueInput
    update: XOR<UserRoleMembershipUpdateWithoutUserInput, UserRoleMembershipUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleMembershipCreateWithoutUserInput, UserRoleMembershipUncheckedCreateWithoutUserInput>
  }

  export type UserRoleMembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleMembershipWhereUniqueInput
    data: XOR<UserRoleMembershipUpdateWithoutUserInput, UserRoleMembershipUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleMembershipUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleMembershipScalarWhereInput
    data: XOR<UserRoleMembershipUpdateManyMutationInput, UserRoleMembershipUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleMembershipScalarWhereInput = {
    AND?: UserRoleMembershipScalarWhereInput | UserRoleMembershipScalarWhereInput[]
    OR?: UserRoleMembershipScalarWhereInput[]
    NOT?: UserRoleMembershipScalarWhereInput | UserRoleMembershipScalarWhereInput[]
    id?: UuidFilter<"UserRoleMembership"> | string
    userId?: UuidFilter<"UserRoleMembership"> | string
    role?: EnumUserRoleFilter<"UserRoleMembership"> | $Enums.UserRole
    scopeType?: EnumRoleScopeFilter<"UserRoleMembership"> | $Enums.RoleScope
    companyId?: UuidNullableFilter<"UserRoleMembership"> | string | null
    projectId?: UuidNullableFilter<"UserRoleMembership"> | string | null
    isDefault?: BoolFilter<"UserRoleMembership"> | boolean
    canApprove?: BoolFilter<"UserRoleMembership"> | boolean
    validFrom?: DateTimeNullableFilter<"UserRoleMembership"> | Date | string | null
    validTo?: DateTimeNullableFilter<"UserRoleMembership"> | Date | string | null
    createdBy?: UuidNullableFilter<"UserRoleMembership"> | string | null
    notes?: StringNullableFilter<"UserRoleMembership"> | string | null
    createdAt?: DateTimeFilter<"UserRoleMembership"> | Date | string
    updatedAt?: DateTimeFilter<"UserRoleMembership"> | Date | string
  }

  export type StateCreateWithoutCompaniesInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
    projects?: ProjectCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutCompaniesInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
    projects?: ProjectUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutCompaniesInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutCompaniesInput, StateUncheckedCreateWithoutCompaniesInput>
  }

  export type DistrictCreateWithoutCompaniesInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutDistrictsInput
    users?: UserCreateNestedManyWithoutDistrictInput
    projects?: ProjectCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateWithoutCompaniesInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDistrictInput
    projects?: ProjectUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictCreateOrConnectWithoutCompaniesInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutCompaniesInput, DistrictUncheckedCreateWithoutCompaniesInput>
  }

  export type UserCreateWithoutCompaniesAsServiceProviderInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompaniesAsServiceProviderInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompaniesAsServiceProviderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompaniesAsServiceProviderInput, UserUncheckedCreateWithoutCompaniesAsServiceProviderInput>
  }

  export type ProjectCreateWithoutClientCompanyInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutClientCompanyInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutClientCompanyInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput>
  }

  export type ProjectCreateManyClientCompanyInputEnvelope = {
    data: ProjectCreateManyClientCompanyInput | ProjectCreateManyClientCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserCompanyCreateWithoutCompanyInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserCompaniesInput
  }

  export type UserCompanyUncheckedCreateWithoutCompanyInput = {
    userId: string
    createdAt?: Date | string
  }

  export type UserCompanyCreateOrConnectWithoutCompanyInput = {
    where: UserCompanyWhereUniqueInput
    create: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput>
  }

  export type UserCompanyCreateManyCompanyInputEnvelope = {
    data: UserCompanyCreateManyCompanyInput | UserCompanyCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleMembershipCreateWithoutCompanyInput = {
    id?: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserRoleMembershipsInput
    project?: ProjectCreateNestedOneWithoutUserRoleMembershipsInput
  }

  export type UserRoleMembershipUncheckedCreateWithoutCompanyInput = {
    id?: string
    userId: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    projectId?: string | null
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleMembershipCreateOrConnectWithoutCompanyInput = {
    where: UserRoleMembershipWhereUniqueInput
    create: XOR<UserRoleMembershipCreateWithoutCompanyInput, UserRoleMembershipUncheckedCreateWithoutCompanyInput>
  }

  export type UserRoleMembershipCreateManyCompanyInputEnvelope = {
    data: UserRoleMembershipCreateManyCompanyInput | UserRoleMembershipCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutCompaniesInput = {
    update: XOR<StateUpdateWithoutCompaniesInput, StateUncheckedUpdateWithoutCompaniesInput>
    create: XOR<StateCreateWithoutCompaniesInput, StateUncheckedCreateWithoutCompaniesInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutCompaniesInput, StateUncheckedUpdateWithoutCompaniesInput>
  }

  export type StateUpdateWithoutCompaniesInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
    projects?: ProjectUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutCompaniesInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutStateNestedInput
  }

  export type DistrictUpsertWithoutCompaniesInput = {
    update: XOR<DistrictUpdateWithoutCompaniesInput, DistrictUncheckedUpdateWithoutCompaniesInput>
    create: XOR<DistrictCreateWithoutCompaniesInput, DistrictUncheckedCreateWithoutCompaniesInput>
    where?: DistrictWhereInput
  }

  export type DistrictUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: DistrictWhereInput
    data: XOR<DistrictUpdateWithoutCompaniesInput, DistrictUncheckedUpdateWithoutCompaniesInput>
  }

  export type DistrictUpdateWithoutCompaniesInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutDistrictsNestedInput
    users?: UserUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateWithoutCompaniesInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type UserUpsertWithoutCompaniesAsServiceProviderInput = {
    update: XOR<UserUpdateWithoutCompaniesAsServiceProviderInput, UserUncheckedUpdateWithoutCompaniesAsServiceProviderInput>
    create: XOR<UserCreateWithoutCompaniesAsServiceProviderInput, UserUncheckedCreateWithoutCompaniesAsServiceProviderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompaniesAsServiceProviderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompaniesAsServiceProviderInput, UserUncheckedUpdateWithoutCompaniesAsServiceProviderInput>
  }

  export type UserUpdateWithoutCompaniesAsServiceProviderInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompaniesAsServiceProviderInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutClientCompanyInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutClientCompanyInput, ProjectUncheckedUpdateWithoutClientCompanyInput>
    create: XOR<ProjectCreateWithoutClientCompanyInput, ProjectUncheckedCreateWithoutClientCompanyInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutClientCompanyInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutClientCompanyInput, ProjectUncheckedUpdateWithoutClientCompanyInput>
  }

  export type ProjectUpdateManyWithWhereWithoutClientCompanyInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutClientCompanyInput>
  }

  export type UserCompanyUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserCompanyWhereUniqueInput
    update: XOR<UserCompanyUpdateWithoutCompanyInput, UserCompanyUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCompanyCreateWithoutCompanyInput, UserCompanyUncheckedCreateWithoutCompanyInput>
  }

  export type UserCompanyUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserCompanyWhereUniqueInput
    data: XOR<UserCompanyUpdateWithoutCompanyInput, UserCompanyUncheckedUpdateWithoutCompanyInput>
  }

  export type UserCompanyUpdateManyWithWhereWithoutCompanyInput = {
    where: UserCompanyScalarWhereInput
    data: XOR<UserCompanyUpdateManyMutationInput, UserCompanyUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserRoleMembershipUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserRoleMembershipWhereUniqueInput
    update: XOR<UserRoleMembershipUpdateWithoutCompanyInput, UserRoleMembershipUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserRoleMembershipCreateWithoutCompanyInput, UserRoleMembershipUncheckedCreateWithoutCompanyInput>
  }

  export type UserRoleMembershipUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserRoleMembershipWhereUniqueInput
    data: XOR<UserRoleMembershipUpdateWithoutCompanyInput, UserRoleMembershipUncheckedUpdateWithoutCompanyInput>
  }

  export type UserRoleMembershipUpdateManyWithWhereWithoutCompanyInput = {
    where: UserRoleMembershipScalarWhereInput
    data: XOR<UserRoleMembershipUpdateManyMutationInput, UserRoleMembershipUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserCreateWithoutProjectsAsClientInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    companiesAsServiceProvider?: CompanyCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsAsClientInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    companiesAsServiceProvider?: CompanyUncheckedCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsAsClientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsAsClientInput, UserUncheckedCreateWithoutProjectsAsClientInput>
  }

  export type CompanyCreateWithoutProjectsInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    serviceProvider?: UserCreateNestedOneWithoutCompaniesAsServiceProviderInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutProjectsInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutProjectsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutProjectsInput, CompanyUncheckedCreateWithoutProjectsInput>
  }

  export type StateCreateWithoutProjectsInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictCreateNestedManyWithoutStateInput
    users?: UserCreateNestedManyWithoutStateInput
    companies?: CompanyCreateNestedManyWithoutStateInput
  }

  export type StateUncheckedCreateWithoutProjectsInput = {
    stateId?: string
    code: string
    name: string
    type: $Enums.StateType
    createdAt?: Date | string
    updatedAt?: Date | string
    districts?: DistrictUncheckedCreateNestedManyWithoutStateInput
    users?: UserUncheckedCreateNestedManyWithoutStateInput
    companies?: CompanyUncheckedCreateNestedManyWithoutStateInput
  }

  export type StateCreateOrConnectWithoutProjectsInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutProjectsInput, StateUncheckedCreateWithoutProjectsInput>
  }

  export type DistrictCreateWithoutProjectsInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    state: StateCreateNestedOneWithoutDistrictsInput
    users?: UserCreateNestedManyWithoutDistrictInput
    companies?: CompanyCreateNestedManyWithoutDistrictInput
  }

  export type DistrictUncheckedCreateWithoutProjectsInput = {
    districtId?: string
    name: string
    stateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDistrictInput
    companies?: CompanyUncheckedCreateNestedManyWithoutDistrictInput
  }

  export type DistrictCreateOrConnectWithoutProjectsInput = {
    where: DistrictWhereUniqueInput
    create: XOR<DistrictCreateWithoutProjectsInput, DistrictUncheckedCreateWithoutProjectsInput>
  }

  export type ProjectTagCreateWithoutProjectInput = {
    tag: RefProjectTagCreateNestedOneWithoutTagsInput
  }

  export type ProjectTagUncheckedCreateWithoutProjectInput = {
    tagCode: string
  }

  export type ProjectTagCreateOrConnectWithoutProjectInput = {
    where: ProjectTagWhereUniqueInput
    create: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput>
  }

  export type ProjectTagCreateManyProjectInputEnvelope = {
    data: ProjectTagCreateManyProjectInput | ProjectTagCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserProjectCreateWithoutProjectInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectUncheckedCreateWithoutProjectInput = {
    userId: string
    createdAt?: Date | string
  }

  export type UserProjectCreateOrConnectWithoutProjectInput = {
    where: UserProjectWhereUniqueInput
    create: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput>
  }

  export type UserProjectCreateManyProjectInputEnvelope = {
    data: UserProjectCreateManyProjectInput | UserProjectCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleMembershipCreateWithoutProjectInput = {
    id?: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserRoleMembershipsInput
    company?: CompanyCreateNestedOneWithoutUserRoleMembershipsInput
  }

  export type UserRoleMembershipUncheckedCreateWithoutProjectInput = {
    id?: string
    userId: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    companyId?: string | null
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleMembershipCreateOrConnectWithoutProjectInput = {
    where: UserRoleMembershipWhereUniqueInput
    create: XOR<UserRoleMembershipCreateWithoutProjectInput, UserRoleMembershipUncheckedCreateWithoutProjectInput>
  }

  export type UserRoleMembershipCreateManyProjectInputEnvelope = {
    data: UserRoleMembershipCreateManyProjectInput | UserRoleMembershipCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type PermissionProjectOverrideCreateWithoutProjectInput = {
    id?: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionProjectOverrideUncheckedCreateWithoutProjectInput = {
    id?: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionProjectOverrideCreateOrConnectWithoutProjectInput = {
    where: PermissionProjectOverrideWhereUniqueInput
    create: XOR<PermissionProjectOverrideCreateWithoutProjectInput, PermissionProjectOverrideUncheckedCreateWithoutProjectInput>
  }

  export type PermissionProjectOverrideCreateManyProjectInputEnvelope = {
    data: PermissionProjectOverrideCreateManyProjectInput | PermissionProjectOverrideCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProjectsAsClientInput = {
    update: XOR<UserUpdateWithoutProjectsAsClientInput, UserUncheckedUpdateWithoutProjectsAsClientInput>
    create: XOR<UserCreateWithoutProjectsAsClientInput, UserUncheckedCreateWithoutProjectsAsClientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsAsClientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsAsClientInput, UserUncheckedUpdateWithoutProjectsAsClientInput>
  }

  export type UserUpdateWithoutProjectsAsClientInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    companiesAsServiceProvider?: CompanyUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsAsClientInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    companiesAsServiceProvider?: CompanyUncheckedUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyUpsertWithoutProjectsInput = {
    update: XOR<CompanyUpdateWithoutProjectsInput, CompanyUncheckedUpdateWithoutProjectsInput>
    create: XOR<CompanyCreateWithoutProjectsInput, CompanyUncheckedCreateWithoutProjectsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutProjectsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutProjectsInput, CompanyUncheckedUpdateWithoutProjectsInput>
  }

  export type CompanyUpdateWithoutProjectsInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    serviceProvider?: UserUpdateOneWithoutCompaniesAsServiceProviderNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutProjectsInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type StateUpsertWithoutProjectsInput = {
    update: XOR<StateUpdateWithoutProjectsInput, StateUncheckedUpdateWithoutProjectsInput>
    create: XOR<StateCreateWithoutProjectsInput, StateUncheckedCreateWithoutProjectsInput>
    where?: StateWhereInput
  }

  export type StateUpdateToOneWithWhereWithoutProjectsInput = {
    where?: StateWhereInput
    data: XOR<StateUpdateWithoutProjectsInput, StateUncheckedUpdateWithoutProjectsInput>
  }

  export type StateUpdateWithoutProjectsInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUpdateManyWithoutStateNestedInput
    users?: UserUpdateManyWithoutStateNestedInput
    companies?: CompanyUpdateManyWithoutStateNestedInput
  }

  export type StateUncheckedUpdateWithoutProjectsInput = {
    stateId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStateTypeFieldUpdateOperationsInput | $Enums.StateType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    districts?: DistrictUncheckedUpdateManyWithoutStateNestedInput
    users?: UserUncheckedUpdateManyWithoutStateNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutStateNestedInput
  }

  export type DistrictUpsertWithoutProjectsInput = {
    update: XOR<DistrictUpdateWithoutProjectsInput, DistrictUncheckedUpdateWithoutProjectsInput>
    create: XOR<DistrictCreateWithoutProjectsInput, DistrictUncheckedCreateWithoutProjectsInput>
    where?: DistrictWhereInput
  }

  export type DistrictUpdateToOneWithWhereWithoutProjectsInput = {
    where?: DistrictWhereInput
    data: XOR<DistrictUpdateWithoutProjectsInput, DistrictUncheckedUpdateWithoutProjectsInput>
  }

  export type DistrictUpdateWithoutProjectsInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneRequiredWithoutDistrictsNestedInput
    users?: UserUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateWithoutProjectsInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type ProjectTagUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectTagWhereUniqueInput
    update: XOR<ProjectTagUpdateWithoutProjectInput, ProjectTagUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectTagCreateWithoutProjectInput, ProjectTagUncheckedCreateWithoutProjectInput>
  }

  export type ProjectTagUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectTagWhereUniqueInput
    data: XOR<ProjectTagUpdateWithoutProjectInput, ProjectTagUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectTagUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectTagScalarWhereInput
    data: XOR<ProjectTagUpdateManyMutationInput, ProjectTagUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectTagScalarWhereInput = {
    AND?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
    OR?: ProjectTagScalarWhereInput[]
    NOT?: ProjectTagScalarWhereInput | ProjectTagScalarWhereInput[]
    projectId?: UuidFilter<"ProjectTag"> | string
    tagCode?: StringFilter<"ProjectTag"> | string
  }

  export type UserProjectUpsertWithWhereUniqueWithoutProjectInput = {
    where: UserProjectWhereUniqueInput
    update: XOR<UserProjectUpdateWithoutProjectInput, UserProjectUncheckedUpdateWithoutProjectInput>
    create: XOR<UserProjectCreateWithoutProjectInput, UserProjectUncheckedCreateWithoutProjectInput>
  }

  export type UserProjectUpdateWithWhereUniqueWithoutProjectInput = {
    where: UserProjectWhereUniqueInput
    data: XOR<UserProjectUpdateWithoutProjectInput, UserProjectUncheckedUpdateWithoutProjectInput>
  }

  export type UserProjectUpdateManyWithWhereWithoutProjectInput = {
    where: UserProjectScalarWhereInput
    data: XOR<UserProjectUpdateManyMutationInput, UserProjectUncheckedUpdateManyWithoutProjectInput>
  }

  export type UserRoleMembershipUpsertWithWhereUniqueWithoutProjectInput = {
    where: UserRoleMembershipWhereUniqueInput
    update: XOR<UserRoleMembershipUpdateWithoutProjectInput, UserRoleMembershipUncheckedUpdateWithoutProjectInput>
    create: XOR<UserRoleMembershipCreateWithoutProjectInput, UserRoleMembershipUncheckedCreateWithoutProjectInput>
  }

  export type UserRoleMembershipUpdateWithWhereUniqueWithoutProjectInput = {
    where: UserRoleMembershipWhereUniqueInput
    data: XOR<UserRoleMembershipUpdateWithoutProjectInput, UserRoleMembershipUncheckedUpdateWithoutProjectInput>
  }

  export type UserRoleMembershipUpdateManyWithWhereWithoutProjectInput = {
    where: UserRoleMembershipScalarWhereInput
    data: XOR<UserRoleMembershipUpdateManyMutationInput, UserRoleMembershipUncheckedUpdateManyWithoutProjectInput>
  }

  export type PermissionProjectOverrideUpsertWithWhereUniqueWithoutProjectInput = {
    where: PermissionProjectOverrideWhereUniqueInput
    update: XOR<PermissionProjectOverrideUpdateWithoutProjectInput, PermissionProjectOverrideUncheckedUpdateWithoutProjectInput>
    create: XOR<PermissionProjectOverrideCreateWithoutProjectInput, PermissionProjectOverrideUncheckedCreateWithoutProjectInput>
  }

  export type PermissionProjectOverrideUpdateWithWhereUniqueWithoutProjectInput = {
    where: PermissionProjectOverrideWhereUniqueInput
    data: XOR<PermissionProjectOverrideUpdateWithoutProjectInput, PermissionProjectOverrideUncheckedUpdateWithoutProjectInput>
  }

  export type PermissionProjectOverrideUpdateManyWithWhereWithoutProjectInput = {
    where: PermissionProjectOverrideScalarWhereInput
    data: XOR<PermissionProjectOverrideUpdateManyMutationInput, PermissionProjectOverrideUncheckedUpdateManyWithoutProjectInput>
  }

  export type PermissionProjectOverrideScalarWhereInput = {
    AND?: PermissionProjectOverrideScalarWhereInput | PermissionProjectOverrideScalarWhereInput[]
    OR?: PermissionProjectOverrideScalarWhereInput[]
    NOT?: PermissionProjectOverrideScalarWhereInput | PermissionProjectOverrideScalarWhereInput[]
    id?: UuidFilter<"PermissionProjectOverride"> | string
    projectId?: UuidFilter<"PermissionProjectOverride"> | string
    role?: EnumUserRoleFilter<"PermissionProjectOverride"> | $Enums.UserRole
    matrix?: JsonFilter<"PermissionProjectOverride">
    createdAt?: DateTimeFilter<"PermissionProjectOverride"> | Date | string
    updatedAt?: DateTimeFilter<"PermissionProjectOverride"> | Date | string
  }

  export type ProjectTagCreateWithoutTagInput = {
    project: ProjectCreateNestedOneWithoutProjectTagsInput
  }

  export type ProjectTagUncheckedCreateWithoutTagInput = {
    projectId: string
  }

  export type ProjectTagCreateOrConnectWithoutTagInput = {
    where: ProjectTagWhereUniqueInput
    create: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput>
  }

  export type ProjectTagCreateManyTagInputEnvelope = {
    data: ProjectTagCreateManyTagInput | ProjectTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type ProjectTagUpsertWithWhereUniqueWithoutTagInput = {
    where: ProjectTagWhereUniqueInput
    update: XOR<ProjectTagUpdateWithoutTagInput, ProjectTagUncheckedUpdateWithoutTagInput>
    create: XOR<ProjectTagCreateWithoutTagInput, ProjectTagUncheckedCreateWithoutTagInput>
  }

  export type ProjectTagUpdateWithWhereUniqueWithoutTagInput = {
    where: ProjectTagWhereUniqueInput
    data: XOR<ProjectTagUpdateWithoutTagInput, ProjectTagUncheckedUpdateWithoutTagInput>
  }

  export type ProjectTagUpdateManyWithWhereWithoutTagInput = {
    where: ProjectTagScalarWhereInput
    data: XOR<ProjectTagUpdateManyMutationInput, ProjectTagUncheckedUpdateManyWithoutTagInput>
  }

  export type ProjectCreateWithoutProjectTagsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutProjectTagsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutProjectTagsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProjectTagsInput, ProjectUncheckedCreateWithoutProjectTagsInput>
  }

  export type RefProjectTagCreateWithoutTagsInput = {
    tagCode: string
    label: string
  }

  export type RefProjectTagUncheckedCreateWithoutTagsInput = {
    tagCode: string
    label: string
  }

  export type RefProjectTagCreateOrConnectWithoutTagsInput = {
    where: RefProjectTagWhereUniqueInput
    create: XOR<RefProjectTagCreateWithoutTagsInput, RefProjectTagUncheckedCreateWithoutTagsInput>
  }

  export type ProjectUpsertWithoutProjectTagsInput = {
    update: XOR<ProjectUpdateWithoutProjectTagsInput, ProjectUncheckedUpdateWithoutProjectTagsInput>
    create: XOR<ProjectCreateWithoutProjectTagsInput, ProjectUncheckedCreateWithoutProjectTagsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutProjectTagsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutProjectTagsInput, ProjectUncheckedUpdateWithoutProjectTagsInput>
  }

  export type ProjectUpdateWithoutProjectTagsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProjectTagsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type RefProjectTagUpsertWithoutTagsInput = {
    update: XOR<RefProjectTagUpdateWithoutTagsInput, RefProjectTagUncheckedUpdateWithoutTagsInput>
    create: XOR<RefProjectTagCreateWithoutTagsInput, RefProjectTagUncheckedCreateWithoutTagsInput>
    where?: RefProjectTagWhereInput
  }

  export type RefProjectTagUpdateToOneWithWhereWithoutTagsInput = {
    where?: RefProjectTagWhereInput
    data: XOR<RefProjectTagUpdateWithoutTagsInput, RefProjectTagUncheckedUpdateWithoutTagsInput>
  }

  export type RefProjectTagUpdateWithoutTagsInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type RefProjectTagUncheckedUpdateWithoutTagsInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutUserProjectsInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyCreateNestedManyWithoutServiceProviderInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserProjectsInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyUncheckedCreateNestedManyWithoutServiceProviderInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
  }

  export type ProjectCreateWithoutUserProjectsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUserProjectsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUserProjectsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
  }

  export type UserUpsertWithoutUserProjectsInput = {
    update: XOR<UserUpdateWithoutUserProjectsInput, UserUncheckedUpdateWithoutUserProjectsInput>
    create: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserProjectsInput, UserUncheckedUpdateWithoutUserProjectsInput>
  }

  export type UserUpdateWithoutUserProjectsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUpdateManyWithoutServiceProviderNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserProjectsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUncheckedUpdateManyWithoutServiceProviderNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutUserProjectsInput = {
    update: XOR<ProjectUpdateWithoutUserProjectsInput, ProjectUncheckedUpdateWithoutUserProjectsInput>
    create: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutUserProjectsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutUserProjectsInput, ProjectUncheckedUpdateWithoutUserProjectsInput>
  }

  export type ProjectUpdateWithoutUserProjectsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserProjectsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateWithoutUserCompaniesInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserCompaniesInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyUncheckedCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserCompaniesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserCompaniesInput, UserUncheckedCreateWithoutUserCompaniesInput>
  }

  export type CompanyCreateWithoutUserCompaniesInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    serviceProvider?: UserCreateNestedOneWithoutCompaniesAsServiceProviderInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUserCompaniesInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUserCompaniesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUserCompaniesInput, CompanyUncheckedCreateWithoutUserCompaniesInput>
  }

  export type UserUpsertWithoutUserCompaniesInput = {
    update: XOR<UserUpdateWithoutUserCompaniesInput, UserUncheckedUpdateWithoutUserCompaniesInput>
    create: XOR<UserCreateWithoutUserCompaniesInput, UserUncheckedCreateWithoutUserCompaniesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserCompaniesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserCompaniesInput, UserUncheckedUpdateWithoutUserCompaniesInput>
  }

  export type UserUpdateWithoutUserCompaniesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserCompaniesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUncheckedUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyUpsertWithoutUserCompaniesInput = {
    update: XOR<CompanyUpdateWithoutUserCompaniesInput, CompanyUncheckedUpdateWithoutUserCompaniesInput>
    create: XOR<CompanyCreateWithoutUserCompaniesInput, CompanyUncheckedCreateWithoutUserCompaniesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUserCompaniesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUserCompaniesInput, CompanyUncheckedUpdateWithoutUserCompaniesInput>
  }

  export type CompanyUpdateWithoutUserCompaniesInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    serviceProvider?: UserUpdateOneWithoutCompaniesAsServiceProviderNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUserCompaniesInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserCreateWithoutUserRoleMembershipsInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    state?: StateCreateNestedOneWithoutUsersInput
    district?: DistrictCreateNestedOneWithoutUsersInput
    projectsAsClient?: ProjectCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRoleMembershipsInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedCreateNestedManyWithoutClientUserInput
    companiesAsServiceProvider?: CompanyUncheckedCreateNestedManyWithoutServiceProviderInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutUserInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRoleMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRoleMembershipsInput, UserUncheckedCreateWithoutUserRoleMembershipsInput>
  }

  export type CompanyCreateWithoutUserRoleMembershipsInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    state?: StateCreateNestedOneWithoutCompaniesInput
    district?: DistrictCreateNestedOneWithoutCompaniesInput
    serviceProvider?: UserCreateNestedOneWithoutCompaniesAsServiceProviderInput
    projects?: ProjectCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUserRoleMembershipsInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientCompanyInput
    userCompanies?: UserCompanyUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUserRoleMembershipsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUserRoleMembershipsInput, CompanyUncheckedCreateWithoutUserRoleMembershipsInput>
  }

  export type ProjectCreateWithoutUserRoleMembershipsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUserRoleMembershipsInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUserRoleMembershipsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserRoleMembershipsInput, ProjectUncheckedCreateWithoutUserRoleMembershipsInput>
  }

  export type UserUpsertWithoutUserRoleMembershipsInput = {
    update: XOR<UserUpdateWithoutUserRoleMembershipsInput, UserUncheckedUpdateWithoutUserRoleMembershipsInput>
    create: XOR<UserCreateWithoutUserRoleMembershipsInput, UserUncheckedCreateWithoutUserRoleMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRoleMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRoleMembershipsInput, UserUncheckedUpdateWithoutUserRoleMembershipsInput>
  }

  export type UserUpdateWithoutUserRoleMembershipsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRoleMembershipsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUncheckedUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyUpsertWithoutUserRoleMembershipsInput = {
    update: XOR<CompanyUpdateWithoutUserRoleMembershipsInput, CompanyUncheckedUpdateWithoutUserRoleMembershipsInput>
    create: XOR<CompanyCreateWithoutUserRoleMembershipsInput, CompanyUncheckedCreateWithoutUserRoleMembershipsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUserRoleMembershipsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUserRoleMembershipsInput, CompanyUncheckedUpdateWithoutUserRoleMembershipsInput>
  }

  export type CompanyUpdateWithoutUserRoleMembershipsInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    serviceProvider?: UserUpdateOneWithoutCompaniesAsServiceProviderNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUserRoleMembershipsInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type ProjectUpsertWithoutUserRoleMembershipsInput = {
    update: XOR<ProjectUpdateWithoutUserRoleMembershipsInput, ProjectUncheckedUpdateWithoutUserRoleMembershipsInput>
    create: XOR<ProjectCreateWithoutUserRoleMembershipsInput, ProjectUncheckedCreateWithoutUserRoleMembershipsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutUserRoleMembershipsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutUserRoleMembershipsInput, ProjectUncheckedUpdateWithoutUserRoleMembershipsInput>
  }

  export type ProjectUpdateWithoutUserRoleMembershipsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserRoleMembershipsInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutPermissionProjectOverrideInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    address?: string | null
    cityTown?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientUser?: UserCreateNestedOneWithoutProjectsAsClientInput
    clientCompany?: CompanyCreateNestedOneWithoutProjectsInput
    state?: StateCreateNestedOneWithoutProjectsInput
    district?: DistrictCreateNestedOneWithoutProjectsInput
    projectTags?: ProjectTagCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutPermissionProjectOverrideInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectTags?: ProjectTagUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectUncheckedCreateNestedManyWithoutProjectInput
    userRoleMemberships?: UserRoleMembershipUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutPermissionProjectOverrideInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutPermissionProjectOverrideInput, ProjectUncheckedCreateWithoutPermissionProjectOverrideInput>
  }

  export type ProjectUpsertWithoutPermissionProjectOverrideInput = {
    update: XOR<ProjectUpdateWithoutPermissionProjectOverrideInput, ProjectUncheckedUpdateWithoutPermissionProjectOverrideInput>
    create: XOR<ProjectCreateWithoutPermissionProjectOverrideInput, ProjectUncheckedCreateWithoutPermissionProjectOverrideInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutPermissionProjectOverrideInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutPermissionProjectOverrideInput, ProjectUncheckedUpdateWithoutPermissionProjectOverrideInput>
  }

  export type ProjectUpdateWithoutPermissionProjectOverrideInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutPermissionProjectOverrideInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type RefChecklistItemCreateWithoutChecklistInput = {
    id?: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
    suggestedActivities?: RefChecklistItemActivityLinkCreateNestedManyWithoutItemInput
    suggestedMaterials?: RefChecklistItemMaterialLinkCreateNestedManyWithoutItemInput
  }

  export type RefChecklistItemUncheckedCreateWithoutChecklistInput = {
    id?: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
    suggestedActivities?: RefChecklistItemActivityLinkUncheckedCreateNestedManyWithoutItemInput
    suggestedMaterials?: RefChecklistItemMaterialLinkUncheckedCreateNestedManyWithoutItemInput
  }

  export type RefChecklistItemCreateOrConnectWithoutChecklistInput = {
    where: RefChecklistItemWhereUniqueInput
    create: XOR<RefChecklistItemCreateWithoutChecklistInput, RefChecklistItemUncheckedCreateWithoutChecklistInput>
  }

  export type RefChecklistItemCreateManyChecklistInputEnvelope = {
    data: RefChecklistItemCreateManyChecklistInput | RefChecklistItemCreateManyChecklistInput[]
    skipDuplicates?: boolean
  }

  export type RefChecklistItemUpsertWithWhereUniqueWithoutChecklistInput = {
    where: RefChecklistItemWhereUniqueInput
    update: XOR<RefChecklistItemUpdateWithoutChecklistInput, RefChecklistItemUncheckedUpdateWithoutChecklistInput>
    create: XOR<RefChecklistItemCreateWithoutChecklistInput, RefChecklistItemUncheckedCreateWithoutChecklistInput>
  }

  export type RefChecklistItemUpdateWithWhereUniqueWithoutChecklistInput = {
    where: RefChecklistItemWhereUniqueInput
    data: XOR<RefChecklistItemUpdateWithoutChecklistInput, RefChecklistItemUncheckedUpdateWithoutChecklistInput>
  }

  export type RefChecklistItemUpdateManyWithWhereWithoutChecklistInput = {
    where: RefChecklistItemScalarWhereInput
    data: XOR<RefChecklistItemUpdateManyMutationInput, RefChecklistItemUncheckedUpdateManyWithoutChecklistInput>
  }

  export type RefChecklistItemScalarWhereInput = {
    AND?: RefChecklistItemScalarWhereInput | RefChecklistItemScalarWhereInput[]
    OR?: RefChecklistItemScalarWhereInput[]
    NOT?: RefChecklistItemScalarWhereInput | RefChecklistItemScalarWhereInput[]
    id?: UuidFilter<"RefChecklistItem"> | string
    checklistId?: UuidFilter<"RefChecklistItem"> | string
    seq?: IntFilter<"RefChecklistItem"> | number
    text?: StringFilter<"RefChecklistItem"> | string
    requirement?: StringNullableFilter<"RefChecklistItem"> | string | null
    method?: StringNullableListFilter<"RefChecklistItem">
    risk?: StringNullableFilter<"RefChecklistItem"> | string | null
    tags?: StringNullableListFilter<"RefChecklistItem">
    itemCode?: StringNullableFilter<"RefChecklistItem"> | string | null
    critical?: BoolNullableFilter<"RefChecklistItem"> | boolean | null
    aiEnabled?: BoolNullableFilter<"RefChecklistItem"> | boolean | null
    aiConfidence?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    units?: StringNullableFilter<"RefChecklistItem"> | string | null
    tolerance?: StringNullableFilter<"RefChecklistItem"> | string | null
    base?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    plus?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
    minus?: DecimalNullableFilter<"RefChecklistItem"> | Decimal | DecimalJsLike | number | string | null
  }

  export type RefChecklistCreateWithoutItemsInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    tags?: RefChecklistCreatetagsInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    aiDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefChecklistUncheckedCreateWithoutItemsInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    tags?: RefChecklistCreatetagsInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    aiDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefChecklistCreateOrConnectWithoutItemsInput = {
    where: RefChecklistWhereUniqueInput
    create: XOR<RefChecklistCreateWithoutItemsInput, RefChecklistUncheckedCreateWithoutItemsInput>
  }

  export type RefChecklistItemActivityLinkCreateWithoutItemInput = {
    id?: string
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
    activity?: RefActivityCreateNestedOneWithoutRefChecklistItemActivityLinkInput
  }

  export type RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput = {
    id?: string
    activityId?: string | null
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
  }

  export type RefChecklistItemActivityLinkCreateOrConnectWithoutItemInput = {
    where: RefChecklistItemActivityLinkWhereUniqueInput
    create: XOR<RefChecklistItemActivityLinkCreateWithoutItemInput, RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput>
  }

  export type RefChecklistItemActivityLinkCreateManyItemInputEnvelope = {
    data: RefChecklistItemActivityLinkCreateManyItemInput | RefChecklistItemActivityLinkCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type RefChecklistItemMaterialLinkCreateWithoutItemInput = {
    id?: string
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
    material?: RefMaterialCreateNestedOneWithoutRefChecklistItemMaterialLinkInput
  }

  export type RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput = {
    id?: string
    materialId?: string | null
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemMaterialLinkCreateOrConnectWithoutItemInput = {
    where: RefChecklistItemMaterialLinkWhereUniqueInput
    create: XOR<RefChecklistItemMaterialLinkCreateWithoutItemInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput>
  }

  export type RefChecklistItemMaterialLinkCreateManyItemInputEnvelope = {
    data: RefChecklistItemMaterialLinkCreateManyItemInput | RefChecklistItemMaterialLinkCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type RefChecklistUpsertWithoutItemsInput = {
    update: XOR<RefChecklistUpdateWithoutItemsInput, RefChecklistUncheckedUpdateWithoutItemsInput>
    create: XOR<RefChecklistCreateWithoutItemsInput, RefChecklistUncheckedCreateWithoutItemsInput>
    where?: RefChecklistWhereInput
  }

  export type RefChecklistUpdateToOneWithWhereWithoutItemsInput = {
    where?: RefChecklistWhereInput
    data: XOR<RefChecklistUpdateWithoutItemsInput, RefChecklistUncheckedUpdateWithoutItemsInput>
  }

  export type RefChecklistUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistUpdatetagsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    aiDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefChecklistUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistUpdatetagsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    aiDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutItemInput = {
    where: RefChecklistItemActivityLinkWhereUniqueInput
    update: XOR<RefChecklistItemActivityLinkUpdateWithoutItemInput, RefChecklistItemActivityLinkUncheckedUpdateWithoutItemInput>
    create: XOR<RefChecklistItemActivityLinkCreateWithoutItemInput, RefChecklistItemActivityLinkUncheckedCreateWithoutItemInput>
  }

  export type RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutItemInput = {
    where: RefChecklistItemActivityLinkWhereUniqueInput
    data: XOR<RefChecklistItemActivityLinkUpdateWithoutItemInput, RefChecklistItemActivityLinkUncheckedUpdateWithoutItemInput>
  }

  export type RefChecklistItemActivityLinkUpdateManyWithWhereWithoutItemInput = {
    where: RefChecklistItemActivityLinkScalarWhereInput
    data: XOR<RefChecklistItemActivityLinkUpdateManyMutationInput, RefChecklistItemActivityLinkUncheckedUpdateManyWithoutItemInput>
  }

  export type RefChecklistItemActivityLinkScalarWhereInput = {
    AND?: RefChecklistItemActivityLinkScalarWhereInput | RefChecklistItemActivityLinkScalarWhereInput[]
    OR?: RefChecklistItemActivityLinkScalarWhereInput[]
    NOT?: RefChecklistItemActivityLinkScalarWhereInput | RefChecklistItemActivityLinkScalarWhereInput[]
    id?: UuidFilter<"RefChecklistItemActivityLink"> | string
    itemId?: UuidFilter<"RefChecklistItemActivityLink"> | string
    activityId?: UuidNullableFilter<"RefChecklistItemActivityLink"> | string | null
    label?: StringFilter<"RefChecklistItemActivityLink"> | string
    tags?: StringNullableListFilter<"RefChecklistItemActivityLink">
  }

  export type RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutItemInput = {
    where: RefChecklistItemMaterialLinkWhereUniqueInput
    update: XOR<RefChecklistItemMaterialLinkUpdateWithoutItemInput, RefChecklistItemMaterialLinkUncheckedUpdateWithoutItemInput>
    create: XOR<RefChecklistItemMaterialLinkCreateWithoutItemInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutItemInput>
  }

  export type RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutItemInput = {
    where: RefChecklistItemMaterialLinkWhereUniqueInput
    data: XOR<RefChecklistItemMaterialLinkUpdateWithoutItemInput, RefChecklistItemMaterialLinkUncheckedUpdateWithoutItemInput>
  }

  export type RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutItemInput = {
    where: RefChecklistItemMaterialLinkScalarWhereInput
    data: XOR<RefChecklistItemMaterialLinkUpdateManyMutationInput, RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutItemInput>
  }

  export type RefChecklistItemMaterialLinkScalarWhereInput = {
    AND?: RefChecklistItemMaterialLinkScalarWhereInput | RefChecklistItemMaterialLinkScalarWhereInput[]
    OR?: RefChecklistItemMaterialLinkScalarWhereInput[]
    NOT?: RefChecklistItemMaterialLinkScalarWhereInput | RefChecklistItemMaterialLinkScalarWhereInput[]
    id?: UuidFilter<"RefChecklistItemMaterialLink"> | string
    itemId?: UuidFilter<"RefChecklistItemMaterialLink"> | string
    materialId?: UuidNullableFilter<"RefChecklistItemMaterialLink"> | string | null
    name?: StringFilter<"RefChecklistItemMaterialLink"> | string
    category?: StringNullableFilter<"RefChecklistItemMaterialLink"> | string | null
    properties?: JsonNullableFilter<"RefChecklistItemMaterialLink">
  }

  export type RefChecklistItemCreateWithoutSuggestedActivitiesInput = {
    id?: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
    checklist: RefChecklistCreateNestedOneWithoutItemsInput
    suggestedMaterials?: RefChecklistItemMaterialLinkCreateNestedManyWithoutItemInput
  }

  export type RefChecklistItemUncheckedCreateWithoutSuggestedActivitiesInput = {
    id?: string
    checklistId: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
    suggestedMaterials?: RefChecklistItemMaterialLinkUncheckedCreateNestedManyWithoutItemInput
  }

  export type RefChecklistItemCreateOrConnectWithoutSuggestedActivitiesInput = {
    where: RefChecklistItemWhereUniqueInput
    create: XOR<RefChecklistItemCreateWithoutSuggestedActivitiesInput, RefChecklistItemUncheckedCreateWithoutSuggestedActivitiesInput>
  }

  export type RefActivityCreateWithoutRefChecklistItemActivityLinkInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    phase?: RefActivityCreatephaseInput | string[]
    element?: RefActivityCreateelementInput | string[]
    system?: RefActivityCreatesystemInput | string[]
    nature?: RefActivityCreatenatureInput | string[]
    method?: RefActivityCreatemethodInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    materials?: RefActivityMaterialCreateNestedManyWithoutActivityInput
  }

  export type RefActivityUncheckedCreateWithoutRefChecklistItemActivityLinkInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    phase?: RefActivityCreatephaseInput | string[]
    element?: RefActivityCreateelementInput | string[]
    system?: RefActivityCreatesystemInput | string[]
    nature?: RefActivityCreatenatureInput | string[]
    method?: RefActivityCreatemethodInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    materials?: RefActivityMaterialUncheckedCreateNestedManyWithoutActivityInput
  }

  export type RefActivityCreateOrConnectWithoutRefChecklistItemActivityLinkInput = {
    where: RefActivityWhereUniqueInput
    create: XOR<RefActivityCreateWithoutRefChecklistItemActivityLinkInput, RefActivityUncheckedCreateWithoutRefChecklistItemActivityLinkInput>
  }

  export type RefChecklistItemUpsertWithoutSuggestedActivitiesInput = {
    update: XOR<RefChecklistItemUpdateWithoutSuggestedActivitiesInput, RefChecklistItemUncheckedUpdateWithoutSuggestedActivitiesInput>
    create: XOR<RefChecklistItemCreateWithoutSuggestedActivitiesInput, RefChecklistItemUncheckedCreateWithoutSuggestedActivitiesInput>
    where?: RefChecklistItemWhereInput
  }

  export type RefChecklistItemUpdateToOneWithWhereWithoutSuggestedActivitiesInput = {
    where?: RefChecklistItemWhereInput
    data: XOR<RefChecklistItemUpdateWithoutSuggestedActivitiesInput, RefChecklistItemUncheckedUpdateWithoutSuggestedActivitiesInput>
  }

  export type RefChecklistItemUpdateWithoutSuggestedActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checklist?: RefChecklistUpdateOneRequiredWithoutItemsNestedInput
    suggestedMaterials?: RefChecklistItemMaterialLinkUpdateManyWithoutItemNestedInput
  }

  export type RefChecklistItemUncheckedUpdateWithoutSuggestedActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    checklistId?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    suggestedMaterials?: RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutItemNestedInput
  }

  export type RefActivityUpsertWithoutRefChecklistItemActivityLinkInput = {
    update: XOR<RefActivityUpdateWithoutRefChecklistItemActivityLinkInput, RefActivityUncheckedUpdateWithoutRefChecklistItemActivityLinkInput>
    create: XOR<RefActivityCreateWithoutRefChecklistItemActivityLinkInput, RefActivityUncheckedCreateWithoutRefChecklistItemActivityLinkInput>
    where?: RefActivityWhereInput
  }

  export type RefActivityUpdateToOneWithWhereWithoutRefChecklistItemActivityLinkInput = {
    where?: RefActivityWhereInput
    data: XOR<RefActivityUpdateWithoutRefChecklistItemActivityLinkInput, RefActivityUncheckedUpdateWithoutRefChecklistItemActivityLinkInput>
  }

  export type RefActivityUpdateWithoutRefChecklistItemActivityLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    phase?: RefActivityUpdatephaseInput | string[]
    element?: RefActivityUpdateelementInput | string[]
    system?: RefActivityUpdatesystemInput | string[]
    nature?: RefActivityUpdatenatureInput | string[]
    method?: RefActivityUpdatemethodInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materials?: RefActivityMaterialUpdateManyWithoutActivityNestedInput
  }

  export type RefActivityUncheckedUpdateWithoutRefChecklistItemActivityLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    phase?: RefActivityUpdatephaseInput | string[]
    element?: RefActivityUpdateelementInput | string[]
    system?: RefActivityUpdatesystemInput | string[]
    nature?: RefActivityUpdatenatureInput | string[]
    method?: RefActivityUpdatemethodInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materials?: RefActivityMaterialUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type RefChecklistItemCreateWithoutSuggestedMaterialsInput = {
    id?: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
    checklist: RefChecklistCreateNestedOneWithoutItemsInput
    suggestedActivities?: RefChecklistItemActivityLinkCreateNestedManyWithoutItemInput
  }

  export type RefChecklistItemUncheckedCreateWithoutSuggestedMaterialsInput = {
    id?: string
    checklistId: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
    suggestedActivities?: RefChecklistItemActivityLinkUncheckedCreateNestedManyWithoutItemInput
  }

  export type RefChecklistItemCreateOrConnectWithoutSuggestedMaterialsInput = {
    where: RefChecklistItemWhereUniqueInput
    create: XOR<RefChecklistItemCreateWithoutSuggestedMaterialsInput, RefChecklistItemUncheckedCreateWithoutSuggestedMaterialsInput>
  }

  export type RefMaterialCreateWithoutRefChecklistItemMaterialLinkInput = {
    id?: string
    code?: string | null
    name: string
    discipline?: $Enums.MaterialDiscipline | null
    category?: string | null
    manufacturer?: string | null
    model?: string | null
    standards?: RefMaterialCreatestandardsInput | string[]
    fireRating?: string | null
    keyProps?: RefMaterialCreatekeyPropsInput | string[]
    aliases?: RefMaterialCreatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityUses?: RefActivityMaterialCreateNestedManyWithoutMaterialInput
  }

  export type RefMaterialUncheckedCreateWithoutRefChecklistItemMaterialLinkInput = {
    id?: string
    code?: string | null
    name: string
    discipline?: $Enums.MaterialDiscipline | null
    category?: string | null
    manufacturer?: string | null
    model?: string | null
    standards?: RefMaterialCreatestandardsInput | string[]
    fireRating?: string | null
    keyProps?: RefMaterialCreatekeyPropsInput | string[]
    aliases?: RefMaterialCreatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityUses?: RefActivityMaterialUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type RefMaterialCreateOrConnectWithoutRefChecklistItemMaterialLinkInput = {
    where: RefMaterialWhereUniqueInput
    create: XOR<RefMaterialCreateWithoutRefChecklistItemMaterialLinkInput, RefMaterialUncheckedCreateWithoutRefChecklistItemMaterialLinkInput>
  }

  export type RefChecklistItemUpsertWithoutSuggestedMaterialsInput = {
    update: XOR<RefChecklistItemUpdateWithoutSuggestedMaterialsInput, RefChecklistItemUncheckedUpdateWithoutSuggestedMaterialsInput>
    create: XOR<RefChecklistItemCreateWithoutSuggestedMaterialsInput, RefChecklistItemUncheckedCreateWithoutSuggestedMaterialsInput>
    where?: RefChecklistItemWhereInput
  }

  export type RefChecklistItemUpdateToOneWithWhereWithoutSuggestedMaterialsInput = {
    where?: RefChecklistItemWhereInput
    data: XOR<RefChecklistItemUpdateWithoutSuggestedMaterialsInput, RefChecklistItemUncheckedUpdateWithoutSuggestedMaterialsInput>
  }

  export type RefChecklistItemUpdateWithoutSuggestedMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    checklist?: RefChecklistUpdateOneRequiredWithoutItemsNestedInput
    suggestedActivities?: RefChecklistItemActivityLinkUpdateManyWithoutItemNestedInput
  }

  export type RefChecklistItemUncheckedUpdateWithoutSuggestedMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    checklistId?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    suggestedActivities?: RefChecklistItemActivityLinkUncheckedUpdateManyWithoutItemNestedInput
  }

  export type RefMaterialUpsertWithoutRefChecklistItemMaterialLinkInput = {
    update: XOR<RefMaterialUpdateWithoutRefChecklistItemMaterialLinkInput, RefMaterialUncheckedUpdateWithoutRefChecklistItemMaterialLinkInput>
    create: XOR<RefMaterialCreateWithoutRefChecklistItemMaterialLinkInput, RefMaterialUncheckedCreateWithoutRefChecklistItemMaterialLinkInput>
    where?: RefMaterialWhereInput
  }

  export type RefMaterialUpdateToOneWithWhereWithoutRefChecklistItemMaterialLinkInput = {
    where?: RefMaterialWhereInput
    data: XOR<RefMaterialUpdateWithoutRefChecklistItemMaterialLinkInput, RefMaterialUncheckedUpdateWithoutRefChecklistItemMaterialLinkInput>
  }

  export type RefMaterialUpdateWithoutRefChecklistItemMaterialLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    discipline?: NullableEnumMaterialDisciplineFieldUpdateOperationsInput | $Enums.MaterialDiscipline | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    standards?: RefMaterialUpdatestandardsInput | string[]
    fireRating?: NullableStringFieldUpdateOperationsInput | string | null
    keyProps?: RefMaterialUpdatekeyPropsInput | string[]
    aliases?: RefMaterialUpdatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityUses?: RefActivityMaterialUpdateManyWithoutMaterialNestedInput
  }

  export type RefMaterialUncheckedUpdateWithoutRefChecklistItemMaterialLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    discipline?: NullableEnumMaterialDisciplineFieldUpdateOperationsInput | $Enums.MaterialDiscipline | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    standards?: RefMaterialUpdatestandardsInput | string[]
    fireRating?: NullableStringFieldUpdateOperationsInput | string | null
    keyProps?: RefMaterialUpdatekeyPropsInput | string[]
    aliases?: RefMaterialUpdatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityUses?: RefActivityMaterialUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type RefActivityMaterialCreateWithoutActivityInput = {
    id?: string
    note?: string | null
    material: RefMaterialCreateNestedOneWithoutActivityUsesInput
  }

  export type RefActivityMaterialUncheckedCreateWithoutActivityInput = {
    id?: string
    materialId: string
    note?: string | null
  }

  export type RefActivityMaterialCreateOrConnectWithoutActivityInput = {
    where: RefActivityMaterialWhereUniqueInput
    create: XOR<RefActivityMaterialCreateWithoutActivityInput, RefActivityMaterialUncheckedCreateWithoutActivityInput>
  }

  export type RefActivityMaterialCreateManyActivityInputEnvelope = {
    data: RefActivityMaterialCreateManyActivityInput | RefActivityMaterialCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type RefChecklistItemActivityLinkCreateWithoutActivityInput = {
    id?: string
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
    item: RefChecklistItemCreateNestedOneWithoutSuggestedActivitiesInput
  }

  export type RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput = {
    id?: string
    itemId: string
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
  }

  export type RefChecklistItemActivityLinkCreateOrConnectWithoutActivityInput = {
    where: RefChecklistItemActivityLinkWhereUniqueInput
    create: XOR<RefChecklistItemActivityLinkCreateWithoutActivityInput, RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput>
  }

  export type RefChecklistItemActivityLinkCreateManyActivityInputEnvelope = {
    data: RefChecklistItemActivityLinkCreateManyActivityInput | RefChecklistItemActivityLinkCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type RefActivityMaterialUpsertWithWhereUniqueWithoutActivityInput = {
    where: RefActivityMaterialWhereUniqueInput
    update: XOR<RefActivityMaterialUpdateWithoutActivityInput, RefActivityMaterialUncheckedUpdateWithoutActivityInput>
    create: XOR<RefActivityMaterialCreateWithoutActivityInput, RefActivityMaterialUncheckedCreateWithoutActivityInput>
  }

  export type RefActivityMaterialUpdateWithWhereUniqueWithoutActivityInput = {
    where: RefActivityMaterialWhereUniqueInput
    data: XOR<RefActivityMaterialUpdateWithoutActivityInput, RefActivityMaterialUncheckedUpdateWithoutActivityInput>
  }

  export type RefActivityMaterialUpdateManyWithWhereWithoutActivityInput = {
    where: RefActivityMaterialScalarWhereInput
    data: XOR<RefActivityMaterialUpdateManyMutationInput, RefActivityMaterialUncheckedUpdateManyWithoutActivityInput>
  }

  export type RefActivityMaterialScalarWhereInput = {
    AND?: RefActivityMaterialScalarWhereInput | RefActivityMaterialScalarWhereInput[]
    OR?: RefActivityMaterialScalarWhereInput[]
    NOT?: RefActivityMaterialScalarWhereInput | RefActivityMaterialScalarWhereInput[]
    id?: UuidFilter<"RefActivityMaterial"> | string
    activityId?: UuidFilter<"RefActivityMaterial"> | string
    materialId?: UuidFilter<"RefActivityMaterial"> | string
    note?: StringNullableFilter<"RefActivityMaterial"> | string | null
  }

  export type RefChecklistItemActivityLinkUpsertWithWhereUniqueWithoutActivityInput = {
    where: RefChecklistItemActivityLinkWhereUniqueInput
    update: XOR<RefChecklistItemActivityLinkUpdateWithoutActivityInput, RefChecklistItemActivityLinkUncheckedUpdateWithoutActivityInput>
    create: XOR<RefChecklistItemActivityLinkCreateWithoutActivityInput, RefChecklistItemActivityLinkUncheckedCreateWithoutActivityInput>
  }

  export type RefChecklistItemActivityLinkUpdateWithWhereUniqueWithoutActivityInput = {
    where: RefChecklistItemActivityLinkWhereUniqueInput
    data: XOR<RefChecklistItemActivityLinkUpdateWithoutActivityInput, RefChecklistItemActivityLinkUncheckedUpdateWithoutActivityInput>
  }

  export type RefChecklistItemActivityLinkUpdateManyWithWhereWithoutActivityInput = {
    where: RefChecklistItemActivityLinkScalarWhereInput
    data: XOR<RefChecklistItemActivityLinkUpdateManyMutationInput, RefChecklistItemActivityLinkUncheckedUpdateManyWithoutActivityInput>
  }

  export type RefActivityMaterialCreateWithoutMaterialInput = {
    id?: string
    note?: string | null
    activity: RefActivityCreateNestedOneWithoutMaterialsInput
  }

  export type RefActivityMaterialUncheckedCreateWithoutMaterialInput = {
    id?: string
    activityId: string
    note?: string | null
  }

  export type RefActivityMaterialCreateOrConnectWithoutMaterialInput = {
    where: RefActivityMaterialWhereUniqueInput
    create: XOR<RefActivityMaterialCreateWithoutMaterialInput, RefActivityMaterialUncheckedCreateWithoutMaterialInput>
  }

  export type RefActivityMaterialCreateManyMaterialInputEnvelope = {
    data: RefActivityMaterialCreateManyMaterialInput | RefActivityMaterialCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type RefChecklistItemMaterialLinkCreateWithoutMaterialInput = {
    id?: string
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
    item: RefChecklistItemCreateNestedOneWithoutSuggestedMaterialsInput
  }

  export type RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput = {
    id?: string
    itemId: string
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemMaterialLinkCreateOrConnectWithoutMaterialInput = {
    where: RefChecklistItemMaterialLinkWhereUniqueInput
    create: XOR<RefChecklistItemMaterialLinkCreateWithoutMaterialInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput>
  }

  export type RefChecklistItemMaterialLinkCreateManyMaterialInputEnvelope = {
    data: RefChecklistItemMaterialLinkCreateManyMaterialInput | RefChecklistItemMaterialLinkCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type RefActivityMaterialUpsertWithWhereUniqueWithoutMaterialInput = {
    where: RefActivityMaterialWhereUniqueInput
    update: XOR<RefActivityMaterialUpdateWithoutMaterialInput, RefActivityMaterialUncheckedUpdateWithoutMaterialInput>
    create: XOR<RefActivityMaterialCreateWithoutMaterialInput, RefActivityMaterialUncheckedCreateWithoutMaterialInput>
  }

  export type RefActivityMaterialUpdateWithWhereUniqueWithoutMaterialInput = {
    where: RefActivityMaterialWhereUniqueInput
    data: XOR<RefActivityMaterialUpdateWithoutMaterialInput, RefActivityMaterialUncheckedUpdateWithoutMaterialInput>
  }

  export type RefActivityMaterialUpdateManyWithWhereWithoutMaterialInput = {
    where: RefActivityMaterialScalarWhereInput
    data: XOR<RefActivityMaterialUpdateManyMutationInput, RefActivityMaterialUncheckedUpdateManyWithoutMaterialInput>
  }

  export type RefChecklistItemMaterialLinkUpsertWithWhereUniqueWithoutMaterialInput = {
    where: RefChecklistItemMaterialLinkWhereUniqueInput
    update: XOR<RefChecklistItemMaterialLinkUpdateWithoutMaterialInput, RefChecklistItemMaterialLinkUncheckedUpdateWithoutMaterialInput>
    create: XOR<RefChecklistItemMaterialLinkCreateWithoutMaterialInput, RefChecklistItemMaterialLinkUncheckedCreateWithoutMaterialInput>
  }

  export type RefChecklistItemMaterialLinkUpdateWithWhereUniqueWithoutMaterialInput = {
    where: RefChecklistItemMaterialLinkWhereUniqueInput
    data: XOR<RefChecklistItemMaterialLinkUpdateWithoutMaterialInput, RefChecklistItemMaterialLinkUncheckedUpdateWithoutMaterialInput>
  }

  export type RefChecklistItemMaterialLinkUpdateManyWithWhereWithoutMaterialInput = {
    where: RefChecklistItemMaterialLinkScalarWhereInput
    data: XOR<RefChecklistItemMaterialLinkUpdateManyMutationInput, RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutMaterialInput>
  }

  export type RefActivityCreateWithoutMaterialsInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    phase?: RefActivityCreatephaseInput | string[]
    element?: RefActivityCreateelementInput | string[]
    system?: RefActivityCreatesystemInput | string[]
    nature?: RefActivityCreatenatureInput | string[]
    method?: RefActivityCreatemethodInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkCreateNestedManyWithoutActivityInput
  }

  export type RefActivityUncheckedCreateWithoutMaterialsInput = {
    id?: string
    code?: string | null
    title: string
    discipline: $Enums.Discipline
    stageLabel?: string | null
    phase?: RefActivityCreatephaseInput | string[]
    element?: RefActivityCreateelementInput | string[]
    system?: RefActivityCreatesystemInput | string[]
    nature?: RefActivityCreatenatureInput | string[]
    method?: RefActivityCreatemethodInput | string[]
    status?: string
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkUncheckedCreateNestedManyWithoutActivityInput
  }

  export type RefActivityCreateOrConnectWithoutMaterialsInput = {
    where: RefActivityWhereUniqueInput
    create: XOR<RefActivityCreateWithoutMaterialsInput, RefActivityUncheckedCreateWithoutMaterialsInput>
  }

  export type RefMaterialCreateWithoutActivityUsesInput = {
    id?: string
    code?: string | null
    name: string
    discipline?: $Enums.MaterialDiscipline | null
    category?: string | null
    manufacturer?: string | null
    model?: string | null
    standards?: RefMaterialCreatestandardsInput | string[]
    fireRating?: string | null
    keyProps?: RefMaterialCreatekeyPropsInput | string[]
    aliases?: RefMaterialCreatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkCreateNestedManyWithoutMaterialInput
  }

  export type RefMaterialUncheckedCreateWithoutActivityUsesInput = {
    id?: string
    code?: string | null
    name: string
    discipline?: $Enums.MaterialDiscipline | null
    category?: string | null
    manufacturer?: string | null
    model?: string | null
    standards?: RefMaterialCreatestandardsInput | string[]
    fireRating?: string | null
    keyProps?: RefMaterialCreatekeyPropsInput | string[]
    aliases?: RefMaterialCreatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: number
    versionLabel?: string | null
    versionMajor?: number
    versionMinor?: number
    versionPatch?: number
    notes?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type RefMaterialCreateOrConnectWithoutActivityUsesInput = {
    where: RefMaterialWhereUniqueInput
    create: XOR<RefMaterialCreateWithoutActivityUsesInput, RefMaterialUncheckedCreateWithoutActivityUsesInput>
  }

  export type RefActivityUpsertWithoutMaterialsInput = {
    update: XOR<RefActivityUpdateWithoutMaterialsInput, RefActivityUncheckedUpdateWithoutMaterialsInput>
    create: XOR<RefActivityCreateWithoutMaterialsInput, RefActivityUncheckedCreateWithoutMaterialsInput>
    where?: RefActivityWhereInput
  }

  export type RefActivityUpdateToOneWithWhereWithoutMaterialsInput = {
    where?: RefActivityWhereInput
    data: XOR<RefActivityUpdateWithoutMaterialsInput, RefActivityUncheckedUpdateWithoutMaterialsInput>
  }

  export type RefActivityUpdateWithoutMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    phase?: RefActivityUpdatephaseInput | string[]
    element?: RefActivityUpdateelementInput | string[]
    system?: RefActivityUpdatesystemInput | string[]
    nature?: RefActivityUpdatenatureInput | string[]
    method?: RefActivityUpdatemethodInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkUpdateManyWithoutActivityNestedInput
  }

  export type RefActivityUncheckedUpdateWithoutMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    discipline?: EnumDisciplineFieldUpdateOperationsInput | $Enums.Discipline
    stageLabel?: NullableStringFieldUpdateOperationsInput | string | null
    phase?: RefActivityUpdatephaseInput | string[]
    element?: RefActivityUpdateelementInput | string[]
    system?: RefActivityUpdatesystemInput | string[]
    nature?: RefActivityUpdatenatureInput | string[]
    method?: RefActivityUpdatemethodInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RefChecklistItemActivityLink?: RefChecklistItemActivityLinkUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type RefMaterialUpsertWithoutActivityUsesInput = {
    update: XOR<RefMaterialUpdateWithoutActivityUsesInput, RefMaterialUncheckedUpdateWithoutActivityUsesInput>
    create: XOR<RefMaterialCreateWithoutActivityUsesInput, RefMaterialUncheckedCreateWithoutActivityUsesInput>
    where?: RefMaterialWhereInput
  }

  export type RefMaterialUpdateToOneWithWhereWithoutActivityUsesInput = {
    where?: RefMaterialWhereInput
    data: XOR<RefMaterialUpdateWithoutActivityUsesInput, RefMaterialUncheckedUpdateWithoutActivityUsesInput>
  }

  export type RefMaterialUpdateWithoutActivityUsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    discipline?: NullableEnumMaterialDisciplineFieldUpdateOperationsInput | $Enums.MaterialDiscipline | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    standards?: RefMaterialUpdatestandardsInput | string[]
    fireRating?: NullableStringFieldUpdateOperationsInput | string | null
    keyProps?: RefMaterialUpdatekeyPropsInput | string[]
    aliases?: RefMaterialUpdatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkUpdateManyWithoutMaterialNestedInput
  }

  export type RefMaterialUncheckedUpdateWithoutActivityUsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    discipline?: NullableEnumMaterialDisciplineFieldUpdateOperationsInput | $Enums.MaterialDiscipline | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    standards?: RefMaterialUpdatestandardsInput | string[]
    fireRating?: NullableStringFieldUpdateOperationsInput | string | null
    keyProps?: RefMaterialUpdatekeyPropsInput | string[]
    aliases?: RefMaterialUpdatealiasesInput | string[]
    properties?: NullableJsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    versionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    versionMajor?: IntFieldUpdateOperationsInput | number
    versionMinor?: IntFieldUpdateOperationsInput | number
    versionPatch?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RefChecklistItemMaterialLink?: RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type DistrictCreateManyStateInput = {
    districtId?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyStateInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    districtId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
  }

  export type CompanyCreateManyStateInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyStateInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistrictUpdateWithoutStateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateWithoutStateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDistrictNestedInput
    companies?: CompanyUncheckedUpdateManyWithoutDistrictNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutDistrictNestedInput
  }

  export type DistrictUncheckedUpdateManyWithoutStateInput = {
    districtId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutStateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    district?: DistrictUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUncheckedUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
  }

  export type CompanyUpdateWithoutStateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    serviceProvider?: UserUpdateOneWithoutCompaniesAsServiceProviderNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutStateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutStateInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutStateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutStateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutStateInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyDistrictInput = {
    userId?: string
    code?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    countryCode: string
    phone: string
    email?: string | null
    preferredLanguage?: $Enums.PreferredLanguage | null
    profilePhoto?: string | null
    stateId?: string | null
    cityTown?: string | null
    pin?: string | null
    operatingZone?: $Enums.OperatingZone | null
    address?: string | null
    isClient?: boolean | null
    isServiceProvider?: boolean | null
    userStatus?: $Enums.UserStatus
    passwordHash?: string | null
    isSuperAdmin?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRole?: $Enums.UserRole | null
  }

  export type CompanyCreateManyDistrictInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    userId?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyDistrictInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutDistrictInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    state?: StateUpdateOneWithoutUsersNestedInput
    projectsAsClient?: ProjectUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDistrictInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    projectsAsClient?: ProjectUncheckedUpdateManyWithoutClientUserNestedInput
    companiesAsServiceProvider?: CompanyUncheckedUpdateManyWithoutServiceProviderNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutUserNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutUserNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDistrictInput = {
    userId?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    countryCode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumPreferredLanguageFieldUpdateOperationsInput | $Enums.PreferredLanguage | null
    profilePhoto?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    operatingZone?: NullableEnumOperatingZoneFieldUpdateOperationsInput | $Enums.OperatingZone | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isClient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isServiceProvider?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRole?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
  }

  export type CompanyUpdateWithoutDistrictInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    serviceProvider?: UserUpdateOneWithoutCompaniesAsServiceProviderNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDistrictInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutDistrictInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutDistrictInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDistrictInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutDistrictInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateManyClientUserInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientCompanyId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyCreateManyServiceProviderInput = {
    companyId?: string
    name: string
    status?: $Enums.CompanyStatus
    website?: string | null
    companyRole?: $Enums.CompanyRole | null
    gstin?: string | null
    pan?: string | null
    cin?: string | null
    primaryContact?: string | null
    contactMobile?: string | null
    contactEmail?: string | null
    stateId?: string | null
    districtId?: string | null
    address?: string | null
    pin?: string | null
    notes?: string | null
    companyCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProjectCreateManyUserInput = {
    projectId: string
    createdAt?: Date | string
  }

  export type UserCompanyCreateManyUserInput = {
    companyId: string
    createdAt?: Date | string
  }

  export type UserRoleMembershipCreateManyUserInput = {
    id?: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    companyId?: string | null
    projectId?: string | null
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateWithoutClientUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientCompany?: CompanyUpdateOneWithoutProjectsNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutClientUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutClientUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientCompanyId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUpdateWithoutServiceProviderInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StateUpdateOneWithoutCompaniesNestedInput
    district?: DistrictUpdateOneWithoutCompaniesNestedInput
    projects?: ProjectUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutServiceProviderInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientCompanyNestedInput
    userCompanies?: UserCompanyUncheckedUpdateManyWithoutCompanyNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutServiceProviderInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumCompanyStatusFieldUpdateOperationsInput | $Enums.CompanyStatus
    website?: NullableStringFieldUpdateOperationsInput | string | null
    companyRole?: NullableEnumCompanyRoleFieldUpdateOperationsInput | $Enums.CompanyRole | null
    gstin?: NullableStringFieldUpdateOperationsInput | string | null
    pan?: NullableStringFieldUpdateOperationsInput | string | null
    cin?: NullableStringFieldUpdateOperationsInput | string | null
    primaryContact?: NullableStringFieldUpdateOperationsInput | string | null
    contactMobile?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    companyCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectUncheckedUpdateWithoutUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectUncheckedUpdateManyWithoutUserInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUserCompaniesNestedInput
  }

  export type UserCompanyUncheckedUpdateWithoutUserInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUncheckedUpdateManyWithoutUserInput = {
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutUserRoleMembershipsNestedInput
    project?: ProjectUpdateOneWithoutUserRoleMembershipsNestedInput
  }

  export type UserRoleMembershipUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateManyClientCompanyInput = {
    projectId?: string
    title: string
    code?: string | null
    status?: $Enums.ProjectStatus
    stage?: $Enums.ProjectStage | null
    projectType?: $Enums.ProjectType | null
    structureType?: $Enums.StructureType | null
    constructionType?: $Enums.ConstructionType | null
    contractType?: $Enums.ContractType | null
    health?: $Enums.ProjectHealth
    clientUserId?: string | null
    address?: string | null
    cityTown?: string | null
    stateId?: string | null
    districtId?: string | null
    pin?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    startDate?: Date | string | null
    plannedCompletionDate?: Date | string | null
    currency?: $Enums.CurrencyCode | null
    contractValue?: Decimal | DecimalJsLike | number | string | null
    areaUnit?: $Enums.AreaUnit | null
    plotArea?: Decimal | DecimalJsLike | number | string | null
    builtUpArea?: Decimal | DecimalJsLike | number | string | null
    floors?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCompanyCreateManyCompanyInput = {
    userId: string
    createdAt?: Date | string
  }

  export type UserRoleMembershipCreateManyCompanyInput = {
    id?: string
    userId: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    projectId?: string | null
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateWithoutClientCompanyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientUser?: UserUpdateOneWithoutProjectsAsClientNestedInput
    state?: StateUpdateOneWithoutProjectsNestedInput
    district?: DistrictUpdateOneWithoutProjectsNestedInput
    projectTags?: ProjectTagUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutClientCompanyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectTags?: ProjectTagUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectUncheckedUpdateManyWithoutProjectNestedInput
    userRoleMemberships?: UserRoleMembershipUncheckedUpdateManyWithoutProjectNestedInput
    PermissionProjectOverride?: PermissionProjectOverrideUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutClientCompanyInput = {
    projectId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    stage?: NullableEnumProjectStageFieldUpdateOperationsInput | $Enums.ProjectStage | null
    projectType?: NullableEnumProjectTypeFieldUpdateOperationsInput | $Enums.ProjectType | null
    structureType?: NullableEnumStructureTypeFieldUpdateOperationsInput | $Enums.StructureType | null
    constructionType?: NullableEnumConstructionTypeFieldUpdateOperationsInput | $Enums.ConstructionType | null
    contractType?: NullableEnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType | null
    health?: EnumProjectHealthFieldUpdateOperationsInput | $Enums.ProjectHealth
    clientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityTown?: NullableStringFieldUpdateOperationsInput | string | null
    stateId?: NullableStringFieldUpdateOperationsInput | string | null
    districtId?: NullableStringFieldUpdateOperationsInput | string | null
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plannedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    contractValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    areaUnit?: NullableEnumAreaUnitFieldUpdateOperationsInput | $Enums.AreaUnit | null
    plotArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    builtUpArea?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    floors?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUpdateWithoutCompanyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCompaniesNestedInput
  }

  export type UserCompanyUncheckedUpdateWithoutCompanyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCompanyUncheckedUpdateManyWithoutCompanyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserRoleMembershipsNestedInput
    project?: ProjectUpdateOneWithoutUserRoleMembershipsNestedInput
  }

  export type UserRoleMembershipUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectTagCreateManyProjectInput = {
    tagCode: string
  }

  export type UserProjectCreateManyProjectInput = {
    userId: string
    createdAt?: Date | string
  }

  export type UserRoleMembershipCreateManyProjectInput = {
    id?: string
    userId: string
    role: $Enums.UserRole
    scopeType: $Enums.RoleScope
    companyId?: string | null
    isDefault?: boolean
    canApprove?: boolean
    validFrom?: Date | string | null
    validTo?: Date | string | null
    createdBy?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionProjectOverrideCreateManyProjectInput = {
    id?: string
    role: $Enums.UserRole
    matrix: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectTagUpdateWithoutProjectInput = {
    tag?: RefProjectTagUpdateOneRequiredWithoutTagsNestedInput
  }

  export type ProjectTagUncheckedUpdateWithoutProjectInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectTagUncheckedUpdateManyWithoutProjectInput = {
    tagCode?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectUpdateWithoutProjectInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectUncheckedUpdateWithoutProjectInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProjectUncheckedUpdateManyWithoutProjectInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserRoleMembershipsNestedInput
    company?: CompanyUpdateOneWithoutUserRoleMembershipsNestedInput
  }

  export type UserRoleMembershipUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleMembershipUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    scopeType?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionProjectOverrideUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionProjectOverrideUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionProjectOverrideUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    matrix?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectTagCreateManyTagInput = {
    projectId: string
  }

  export type ProjectTagUpdateWithoutTagInput = {
    project?: ProjectUpdateOneRequiredWithoutProjectTagsNestedInput
  }

  export type ProjectTagUncheckedUpdateWithoutTagInput = {
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectTagUncheckedUpdateManyWithoutTagInput = {
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type RefChecklistItemCreateManyChecklistInput = {
    id?: string
    seq: number
    text: string
    requirement?: string | null
    method?: RefChecklistItemCreatemethodInput | string[]
    risk?: string | null
    tags?: RefChecklistItemCreatetagsInput | string[]
    itemCode?: string | null
    critical?: boolean | null
    aiEnabled?: boolean | null
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    units?: string | null
    tolerance?: string | null
    base?: Decimal | DecimalJsLike | number | string | null
    plus?: Decimal | DecimalJsLike | number | string | null
    minus?: Decimal | DecimalJsLike | number | string | null
  }

  export type RefChecklistItemUpdateWithoutChecklistInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    suggestedActivities?: RefChecklistItemActivityLinkUpdateManyWithoutItemNestedInput
    suggestedMaterials?: RefChecklistItemMaterialLinkUpdateManyWithoutItemNestedInput
  }

  export type RefChecklistItemUncheckedUpdateWithoutChecklistInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    suggestedActivities?: RefChecklistItemActivityLinkUncheckedUpdateManyWithoutItemNestedInput
    suggestedMaterials?: RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutItemNestedInput
  }

  export type RefChecklistItemUncheckedUpdateManyWithoutChecklistInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    requirement?: NullableStringFieldUpdateOperationsInput | string | null
    method?: RefChecklistItemUpdatemethodInput | string[]
    risk?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: RefChecklistItemUpdatetagsInput | string[]
    itemCode?: NullableStringFieldUpdateOperationsInput | string | null
    critical?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableStringFieldUpdateOperationsInput | string | null
    tolerance?: NullableStringFieldUpdateOperationsInput | string | null
    base?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    plus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minus?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type RefChecklistItemActivityLinkCreateManyItemInput = {
    id?: string
    activityId?: string | null
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
  }

  export type RefChecklistItemMaterialLinkCreateManyItemInput = {
    id?: string
    materialId?: string | null
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemActivityLinkUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
    activity?: RefActivityUpdateOneWithoutRefChecklistItemActivityLinkNestedInput
  }

  export type RefChecklistItemActivityLinkUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
  }

  export type RefChecklistItemActivityLinkUncheckedUpdateManyWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
  }

  export type RefChecklistItemMaterialLinkUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
    material?: RefMaterialUpdateOneWithoutRefChecklistItemMaterialLinkNestedInput
  }

  export type RefChecklistItemMaterialLinkUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefActivityMaterialCreateManyActivityInput = {
    id?: string
    materialId: string
    note?: string | null
  }

  export type RefChecklistItemActivityLinkCreateManyActivityInput = {
    id?: string
    itemId: string
    label: string
    tags?: RefChecklistItemActivityLinkCreatetagsInput | string[]
  }

  export type RefActivityMaterialUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    material?: RefMaterialUpdateOneRequiredWithoutActivityUsesNestedInput
  }

  export type RefActivityMaterialUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefActivityMaterialUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefChecklistItemActivityLinkUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
    item?: RefChecklistItemUpdateOneRequiredWithoutSuggestedActivitiesNestedInput
  }

  export type RefChecklistItemActivityLinkUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
  }

  export type RefChecklistItemActivityLinkUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    tags?: RefChecklistItemActivityLinkUpdatetagsInput | string[]
  }

  export type RefActivityMaterialCreateManyMaterialInput = {
    id?: string
    activityId: string
    note?: string | null
  }

  export type RefChecklistItemMaterialLinkCreateManyMaterialInput = {
    id?: string
    itemId: string
    name: string
    category?: string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefActivityMaterialUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: RefActivityUpdateOneRequiredWithoutMaterialsNestedInput
  }

  export type RefActivityMaterialUncheckedUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefActivityMaterialUncheckedUpdateManyWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefChecklistItemMaterialLinkUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
    item?: RefChecklistItemUpdateOneRequiredWithoutSuggestedMaterialsNestedInput
  }

  export type RefChecklistItemMaterialLinkUncheckedUpdateWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RefChecklistItemMaterialLinkUncheckedUpdateManyWithoutMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StateCountOutputTypeDefaultArgs instead
     */
    export type StateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistrictCountOutputTypeDefaultArgs instead
     */
    export type DistrictCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistrictCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefProjectTagCountOutputTypeDefaultArgs instead
     */
    export type RefProjectTagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefProjectTagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefChecklistCountOutputTypeDefaultArgs instead
     */
    export type RefChecklistCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefChecklistCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefChecklistItemCountOutputTypeDefaultArgs instead
     */
    export type RefChecklistItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefChecklistItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefActivityCountOutputTypeDefaultArgs instead
     */
    export type RefActivityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefActivityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefMaterialCountOutputTypeDefaultArgs instead
     */
    export type RefMaterialCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefMaterialCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StateDefaultArgs instead
     */
    export type StateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistrictDefaultArgs instead
     */
    export type DistrictArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistrictDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefProjectTagDefaultArgs instead
     */
    export type RefProjectTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefProjectTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectTagDefaultArgs instead
     */
    export type ProjectTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserProjectDefaultArgs instead
     */
    export type UserProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCompanyDefaultArgs instead
     */
    export type UserCompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleMembershipDefaultArgs instead
     */
    export type UserRoleMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRoleMembershipDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionTemplateDefaultArgs instead
     */
    export type PermissionTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionTemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionProjectOverrideDefaultArgs instead
     */
    export type PermissionProjectOverrideArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionProjectOverrideDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionUserOverrideDefaultArgs instead
     */
    export type PermissionUserOverrideArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionUserOverrideDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefChecklistDefaultArgs instead
     */
    export type RefChecklistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefChecklistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefChecklistItemDefaultArgs instead
     */
    export type RefChecklistItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefChecklistItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefChecklistItemActivityLinkDefaultArgs instead
     */
    export type RefChecklistItemActivityLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefChecklistItemActivityLinkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefChecklistItemMaterialLinkDefaultArgs instead
     */
    export type RefChecklistItemMaterialLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefChecklistItemMaterialLinkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefActivityDefaultArgs instead
     */
    export type RefActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefMaterialDefaultArgs instead
     */
    export type RefMaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefMaterialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefActivityMaterialDefaultArgs instead
     */
    export type RefActivityMaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefActivityMaterialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminAuditSettingDefaultArgs instead
     */
    export type AdminAuditSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminAuditSettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminAuditLogDefaultArgs instead
     */
    export type AdminAuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminAuditLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}