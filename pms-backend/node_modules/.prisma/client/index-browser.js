
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.StateScalarFieldEnum = {
  stateId: 'stateId',
  code: 'code',
  name: 'name',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DistrictScalarFieldEnum = {
  districtId: 'districtId',
  name: 'name',
  stateId: 'stateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  code: 'code',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  countryCode: 'countryCode',
  phone: 'phone',
  email: 'email',
  preferredLanguage: 'preferredLanguage',
  profilePhoto: 'profilePhoto',
  stateId: 'stateId',
  districtId: 'districtId',
  cityTown: 'cityTown',
  pin: 'pin',
  operatingZone: 'operatingZone',
  address: 'address',
  isClient: 'isClient',
  isServiceProvider: 'isServiceProvider',
  userStatus: 'userStatus',
  passwordHash: 'passwordHash',
  isSuperAdmin: 'isSuperAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userRole: 'userRole'
};

exports.Prisma.CompanyScalarFieldEnum = {
  companyId: 'companyId',
  name: 'name',
  status: 'status',
  website: 'website',
  companyRole: 'companyRole',
  gstin: 'gstin',
  pan: 'pan',
  cin: 'cin',
  primaryContact: 'primaryContact',
  contactMobile: 'contactMobile',
  contactEmail: 'contactEmail',
  stateId: 'stateId',
  districtId: 'districtId',
  address: 'address',
  pin: 'pin',
  notes: 'notes',
  userId: 'userId',
  companyCode: 'companyCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  projectId: 'projectId',
  title: 'title',
  code: 'code',
  status: 'status',
  stage: 'stage',
  projectType: 'projectType',
  structureType: 'structureType',
  constructionType: 'constructionType',
  contractType: 'contractType',
  health: 'health',
  clientUserId: 'clientUserId',
  clientCompanyId: 'clientCompanyId',
  address: 'address',
  cityTown: 'cityTown',
  stateId: 'stateId',
  districtId: 'districtId',
  pin: 'pin',
  latitude: 'latitude',
  longitude: 'longitude',
  startDate: 'startDate',
  plannedCompletionDate: 'plannedCompletionDate',
  currency: 'currency',
  contractValue: 'contractValue',
  areaUnit: 'areaUnit',
  plotArea: 'plotArea',
  builtUpArea: 'builtUpArea',
  floors: 'floors',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefProjectTagScalarFieldEnum = {
  tagCode: 'tagCode',
  label: 'label'
};

exports.Prisma.ProjectTagScalarFieldEnum = {
  projectId: 'projectId',
  tagCode: 'tagCode'
};

exports.Prisma.UserProjectScalarFieldEnum = {
  userId: 'userId',
  projectId: 'projectId',
  createdAt: 'createdAt'
};

exports.Prisma.UserCompanyScalarFieldEnum = {
  userId: 'userId',
  companyId: 'companyId',
  createdAt: 'createdAt'
};

exports.Prisma.UserRoleMembershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  scopeType: 'scopeType',
  companyId: 'companyId',
  projectId: 'projectId',
  isDefault: 'isDefault',
  canApprove: 'canApprove',
  validFrom: 'validFrom',
  validTo: 'validTo',
  createdBy: 'createdBy',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionTemplateScalarFieldEnum = {
  id: 'id',
  role: 'role',
  matrix: 'matrix',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionProjectOverrideScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  role: 'role',
  matrix: 'matrix',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionUserOverrideScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  matrix: 'matrix',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefChecklistScalarFieldEnum = {
  id: 'id',
  code: 'code',
  title: 'title',
  discipline: 'discipline',
  stageLabel: 'stageLabel',
  tags: 'tags',
  status: 'status',
  version: 'version',
  versionLabel: 'versionLabel',
  versionMajor: 'versionMajor',
  versionMinor: 'versionMinor',
  versionPatch: 'versionPatch',
  aiDefault: 'aiDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefChecklistItemScalarFieldEnum = {
  id: 'id',
  checklistId: 'checklistId',
  seq: 'seq',
  text: 'text',
  requirement: 'requirement',
  method: 'method',
  risk: 'risk',
  tags: 'tags',
  itemCode: 'itemCode',
  critical: 'critical',
  aiEnabled: 'aiEnabled',
  aiConfidence: 'aiConfidence',
  units: 'units',
  tolerance: 'tolerance',
  base: 'base',
  plus: 'plus',
  minus: 'minus'
};

exports.Prisma.RefChecklistItemActivityLinkScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  activityId: 'activityId',
  label: 'label',
  tags: 'tags'
};

exports.Prisma.RefChecklistItemMaterialLinkScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  materialId: 'materialId',
  name: 'name',
  category: 'category',
  properties: 'properties'
};

exports.Prisma.RefActivityScalarFieldEnum = {
  id: 'id',
  code: 'code',
  title: 'title',
  discipline: 'discipline',
  stageLabel: 'stageLabel',
  phase: 'phase',
  element: 'element',
  system: 'system',
  nature: 'nature',
  method: 'method',
  status: 'status',
  version: 'version',
  versionLabel: 'versionLabel',
  versionMajor: 'versionMajor',
  versionMinor: 'versionMinor',
  versionPatch: 'versionPatch',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefMaterialScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  discipline: 'discipline',
  category: 'category',
  manufacturer: 'manufacturer',
  model: 'model',
  standards: 'standards',
  fireRating: 'fireRating',
  keyProps: 'keyProps',
  aliases: 'aliases',
  properties: 'properties',
  version: 'version',
  versionLabel: 'versionLabel',
  versionMajor: 'versionMajor',
  versionMinor: 'versionMinor',
  versionPatch: 'versionPatch',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefActivityMaterialScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  materialId: 'materialId',
  note: 'note'
};

exports.Prisma.ProjectModuleSettingScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  module: 'module',
  extra: 'extra',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminAuditSettingScalarFieldEnum = {
  id: 'id',
  assignmentsEnabled: 'assignmentsEnabled',
  updatedByUserId: 'updatedByUserId',
  updatedByName: 'updatedByName',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminAuditLogScalarFieldEnum = {
  id: 'id',
  actorUserId: 'actorUserId',
  actorName: 'actorName',
  action: 'action',
  module: 'module',
  targetUserId: 'targetUserId',
  role: 'role',
  scopeType: 'scopeType',
  companyId: 'companyId',
  projectId: 'projectId',
  ip: 'ip',
  userAgent: 'userAgent',
  before: 'before',
  after: 'after',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.StateType = exports.$Enums.StateType = {
  State: 'State',
  UT: 'UT'
};

exports.PreferredLanguage = exports.$Enums.PreferredLanguage = {
  en: 'en',
  hi: 'hi',
  bn: 'bn',
  ta: 'ta',
  te: 'te',
  mr: 'mr',
  pa: 'pa',
  or: 'or',
  gu: 'gu',
  kn: 'kn',
  ml: 'ml'
};

exports.OperatingZone = exports.$Enums.OperatingZone = {
  NCR: 'NCR',
  North: 'North',
  South: 'South',
  East: 'East',
  West: 'West',
  Central: 'Central'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  Active: 'Active',
  Inactive: 'Inactive'
};

exports.UserRole = exports.$Enums.UserRole = {
  Admin: 'Admin',
  Client: 'Client',
  IH_PMT: 'IH_PMT',
  Contractor: 'Contractor',
  Consultant: 'Consultant',
  PMC: 'PMC',
  Supplier: 'Supplier'
};

exports.CompanyStatus = exports.$Enums.CompanyStatus = {
  Active: 'Active',
  Inactive: 'Inactive'
};

exports.CompanyRole = exports.$Enums.CompanyRole = {
  IH_PMT: 'IH_PMT',
  Contractor: 'Contractor',
  Consultant: 'Consultant',
  PMC: 'PMC',
  Supplier: 'Supplier'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  Draft: 'Draft',
  Active: 'Active',
  OnHold: 'OnHold',
  Completed: 'Completed',
  Archived: 'Archived'
};

exports.ProjectStage = exports.$Enums.ProjectStage = {
  Planning: 'Planning',
  Design: 'Design',
  Procurement: 'Procurement',
  Execution: 'Execution',
  Handover: 'Handover',
  Closed: 'Closed'
};

exports.ProjectType = exports.$Enums.ProjectType = {
  Residential: 'Residential',
  Commercial: 'Commercial',
  Industrial: 'Industrial',
  Institutional: 'Institutional',
  MixedUse: 'MixedUse',
  Infrastructure: 'Infrastructure',
  Other: 'Other'
};

exports.StructureType = exports.$Enums.StructureType = {
  LowRise: 'LowRise',
  HighRise: 'HighRise',
  Villa: 'Villa',
  RowHouse: 'RowHouse',
  InteriorFitout: 'InteriorFitout',
  ShellCore: 'ShellCore',
  Other: 'Other'
};

exports.ConstructionType = exports.$Enums.ConstructionType = {
  New: 'New',
  Renovation: 'Renovation',
  Retrofit: 'Retrofit',
  Repair: 'Repair',
  Fitout: 'Fitout',
  Other: 'Other'
};

exports.ContractType = exports.$Enums.ContractType = {
  LumpSum: 'LumpSum',
  ItemRate: 'ItemRate',
  Turnkey: 'Turnkey',
  EPC: 'EPC',
  PMC: 'PMC',
  LabourOnly: 'LabourOnly',
  Other: 'Other'
};

exports.ProjectHealth = exports.$Enums.ProjectHealth = {
  Green: 'Green',
  Amber: 'Amber',
  Red: 'Red',
  Unknown: 'Unknown'
};

exports.CurrencyCode = exports.$Enums.CurrencyCode = {
  INR: 'INR',
  USD: 'USD',
  EUR: 'EUR',
  GBP: 'GBP',
  AED: 'AED',
  SAR: 'SAR',
  SGD: 'SGD',
  AUD: 'AUD',
  Other: 'Other'
};

exports.AreaUnit = exports.$Enums.AreaUnit = {
  SQFT: 'SQFT',
  SQM: 'SQM',
  SQYD: 'SQYD',
  Acre: 'Acre',
  Hectare: 'Hectare'
};

exports.RoleScope = exports.$Enums.RoleScope = {
  Global: 'Global',
  Company: 'Company',
  Project: 'Project'
};

exports.Discipline = exports.$Enums.Discipline = {
  Civil: 'Civil',
  MEP: 'MEP',
  Finishes: 'Finishes'
};

exports.MaterialDiscipline = exports.$Enums.MaterialDiscipline = {
  Civil: 'Civil',
  Architecture: 'Architecture',
  MEP_ELE: 'MEP_ELE',
  MEP_PHE: 'MEP_PHE',
  MEP_HVC: 'MEP_HVC',
  Finishes: 'Finishes'
};

exports.ModuleCode = exports.$Enums.ModuleCode = {
  WIR: 'WIR'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  AssignAdded: 'AssignAdded',
  AssignRemoved: 'AssignRemoved',
  AssignReplaced: 'AssignReplaced'
};

exports.Prisma.ModelName = {
  State: 'State',
  District: 'District',
  User: 'User',
  Company: 'Company',
  Project: 'Project',
  RefProjectTag: 'RefProjectTag',
  ProjectTag: 'ProjectTag',
  UserProject: 'UserProject',
  UserCompany: 'UserCompany',
  UserRoleMembership: 'UserRoleMembership',
  PermissionTemplate: 'PermissionTemplate',
  PermissionProjectOverride: 'PermissionProjectOverride',
  PermissionUserOverride: 'PermissionUserOverride',
  RefChecklist: 'RefChecklist',
  RefChecklistItem: 'RefChecklistItem',
  RefChecklistItemActivityLink: 'RefChecklistItemActivityLink',
  RefChecklistItemMaterialLink: 'RefChecklistItemMaterialLink',
  RefActivity: 'RefActivity',
  RefMaterial: 'RefMaterial',
  RefActivityMaterial: 'RefActivityMaterial',
  ProjectModuleSetting: 'ProjectModuleSetting',
  AdminAuditSetting: 'AdminAuditSetting',
  AdminAuditLog: 'AdminAuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
