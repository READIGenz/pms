datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============================= Enums ============================= */

enum PreferredLanguage {
  en
  hi
  bn
  ta
  te
  mr
  pa
  or
  gu
  kn
  ml

  @@map("PreferredLanguage")
}

enum OperatingZone {
  NCR
  North
  South
  East
  West
  Central

  @@map("OperatingZone")
}

enum UserStatus {
  Active
  Inactive

  @@map("UserStatus")
}

enum CompanyStatus {
  Active
  Inactive

  @@map("CompanyStatus")
}

enum UserRole {
  Admin
  Client
  IH_PMT     @map("IH-PMT")
  Contractor
  Consultant
  PMC
  Supplier

  @@map("UserRole")
}

enum CompanyRole {
  IH_PMT     @map("IH-PMT")
  Contractor
  Consultant
  PMC
  Supplier

  @@map("CompanyRole")
}

enum StateType {
  State
  UT

  @@map("StateType")
}

enum ProjectStatus {
  Draft
  Active
  OnHold
  Completed
  Archived

  @@map("project_status")
}

enum ProjectStage {
  Planning
  Design
  Procurement
  Execution
  Handover
  Closed

  @@map("project_stage")
}

enum ProjectType {
  Residential
  Commercial
  Industrial
  Institutional
  MixedUse
  Infrastructure
  Other

  @@map("project_type")
}

enum StructureType {
  LowRise
  HighRise
  Villa
  RowHouse
  InteriorFitout
  ShellCore
  Other

  @@map("structure_type")
}

enum ConstructionType {
  New
  Renovation
  Retrofit
  Repair
  Fitout
  Other

  @@map("construction_type")
}

enum ContractType {
  LumpSum
  ItemRate
  Turnkey
  EPC
  PMC
  LabourOnly
  Other

  @@map("contract_type")
}

enum ProjectHealth {
  Green
  Amber
  Red
  Unknown

  @@map("project_health")
}

enum CurrencyCode {
  INR
  USD
  EUR
  GBP
  AED
  SAR
  SGD
  AUD
  Other

  @@map("currency_code")
}

enum AreaUnit {
  SQFT
  SQM
  SQYD
  Acre
  Hectare

  @@map("area_unit")
}

// Scope of a role (for multi-role users) */
enum RoleScope {
  Global
  Company
  Project

  @@map("RoleScope")
}

enum AuditAction {
  AssignAdded
  AssignRemoved
  AssignReplaced // keep for future atomic replace ops, safe to leave

  @@map("AuditAction")
}

enum ModuleCode {
  WIR
  @@map("ModuleCode")
}

// ============================ Models ============================ */

model State {
  stateId   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String    @unique
  name      String    @unique
  type      StateType
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)

  districts District[]
  users     User[]
  companies Company[]
  projects  Project[]

  @@map("State")
}

model District {
  districtId String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  stateId    String   @db.Uuid
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)

  state State @relation(fields: [stateId], references: [stateId], onUpdate: Cascade, onDelete: Cascade)

  users     User[]
  companies Company[]
  projects  Project[]

  @@unique([stateId, name])
  @@map("District")
}

model User {
  userId            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code              String?            @unique
  firstName         String
  middleName        String?
  lastName          String?
  countryCode       String
  phone             String
  email             String?            @unique
  preferredLanguage PreferredLanguage?
  profilePhoto      String?
  stateId           String?            @db.Uuid
  districtId        String?            @db.Uuid
  cityTown          String?
  pin               String?
  operatingZone     OperatingZone?
  address           String?
  isClient          Boolean?           @default(false)
  isServiceProvider Boolean?           @default(false)
  userStatus        UserStatus         @default(Active)
  passwordHash      String?
  isSuperAdmin      Boolean?           @default(false)
  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @db.Timestamptz(6)

  // Optional legacy "primary role"
  userRole UserRole?

  state    State?    @relation(fields: [stateId], references: [stateId], onUpdate: Cascade, onDelete: SetNull)
  district District? @relation(fields: [districtId], references: [districtId], onUpdate: Cascade, onDelete: SetNull)

  // 1:M shortcuts
  projectsAsClient           Project[] @relation("ProjectClientUser")
  companiesAsServiceProvider Company[] @relation("CompanyServiceProviderUser")

  // Explicit M:N junctions
  userProjects  UserProject[]
  userCompanies UserCompany[]

  // Multi-role memberships
  userRoleMemberships UserRoleMembership[]

  @@unique([countryCode, phone], map: "User_cc_phone_unique")
  @@map("User")
}

model Company {
  companyId      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  status         CompanyStatus @default(Active)
  website        String?
  companyRole    CompanyRole?
  gstin          String?       @unique
  pan            String?       @unique
  cin            String?       @unique
  primaryContact String?
  contactMobile  String?
  contactEmail   String?
  stateId        String?       @db.Uuid
  districtId     String?       @db.Uuid
  address        String?
  pin            String?
  notes          String?
  userId         String?       @db.Uuid

  // NEW
  companyCode String? @unique

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  state           State?    @relation(fields: [stateId], references: [stateId], onUpdate: Cascade, onDelete: SetNull)
  district        District? @relation(fields: [districtId], references: [districtId], onUpdate: Cascade, onDelete: SetNull)
  serviceProvider User?     @relation("CompanyServiceProviderUser", fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  projects            Project[]            @relation("ProjectClientCompany")
  userCompanies       UserCompany[]
  userRoleMemberships UserRoleMembership[]

  @@map("Company")
}

model Project {
  projectId             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String
  code                  String?           @unique
  status                ProjectStatus     @default(Draft)
  stage                 ProjectStage?
  projectType           ProjectType?
  structureType         StructureType?
  constructionType      ConstructionType?
  contractType          ContractType?
  health                ProjectHealth     @default(Unknown)
  clientUserId          String?           @db.Uuid
  clientCompanyId       String?           @db.Uuid
  address               String?
  cityTown              String?
  stateId               String?           @db.Uuid
  districtId            String?           @db.Uuid
  pin                   String?
  latitude              Decimal?          @db.Decimal(9, 6)
  longitude             Decimal?          @db.Decimal(9, 6)
  startDate             DateTime?
  plannedCompletionDate DateTime?
  currency              CurrencyCode?     @default(INR)
  contractValue         Decimal?          @db.Decimal(18, 2)
  areaUnit              AreaUnit?
  plotArea              Decimal?          @db.Decimal(14, 2)
  builtUpArea           Decimal?          @db.Decimal(14, 2)
  floors                Int?
  description           String?
  createdAt             DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime          @updatedAt @db.Timestamptz(6)

  clientUser    User?     @relation("ProjectClientUser", fields: [clientUserId], references: [userId], onDelete: SetNull)
  clientCompany Company?  @relation("ProjectClientCompany", fields: [clientCompanyId], references: [companyId], onDelete: SetNull)
  state         State?    @relation(fields: [stateId], references: [stateId], onUpdate: Cascade, onDelete: SetNull)
  district      District? @relation(fields: [districtId], references: [districtId], onUpdate: Cascade, onDelete: SetNull)

  projectTags               ProjectTag[]
  userProjects              UserProject[] // junction backref
  userRoleMemberships       UserRoleMembership[] // role memberships scoped to this project
  PermissionProjectOverride PermissionProjectOverride[]
  moduleSettings ProjectModuleSetting[]


  @@map("Project")
}

model RefProjectTag {
  tagCode String @id
  label   String

  tags ProjectTag[]

  @@map("ref_project_tag")
}

model ProjectTag {
  projectId String @db.Uuid
  tagCode   String

  project Project       @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  tag     RefProjectTag @relation(fields: [tagCode], references: [tagCode], onDelete: Restrict)

  @@id([projectId, tagCode])
  @@map("ProjectTag")
}

// ===================== Junction tables (explicit M:N) ===================== */

model UserProject {
  userId    String   @db.Uuid
  projectId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  project Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("UserProject")
}

model UserCompany {
  userId    String   @db.Uuid
  companyId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  company Company @relation(fields: [companyId], references: [companyId], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, companyId])
  @@index([userId])
  @@index([companyId])
  @@map("UserCompany")
}

// ================== Multi-role membership (with validity window) ================== */

model UserRoleMembership {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @db.Uuid
  role       UserRole
  scopeType  RoleScope
  companyId  String?   @db.Uuid
  projectId  String?   @db.Uuid
  isDefault  Boolean   @default(false)
  /// NEW — matches the Explorer’s concept of “Authorised to Approve”
  canApprove Boolean   @default(false)

  validFrom DateTime? @db.Timestamptz(6) // <- nullable
  validTo   DateTime? @db.Timestamptz(6) // <- nullable

  createdBy String? @db.Uuid
  notes     String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6) // <-- NEW

  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  company Company? @relation(fields: [companyId], references: [companyId], onDelete: Cascade, onUpdate: Cascade)
  project Project? @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, projectId, role, validFrom, validTo], map: "urm_unique_user_project_role_window")
  @@index([userId, role])
  @@index([companyId])
  @@index([projectId])
  @@index([projectId, role, validFrom, validTo], map: "urm_project_role_window_idx")
  @@index([userId, role, validFrom, validTo], map: "urm_user_role_window_idx")
  @@map("UserRoleMembership")
}

// --- Stores entire permission matrix (by module→actions) as JSON ---
model PermissionTemplate {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role      UserRole @unique
  matrix    Json // { [moduleCode: string]: { view, raise, review, approve, close } }
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@map("PermissionTemplate")
}

model PermissionProjectOverride {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String   @db.Uuid
  role      UserRole
  matrix    Json
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  project Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([projectId, role], map: "ppo_project_role_unique")
  @@map("PermissionProjectOverride")
}

/// Deny-only overrides at User level for a specific Project.
/// Null/absent means "inherit".
model PermissionUserOverride {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String
  userId    String
  /// shape: { [moduleCode]: { view?: "inherit"|"deny", raise?:..., review?:..., approve?:..., close?:... } }
  matrix    Json

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([projectId, userId], map: "puo_project_user")
  @@map("PermissionUserOverride")
}

// ============================= Ref Libraries =============================
enum Discipline {
  Civil
  MEP
  Finishes

  @@map("Discipline")
}

// New enum just for materials
enum MaterialDiscipline {
  Civil
  Architecture
  MEP_ELE @map("MEP.ELE")
  MEP_PHE @map("MEP.PHE")
  MEP_HVC @map("MEP.HVC")
  Finishes

  @@map("MaterialDiscipline") // DB name (optional but nice)
}

model RefChecklist {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code         String?     @unique
  title        String
  discipline   Discipline
  stageLabel   String?                                // ← match RefActivity (optional)
  tags         String[]    @default([])
  status       String      @default("Active")
  version      Int         @default(1)

  // --- NEW: human label + sortable parts (like RefActivity) ---
  versionLabel String?
  versionMajor Int         @default(1)
  versionMinor Int         @default(0)
  versionPatch Int         @default(0)
  // ------------------------------------------------------------

  aiDefault    Boolean     @default(false)            // ← NEW: "AI (Default)" toggle

  createdAt    DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime    @updatedAt @db.Timestamptz(6)

  items        RefChecklistItem[]

  @@index([discipline, stageLabel])
  @@map("RefChecklist")
}

model RefChecklistItem {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checklistId String   @db.Uuid
  seq         Int

  // Existing
  text        String        // Title in the UI
  requirement String?       // "Mandatory" | "Optional"
  method      String[]      // keep
  risk        String?       // keep (we’ll mirror "Critical: Yes/No" here too if you want)
  tags        String[]      // (visual, measurement, evidence, document)

  // NEW (from your UI)
  itemCode     String?      // "Item Code"
  critical     Boolean?     // Yes/No
  aiEnabled    Boolean?     // AI: Yes/No
  aiConfidence Decimal?     // 0..1
  units        String?      // "mm", "N/mm2", "mm/m", ...
  tolerance    String?      // "<=", "+-", "="
  base         Decimal?     // 17.001
  plus         Decimal?     // 0.001
  minus        Decimal?     // 0.001

  checklist           RefChecklist                   @relation(fields: [checklistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  suggestedActivities RefChecklistItemActivityLink[]
  suggestedMaterials  RefChecklistItemMaterialLink[]

  @@index([checklistId])
  @@map("RefChecklistItem")
}

model RefChecklistItemActivityLink {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId     String   @db.Uuid
  activityId String?  @db.Uuid // null until approved/matched
  label      String
  tags       String[]

  item     RefChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  activity RefActivity?     @relation(fields: [activityId], references: [id], onDelete: SetNull)

  @@index([itemId])
  @@index([activityId])
  @@map("RefChecklistItemActivityLink")
}

model RefChecklistItemMaterialLink {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId     String  @db.Uuid
  materialId String? @db.Uuid // null until approved/matched
  name       String
  category   String?
  properties Json? // { key:value, uom?:string } or array

  item     RefChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  material RefMaterial?     @relation(fields: [materialId], references: [id], onDelete: SetNull)

  @@index([itemId])
  @@index([materialId])
  @@map("RefChecklistItemMaterialLink")
}

model RefActivity {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code       String?    @unique
  title      String
  discipline Discipline
  stageLabel String?
  phase      String[]   @default([]) // e.g., ["Execution", "Handover"]
  element    String[]   @default([]) // e.g., ["Slab", "Beam"]
  system     String[] // array tags
  nature     String[] // array tags
  method     String[] // array tags
  status     String     @default("Active")
  version    Int        @default(1)
// --- NEW: human label + sortable parts ---
  versionLabel String?           // e.g. "1.2.3"
  versionMajor Int      @default(1)
  versionMinor Int      @default(0)
  versionPatch Int      @default(0)
  // -----------------------------------------

  notes      String?
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt @db.Timestamptz(6)

  materials                    RefActivityMaterial[]
  RefChecklistItemActivityLink RefChecklistItemActivityLink[]

  @@unique([discipline, stageLabel, title], map: "refactivity_uq_disc_stage_title")
  @@map("RefActivity")
}

model RefMaterial {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code         String?  @unique
  name         String
  discipline   MaterialDiscipline?   // <— use the new enum here
  category     String?
  manufacturer String?
  model        String?
  standards    String[] @default([])
  fireRating   String?
  keyProps     String[] @default([])
  aliases      String[] @default([])
  properties   Json?
  version      Int      @default(1)

  // --- human label + sortable parts ---
  versionLabel String?          // e.g. "1.2.3"
  versionMajor Int      @default(1)
  versionMinor Int      @default(0)
  versionPatch Int      @default(0)
  // ----------------------------------------

  notes        String?
  status       String   @default("Active")
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)

  activityUses                 RefActivityMaterial[]
  RefChecklistItemMaterialLink RefChecklistItemMaterialLink[]

  @@index([name, category])
  @@index([discipline, category, manufacturer])
  @@map("RefMaterial")
}

model RefActivityMaterial {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activityId String  @db.Uuid
  materialId String  @db.Uuid
  note       String?

  activity RefActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  material RefMaterial @relation(fields: [materialId], references: [id], onDelete: Restrict)

  @@unique([activityId, materialId], map: "refactmat_activity_material_uq")
  @@index([activityId])
  @@index([materialId])
  @@map("RefActivityMaterial")
}

model ProjectModuleSetting {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String     @db.Uuid
  module    ModuleCode
  /// Stores only the WIR settings used in the UI:
  /// { transmissionType: "Public"|"Private"|"UserSet", redirectAllowed: boolean, exportPdfAllowed: boolean }
  extra     Json       

  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)

  project Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([projectId, module], map: "pms_project_module_unique")
  @@index([projectId])
  @@map("ProjectModuleSetting")
}

model AdminAuditSetting {
  id                 Int       @id @default(1)
  /// When false, no assignment audit rows are written.
  assignmentsEnabled Boolean   @default(true)

  // Who flipped the switch last (denormalized for history)
  updatedByUserId    String?   @db.Uuid
  updatedByName      String?
  updatedAt          DateTime  @updatedAt @db.Timestamptz(6)

  @@map("AdminAuditSetting")
}

model AdminAuditLog {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Who performed the change
  actorUserId   String       @db.Uuid
  actorName     String       // full name at time of action (denormalized)

  // What happened
  action        AuditAction
  module        String       @default("Assignments")

  // Whose assignments were changed
  targetUserId  String       @db.Uuid

  // Context of the membership affected
  role          UserRole?
  scopeType     RoleScope?
  companyId     String?      @db.Uuid
  projectId     String?      @db.Uuid

  // Optional request context
  ip            String?
  userAgent     String?

  // Snapshots
  /// e.g. { id, role, scopeType, companyId, projectId }
  before        Json?
  after         Json?

  createdAt     DateTime     @default(now()) @db.Timestamptz(6)

  @@index([targetUserId, createdAt])
  @@index([companyId])
  @@index([projectId])
  @@index([action])
  @@map("AdminAuditLog")
}
