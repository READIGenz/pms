generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InspectionType {
  WIR
  MIR
}

enum InspectionStatus {
  DRAFT
  SUBMITTED
  APPROVED
  AWC
  REJECTED
  INSPECTION_SCHEDULED
}

enum UserStatus {
  Active
  Inactive
}

model User {
  userId       String     @id @default(uuid())
  code         String     @unique
  role         String
  name         String?
  city         String?
  email        String?    @unique
  countryCode  String     @default("91") // digits only (e.g. "91")
  phone        String?                  // 10-digit local, no leading 0
  isSuperAdmin Boolean    @default(false)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  modifiedAt   DateTime @updatedAt      @db.Timestamptz(6)
  status       UserStatus @default(Active)

  memberships  ProjectMember[]

  @@index([name])
  @@index([email])
  @@index([code])
  @@index([role])
  @@index([countryCode])
  @@index([phone])
  @@index([countryCode, phone])          // ðŸ”Ž speeds cc+phone lookups
  @@unique([countryCode, phone])         // unique when phone present; multiple NULLs allowed
}

model Project {
  projectId String    @id @default(uuid())
  code      String    @unique
  name      String
  city      String
  status    String    @default("Ongoing")
  stage     String
  health    String    @default("Good")
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  memberships ProjectMember[]
  inspections Inspection[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  project Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([projectId, userId, role], name: "projectId_userId_role")
  @@index([projectId])
  @@index([userId])
}

model File {
  id        String   @id @default(uuid())
  projectId String
  key       String
  kind      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model Inspection {
  id              String           @id @default(uuid())
  type            InspectionType
  projectId       String
  project         Project          @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  title           String
  discipline      String
  status          InspectionStatus @default(DRAFT)
  contractorId    String
  inspectorId     String?
  hodId           String?
  parentId        String?
  followupChildId String?
  requestedAt     DateTime         @default(now()) @db.Timestamptz(6)
  submittedAt     DateTime?       @default(now()) @db.Timestamptz(6)
  closedAt        DateTime?       @default(now()) @db.Timestamptz(6)
  items           InspectionItem[]
  lineage         InspectionEvent[]
  evidence        Evidence[]
  materials       MaterialsInfo?

  @@index([projectId, type, status])
  @@index([projectId, requestedAt])
}

model InspectionItem {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  isCritical   Boolean    @default(false)
  specText     String?
  requirement  String?
  result       String?
  measured     String?
}

model InspectionEvent {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  event        String
  actorId      String
  note         String?
  at           DateTime          @default(now()) @db.Timestamptz(6)
}

model Evidence {
  id           String     @id @default(uuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  fileId       String
  kind         String
  lat          Float?
  lng          Float?
  ts           DateTime         @default(now()) @db.Timestamptz(6)
}

model MaterialsInfo {
  id           String     @id @default(uuid())
  inspectionId String     @unique
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  brand        String?
  batchNo      String?
  qty          Float?
  uom          String?
}
